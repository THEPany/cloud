(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[23],{

/***/ "./node_modules/braintree-web-drop-in/dist/browser/dropin.js":
/*!*******************************************************************!*\
  !*** ./node_modules/braintree-web-drop-in/dist/browser/dropin.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var require;var require;(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nvar loadScript = require('./load-script');\nvar loadStylesheet = require('./load-stylesheet');\n\nmodule.exports = {\n  loadScript: loadScript,\n  loadStylesheet: loadStylesheet\n};\n\n},{\"./load-script\":3,\"./load-stylesheet\":4}],2:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar PromisePolyfill = require('promise-polyfill');\n\nmodule.exports = global.Promise || PromisePolyfill;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"promise-polyfill\":121}],3:[function(require,module,exports){\n'use strict';\n\nvar Promise = require('./lib/promise');\nvar scriptPromiseCache = {};\n\nfunction loadScript(options) {\n  var attrs, container, script, scriptLoadPromise;\n  var stringifiedOptions = JSON.stringify(options);\n\n  if (!options.forceScriptReload) {\n    scriptLoadPromise = scriptPromiseCache[stringifiedOptions];\n\n    if (scriptLoadPromise) {\n      return scriptLoadPromise;\n    }\n  }\n\n  script = document.createElement('script');\n  attrs = options.dataAttributes || {};\n  container = options.container || document.head;\n\n  script.src = options.src;\n  script.id = options.id;\n  script.async = true;\n\n  Object.keys(attrs).forEach(function (key) {\n    script.setAttribute('data-' + key, attrs[key]);\n  });\n\n  scriptLoadPromise = new Promise(function (resolve, reject) {\n    script.addEventListener('load', function () {\n      resolve(script);\n    });\n    script.addEventListener('error', function () {\n      reject(new Error(options.src + ' failed to load.'));\n    });\n    script.addEventListener('abort', function () {\n      reject(new Error(options.src + ' has aborted.'));\n    });\n    container.appendChild(script);\n  });\n\n  scriptPromiseCache[stringifiedOptions] = scriptLoadPromise;\n\n  return scriptLoadPromise;\n}\n\nloadScript.clearCache = function () {\n  scriptPromiseCache = {};\n};\n\nmodule.exports = loadScript;\n\n},{\"./lib/promise\":2}],4:[function(require,module,exports){\n'use strict';\n\nvar Promise = require('./lib/promise');\n\nmodule.exports = function loadStylesheet(options) {\n  var container;\n  var stylesheet = document.querySelector('link[href=\"' + options.href + '\"]');\n\n  if (stylesheet) {\n    return Promise.resolve(stylesheet);\n  }\n\n  stylesheet = document.createElement('link');\n  container = options.container || document.head;\n\n  stylesheet.setAttribute('rel', 'stylesheet');\n  stylesheet.setAttribute('type', 'text/css');\n  stylesheet.setAttribute('href', options.href);\n  stylesheet.setAttribute('id', options.id);\n\n  if (container.firstChild) {\n    container.insertBefore(stylesheet, container.firstChild);\n  } else {\n    container.appendChild(stylesheet);\n  }\n\n  return Promise.resolve(stylesheet);\n};\n\n},{\"./lib/promise\":2}],5:[function(require,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = function isAndroid(ua) {\n  ua = ua || global.navigator.userAgent;\n  return /Android/.test(ua);\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],6:[function(require,module,exports){\n'use strict';\n\nvar isEdge = require('./is-edge');\nvar isSamsung = require('./is-samsung');\n\nmodule.exports = function isChrome(ua) {\n  ua = ua || navigator.userAgent;\n  return (ua.indexOf('Chrome') !== -1 || ua.indexOf('CriOS') !== -1) && !isEdge(ua) && !isSamsung(ua);\n};\n\n},{\"./is-edge\":7,\"./is-samsung\":17}],7:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function isEdge(ua) {\n  ua = ua || navigator.userAgent;\n  return ua.indexOf('Edge/') !== -1;\n};\n\n},{}],8:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar isIE11 = require('./is-ie11');\n\nmodule.exports = function isIE(ua) {\n  ua = ua || global.navigator.userAgent;\n  return ua.indexOf('MSIE') !== -1 || isIE11(ua);\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./is-ie11\":10}],9:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function isIe10(ua) {\n  ua = ua || navigator.userAgent;\n  return ua.indexOf('MSIE 10') !== -1;\n};\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function isIe11(ua) {\n  ua = ua || navigator.userAgent;\n  return ua.indexOf('Trident/7') !== -1;\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function isIe9(ua) {\n  ua = ua || navigator.userAgent;\n  return ua.indexOf('MSIE 9') !== -1;\n};\n\n},{}],12:[function(require,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = function isIosFirefox(ua) {\n  ua = ua || global.navigator.userAgent;\n  return /FxiOS/i.test(ua);\n};\n\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],13:[function(require,module,exports){\n'use strict';\n\nvar isIos = require('./is-ios');\nvar webkitRegexp = /webkit/i;\n\nfunction isWebkit(ua) {\n  return ua.match(webkitRegexp);\n}\n\nmodule.exports = function isIosSafari(ua) {\n  ua = ua || navigator.userAgent;\n\n  return isIos(ua) && isWebkit(ua) && ua.indexOf('CriOS') === -1;\n};\n\n},{\"./is-ios\":15}],14:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar isIos = require('./is-ios');\n\n// The Google Search iOS app is technically a webview and doesn't support popups.\nfunction isGoogleSearchApp(ua) {\n  return /\\bGSA\\b/.test(ua);\n}\n\nmodule.exports = function isIosWebview(ua) {\n  ua = ua || global.navigator.userAgent;\n  if (isIos(ua)) {\n    if (isGoogleSearchApp(ua)) {\n      return true;\n    }\n    return /.+AppleWebKit(?!.*Safari)/.test(ua);\n  }\n  return false;\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./is-ios\":15}],15:[function(require,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = function isIos(ua) {\n  ua = ua || global.navigator.userAgent;\n  return /iPhone|iPod|iPad/i.test(ua);\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],16:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar isIosFirefox = require('./is-ios-firefox');\n\nmodule.exports = function isMobileFirefox(ua) {\n  ua = ua || global.navigator.userAgent;\n  return isIosFirefox(ua) || /iPhone|iPod|iPad|Mobile|Tablet/i.test(ua) && /Firefox/i.test(ua);\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./is-ios-firefox\":12}],17:[function(require,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = function isSamsungBrowser(ua) {\n  ua = ua || global.navigator.userAgent;\n  return /SamsungBrowser/i.test(ua);\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],18:[function(require,module,exports){\n'use strict';\n\nfunction _classesOf(element) {\n  return element.className.trim().split(/\\s+/);\n}\n\nfunction add(element) {\n  var toAdd = Array.prototype.slice.call(arguments, 1);\n  var className = _classesOf(element).filter(function (classname) {\n    return toAdd.indexOf(classname) === -1;\n  }).concat(toAdd).join(' ');\n\n  element.className = className;\n}\n\nfunction remove(element) {\n  var toRemove = Array.prototype.slice.call(arguments, 1);\n  var className = _classesOf(element).filter(function (classname) {\n    return toRemove.indexOf(classname) === -1;\n  }).join(' ');\n\n  element.className = className;\n}\n\nfunction toggle(element, classname, adding) {\n  if (adding) {\n    add(element, classname);\n  } else {\n    remove(element, classname);\n  }\n}\n\nmodule.exports = {\n  add: add,\n  remove: remove,\n  toggle: toggle\n};\n\n},{}],19:[function(require,module,exports){\n'use strict';\n\nvar setAttributes = require('./lib/set-attributes');\nvar defaultAttributes = require('./lib/default-attributes');\nvar assign = require('./lib/assign');\n\nmodule.exports = function createFrame(options) {\n  var iframe = document.createElement('iframe');\n  var config = assign({}, defaultAttributes, options);\n\n  if (config.style && typeof config.style !== 'string') {\n    assign(iframe.style, config.style);\n    delete config.style;\n  }\n\n  setAttributes(iframe, config);\n\n  if (!iframe.getAttribute('id')) {\n    iframe.id = iframe.name;\n  }\n\n  return iframe;\n};\n\n},{\"./lib/assign\":20,\"./lib/default-attributes\":21,\"./lib/set-attributes\":22}],20:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function assign(target) {\n  var objs = Array.prototype.slice.call(arguments, 1);\n\n  objs.forEach(function (obj) {\n    if (typeof obj !== 'object') { return; }\n\n    Object.keys(obj).forEach(function (key) {\n      target[key] = obj[key];\n    });\n  });\n\n  return target;\n}\n\n},{}],21:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  src: 'about:blank',\n  frameBorder: 0,\n  allowtransparency: true,\n  scrolling: 'no'\n};\n\n},{}],22:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function setAttributes(element, attributes) {\n  var value;\n\n  for (var key in attributes) {\n    if (attributes.hasOwnProperty(key)) {\n      value = attributes[key];\n\n      if (value == null) {\n        element.removeAttribute(key);\n      } else {\n        element.setAttribute(key, value);\n      }\n    }\n  }\n};\n\n},{}],23:[function(require,module,exports){\n'use strict';\n\nfunction deferred(fn) {\n  return function () {\n    // IE9 doesn't support passing arguments to setTimeout so we have to emulate it.\n    var args = arguments;\n\n    setTimeout(function () {\n      fn.apply(null, args);\n    }, 1);\n  };\n}\n\nmodule.exports = deferred;\n\n},{}],24:[function(require,module,exports){\n'use strict';\n\nfunction once(fn) {\n  var called = false;\n\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(null, arguments);\n    }\n  };\n}\n\nmodule.exports = once;\n\n},{}],25:[function(require,module,exports){\n'use strict';\n\nfunction promiseOrCallback(promise, callback) { // eslint-disable-line consistent-return\n  if (callback) {\n    promise\n      .then(function (data) {\n        callback(null, data);\n      })\n      .catch(function (err) {\n        callback(err);\n      });\n  } else {\n    return promise;\n  }\n}\n\nmodule.exports = promiseOrCallback;\n\n},{}],26:[function(require,module,exports){\n'use strict';\n\nvar deferred = require('./lib/deferred');\nvar once = require('./lib/once');\nvar promiseOrCallback = require('./lib/promise-or-callback');\n\nfunction wrapPromise(fn) {\n  return function () {\n    var callback;\n    var args = Array.prototype.slice.call(arguments);\n    var lastArg = args[args.length - 1];\n\n    if (typeof lastArg === 'function') {\n      callback = args.pop();\n      callback = once(deferred(callback));\n    }\n    return promiseOrCallback(fn.apply(this, args), callback); // eslint-disable-line no-invalid-this\n  };\n}\n\nwrapPromise.wrapPrototype = function (target, options) {\n  var methods, ignoreMethods, includePrivateMethods;\n\n  options = options || {};\n  ignoreMethods = options.ignoreMethods || [];\n  includePrivateMethods = options.transformPrivateMethods === true;\n\n  methods = Object.getOwnPropertyNames(target.prototype).filter(function (method) {\n    var isNotPrivateMethod;\n    var isNonConstructorFunction = method !== 'constructor' &&\n      typeof target.prototype[method] === 'function';\n    var isNotAnIgnoredMethod = ignoreMethods.indexOf(method) === -1;\n\n    if (includePrivateMethods) {\n      isNotPrivateMethod = true;\n    } else {\n      isNotPrivateMethod = method.charAt(0) !== '_';\n    }\n\n    return isNonConstructorFunction &&\n      isNotPrivateMethod &&\n      isNotAnIgnoredMethod;\n  });\n\n  methods.forEach(function (method) {\n    var original = target.prototype[method];\n\n    target.prototype[method] = wrapPromise(original);\n  });\n\n  return target;\n};\n\nmodule.exports = wrapPromise;\n\n},{\"./lib/deferred\":23,\"./lib/once\":24,\"./lib/promise-or-callback\":25}],27:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar BraintreeError = require('../lib/braintree-error');\nvar analytics = require('../lib/analytics');\nvar errors = require('./errors');\nvar Promise = require('../lib/promise');\nvar methods = require('../lib/methods');\nvar convertMethodsToError = require('../lib/convert-methods-to-error');\nvar wrapPromise = require('@braintree/wrap-promise');\n\n/**\n * @typedef {object} ApplePay~tokenizePayload\n * @property {string} nonce The payment method nonce.\n * @property {object} details Additional details.\n * @property {string} details.cardType Type of card, ex: Visa, MasterCard.\n * @property {string} details.cardHolderName The name of the card holder.\n * @property {string} details.dpanLastTwo Last two digits of card number.\n * @property {string} description A human-readable description.\n * @property {string} type The payment method type, always `ApplePayCard`.\n * @property {object} binData Information about the card based on the bin.\n * @property {string} binData.commercial Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.countryOfIssuance The country of issuance.\n * @property {string} binData.debit Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.healthcare Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.issuingBank The issuing bank.\n * @property {string} binData.payroll Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.prepaid Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.productId The product id.\n */\n\n/**\n * An Apple Pay Payment Authorization Event object.\n * @typedef {object} ApplePayPaymentAuthorizedEvent\n * @external ApplePayPaymentAuthorizedEvent\n * @see {@link https://developer.apple.com/reference/applepayjs/applepaypaymentauthorizedevent ApplePayPaymentAuthorizedEvent}\n */\n\n/**\n * An Apple Pay Payment Request object.\n * @typedef {object} ApplePayPaymentRequest\n * @external ApplePayPaymentRequest\n * @see {@link https://developer.apple.com/reference/applepayjs/1916082-applepay_js_data_types/paymentrequest PaymentRequest}\n */\n\n/**\n * @class\n * @param {object} options Options\n * @description <strong>You cannot use this constructor directly. Use {@link module:braintree-web/apple-pay.create|braintree.applePay.create} instead.</strong>\n * @classdesc This class represents an Apple Pay component. Instances of this class have methods for validating the merchant server and tokenizing payments.\n */\nfunction ApplePay(options) {\n  this._client = options.client;\n  /**\n   * @name ApplePay#merchantIdentifier\n   * @description A special merchant ID which represents the merchant association with Braintree. Required when using `ApplePaySession.canMakePaymentsWithActiveCard`.\n   * @example\n   * var promise = ApplePaySession.canMakePaymentsWithActiveCard(applePayInstance.merchantIdentifier);\n   * promise.then(function (canMakePaymentsWithActiveCard) {\n   *   if (canMakePaymentsWithActiveCard) {\n   *     // Set up Apple Pay buttons\n   *   }\n   * });\n   */\n  Object.defineProperty(this, 'merchantIdentifier', {\n    value: this._client.getConfiguration().gatewayConfiguration.applePayWeb.merchantIdentifier,\n    configurable: false,\n    writable: false\n  });\n}\n\n/**\n * Merges a payment request with Braintree defaults to return an {external:ApplePayPaymentRequest}.\n *\n * The following properties are assigned to `paymentRequest` if not already defined. Their default values come from the Braintree gateway.\n * - `countryCode`\n * - `currencyCode`\n * - `merchantCapabilities`\n * - `supportedNetworks`\n * @public\n * @param {external:ApplePayPaymentRequest} paymentRequest The payment request details to apply on top of those from Braintree.\n * @returns {external:ApplePayPaymentRequest} The decorated `paymentRequest` object.\n * @example\n * var applePay = require('braintree-web/apple-pay');\n *\n * applePay.create({client: clientInstance}, function (applePayErr, applePayInstance) {\n *   if (applePayErr) {\n *     // Handle error here\n *     return;\n *   }\n *\n *   var paymentRequest = applePayInstance.createPaymentRequest({\n *     total: {\n *       label: 'My Company',\n *       amount: '19.99'\n *     }\n *   });\n *\n *   var session = new ApplePaySession(2, paymentRequest);\n *\n *   // ...\n */\nApplePay.prototype.createPaymentRequest = function (paymentRequest) {\n  var applePay = this._client.getConfiguration().gatewayConfiguration.applePayWeb;\n  var defaults = {\n    countryCode: applePay.countryCode,\n    currencyCode: applePay.currencyCode,\n    merchantCapabilities: applePay.merchantCapabilities || ['supports3DS'],\n    supportedNetworks: applePay.supportedNetworks.map(function (network) {\n      return network === 'mastercard' ? 'masterCard' : network;\n    })\n  };\n\n  return Object.assign({}, defaults, paymentRequest);\n};\n\n/**\n * Validates your merchant website, as required by `ApplePaySession` before payment can be authorized.\n * @public\n * @param {object} options Options\n * @param {string} options.validationURL The validationURL fram an `ApplePayValidateMerchantEvent`.\n * @param {string} options.displayName The canonical name for your store. Use a non-localized name. This parameter should be a UTF-8 string that is a maximum of 128 characters. The system may display this name to the user.\n * @param {callback} [callback] The second argument, <code>data</code>, is the Apple Pay merchant session object. If no callback is provided, `performValidation` returns a promise.\n * Pass the merchant session to your Apple Pay session's `completeMerchantValidation` method.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * var applePay = require('braintree-web/apple-pay');\n *\n * applePay.create({client: clientInstance}, function (applePayErr, applePayInstance) {\n *   if (applePayErr) {\n *     // Handle error here\n *     return;\n *   }\n *\n *   var paymentRequest = applePayInstance.createPaymentRequest({\n *     total: {\n *       label: 'My Company',\n *       amount: '19.99'\n *     }\n *   });\n *   var session = new ApplePaySession(2, paymentRequest);\n *\n *   session.onvalidatemerchant = function (event) {\n *     applePayInstance.performValidation({\n *       validationURL: event.validationURL,\n *       displayName: 'My Great Store'\n *     }, function (validationErr, validationData) {\n *       if (validationErr) {\n *         console.error(validationErr);\n *         session.abort();\n *         return;\n *       }\n *\n *       session.completeMerchantValidation(validationData);\n *     });\n *   };\n * });\n */\nApplePay.prototype.performValidation = function (options) {\n  var applePayWebSession;\n  var self = this;\n\n  if (!options || !options.validationURL) {\n    return Promise.reject(new BraintreeError(errors.APPLE_PAY_VALIDATION_URL_REQUIRED));\n  }\n\n  applePayWebSession = {\n    validationUrl: options.validationURL,\n    domainName: options.domainName || global.location.hostname,\n    merchantIdentifier: options.merchantIdentifier || this.merchantIdentifier\n  };\n\n  if (options.displayName != null) {\n    applePayWebSession.displayName = options.displayName;\n  }\n\n  return this._client.request({\n    method: 'post',\n    endpoint: 'apple_pay_web/sessions',\n    data: {\n      _meta: {source: 'apple-pay'},\n      applePayWebSession: applePayWebSession\n    }\n  }).then(function (response) {\n    analytics.sendEvent(self._client, 'applepay.performValidation.succeeded');\n\n    return Promise.resolve(response);\n  }).catch(function (err) {\n    analytics.sendEvent(self._client, 'applepay.performValidation.failed');\n\n    if (err.code === 'CLIENT_REQUEST_ERROR') {\n      return Promise.reject(new BraintreeError({\n        type: errors.APPLE_PAY_MERCHANT_VALIDATION_FAILED.type,\n        code: errors.APPLE_PAY_MERCHANT_VALIDATION_FAILED.code,\n        message: errors.APPLE_PAY_MERCHANT_VALIDATION_FAILED.message,\n        details: {\n          originalError: err.details.originalError\n        }\n      }));\n    }\n\n    return Promise.reject(new BraintreeError({\n      type: errors.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.type,\n      code: errors.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.code,\n      message: errors.APPLE_PAY_MERCHANT_VALIDATION_NETWORK.message,\n      details: {\n        originalError: err\n      }\n    }));\n  });\n};\n\n/**\n * Tokenizes an Apple Pay payment. This will likely be called in your `ApplePaySession`'s `onpaymentauthorized` callback.\n * @public\n * @param {object} options Options\n * @param {object} options.token The `payment.token` property of an {@link external:ApplePayPaymentAuthorizedEvent}.\n * @param {callback} [callback] The second argument, <code>data</code>, is a {@link ApplePay~tokenizePayload|tokenizePayload}. If no callback is provided, `tokenize` returns a promise that resolves with a {@link ApplePay~tokenizePayload|tokenizePayload}.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * var applePay = require('braintree-web/apple-pay');\n *\n * applePay.create({client: clientInstance}, function (applePayErr, applePayInstance) {\n *   if (applePayErr) {\n *     // Handle error here\n *     return;\n *   }\n *\n *   var paymentRequest = applePayInstance.createPaymentRequest({\n *     total: {\n *       label: 'My Company',\n *       amount: '19.99'\n *     }\n *   });\n *   var session = new ApplePaySession(2, paymentRequest);\n *\n *   session.onpaymentauthorized = function (event) {\n *     applePayInstance.tokenize({\n *       token: event.payment.token\n *     }, function (tokenizeErr, tokenizedPayload) {\n *       if (tokenizeErr) {\n *         session.completePayment(ApplePaySession.STATUS_FAILURE);\n *         return;\n *       }\n *       session.completePayment(ApplePaySession.STATUS_SUCCESS);\n *\n *       // Send the tokenizedPayload to your server here!\n *     });\n *   };\n *\n *   // ...\n * });\n */\nApplePay.prototype.tokenize = function (options) {\n  var self = this;\n\n  if (!options.token) {\n    return Promise.reject(new BraintreeError(errors.APPLE_PAY_PAYMENT_TOKEN_REQUIRED));\n  }\n\n  return this._client.request({\n    method: 'post',\n    endpoint: 'payment_methods/apple_payment_tokens',\n    data: {\n      _meta: {\n        source: 'apple-pay'\n      },\n      applePaymentToken: Object.assign({}, options.token, {\n        // The gateway requires this key to be base64-encoded.\n        paymentData: btoa(JSON.stringify(options.token.paymentData))\n      })\n    }\n  }).then(function (response) {\n    analytics.sendEvent(self._client, 'applepay.tokenize.succeeded');\n\n    return Promise.resolve(response.applePayCards[0]);\n  }).catch(function (err) {\n    analytics.sendEvent(self._client, 'applepay.tokenize.failed');\n\n    return Promise.reject(new BraintreeError({\n      type: errors.APPLE_PAY_TOKENIZATION.type,\n      code: errors.APPLE_PAY_TOKENIZATION.code,\n      message: errors.APPLE_PAY_TOKENIZATION.message,\n      details: {\n        originalError: err\n      }\n    }));\n  });\n};\n\n/**\n * Cleanly tear down anything set up by {@link module:braintree-web/apple-pay.create|create}.\n * @public\n * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.\n * @example\n * applePayInstance.teardown();\n * @example <caption>With callback</caption>\n * applePayInstance.teardown(function () {\n *   // teardown is complete\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nApplePay.prototype.teardown = function () {\n  convertMethodsToError(this, methods(ApplePay.prototype));\n\n  return Promise.resolve();\n};\n\nmodule.exports = wrapPromise.wrapPrototype(ApplePay);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../lib/analytics\":67,\"../lib/braintree-error\":72,\"../lib/convert-methods-to-error\":77,\"../lib/methods\":93,\"../lib/promise\":95,\"./errors\":28,\"@braintree/wrap-promise\":26}],28:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.Apple Pay - Creation Error Codes\n * @description Errors that occur when [creating the Apple Pay component](/current/module-braintree-web_apple-pay.html#.create).\n * @property {MERCHANT} APPLE_PAY_NOT_ENABLED Occurs when the authorization used is not authorized to process Apple Pay.\n */\n\n/**\n * @name BraintreeError.Apple Pay - performValidation Error Codes\n * @description Errors that occur when [validating](/current/ApplePay.html#performValidation).\n * @property {MERCHANT} APPLE_PAY_VALIDATION_URL_REQUIRED Occurs when the `validationURL` option is not passed in.\n * @property {MERCHANT} APPLE_PAY_MERCHANT_VALIDATION_FAILED Occurs when the website domain has not been registered in the Braintree control panel.\n * @property {NETWORK} APPLE_PAY_MERCHANT_VALIDATION_NETWORK Occurs when an unknown network error occurs.\n */\n\n/**\n * @name BraintreeError.Apple Pay - tokenize Error Codes\n * @description Errors that occur when [tokenizing](/current/ApplePay.html#tokenize).\n * @property {MERCHANT} APPLE_PAY_PAYMENT_TOKEN_REQUIRED Occurs when the `token` option is not passed in.\n * @property {NETWORK} APPLE_PAY_TOKENIZATION Occurs when an unknown network error occurs.\n */\n\nvar BraintreeError = require('../lib/braintree-error');\n\nmodule.exports = {\n  APPLE_PAY_NOT_ENABLED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'APPLE_PAY_NOT_ENABLED',\n    message: 'Apple Pay is not enabled for this merchant.'\n  },\n  APPLE_PAY_VALIDATION_URL_REQUIRED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'APPLE_PAY_VALIDATION_URL_REQUIRED',\n    message: 'performValidation must be called with a validationURL.'\n  },\n  APPLE_PAY_MERCHANT_VALIDATION_NETWORK: {\n    type: BraintreeError.types.NETWORK,\n    code: 'APPLE_PAY_MERCHANT_VALIDATION_NETWORK',\n    message: 'A network error occurred when validating the Apple Pay merchant.'\n  },\n  APPLE_PAY_MERCHANT_VALIDATION_FAILED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'APPLE_PAY_MERCHANT_VALIDATION_FAILED',\n    message: 'Make sure you have registered your domain name in the Braintree Control Panel.'\n  },\n  APPLE_PAY_PAYMENT_TOKEN_REQUIRED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'APPLE_PAY_PAYMENT_TOKEN_REQUIRED',\n    message: 'tokenize must be called with a payment token.'\n  },\n  APPLE_PAY_TOKENIZATION: {\n    type: BraintreeError.types.NETWORK,\n    code: 'APPLE_PAY_TOKENIZATION',\n    message: 'A network error occurred when processing the Apple Pay payment.'\n  }\n};\n\n},{\"../lib/braintree-error\":72}],29:[function(require,module,exports){\n'use strict';\n\n/**\n * @module braintree-web/apple-pay\n * @description Accept Apple Pay on the Web. *This component is currently in beta and is subject to change.*\n */\n\nvar BraintreeError = require('../lib/braintree-error');\nvar ApplePay = require('./apple-pay');\nvar analytics = require('../lib/analytics');\nvar basicComponentVerification = require('../lib/basic-component-verification');\nvar createDeferredClient = require('../lib/create-deferred-client');\nvar createAssetsUrl = require('../lib/create-assets-url');\nvar errors = require('./errors');\nvar VERSION = \"3.42.0\";\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\n\n/**\n * @static\n * @function create\n * @param {object} options Creation options:\n * @param {Client} [options.client] A {@link Client} instance.\n * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.\n * @param {callback} [callback] The second argument, `data`, is the {@link ApplePay} instance. If no callback is provided, `create` returns a promise that resolves with the {@link ApplePay} instance.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nfunction create(options) {\n  var name = 'Apple Pay';\n\n  return basicComponentVerification.verify({\n    name: name,\n    client: options.client,\n    authorization: options.authorization\n  }).then(function () {\n    return createDeferredClient.create({\n      authorization: options.authorization,\n      client: options.client,\n      debug: options.debug,\n      assetsUrl: createAssetsUrl.create(options.authorization),\n      name: name\n    });\n  }).then(function (client) {\n    options.client = client;\n\n    if (!options.client.getConfiguration().gatewayConfiguration.applePayWeb) {\n      return Promise.reject(new BraintreeError(errors.APPLE_PAY_NOT_ENABLED));\n    }\n\n    analytics.sendEvent(options.client, 'applepay.initialized');\n\n    return new ApplePay(options);\n  });\n}\n\nmodule.exports = {\n  create: wrapPromise(create),\n  /**\n   * @description The current version of the SDK, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"../lib/analytics\":67,\"../lib/basic-component-verification\":70,\"../lib/braintree-error\":72,\"../lib/create-assets-url\":79,\"../lib/create-deferred-client\":81,\"../lib/promise\":95,\"./apple-pay\":27,\"./errors\":28,\"@braintree/wrap-promise\":26}],30:[function(require,module,exports){\n'use strict';\n\nvar isIe = require('@braintree/browser-detection/is-ie');\nvar isIe9 = require('@braintree/browser-detection/is-ie9');\n\nmodule.exports = {\n  isIe: isIe,\n  isIe9: isIe9\n};\n\n},{\"@braintree/browser-detection/is-ie\":8,\"@braintree/browser-detection/is-ie9\":11}],31:[function(require,module,exports){\n'use strict';\n\nvar BRAINTREE_VERSION = require('./constants').BRAINTREE_VERSION;\n\nvar GraphQL = require('./request/graphql');\nvar request = require('./request');\nvar isVerifiedDomain = require('../lib/is-verified-domain');\nvar BraintreeError = require('../lib/braintree-error');\nvar convertToBraintreeError = require('../lib/convert-to-braintree-error');\nvar createAuthorizationData = require('../lib/create-authorization-data');\nvar getGatewayConfiguration = require('./get-configuration').getConfiguration;\nvar addMetadata = require('../lib/add-metadata');\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar once = require('../lib/once');\nvar deferred = require('../lib/deferred');\nvar assign = require('../lib/assign').assign;\nvar analytics = require('../lib/analytics');\nvar constants = require('./constants');\nvar errors = require('./errors');\nvar sharedErrors = require('../lib/errors');\nvar VERSION = require('../lib/constants').VERSION;\nvar GRAPHQL_URLS = require('../lib/constants').GRAPHQL_URLS;\nvar methods = require('../lib/methods');\nvar convertMethodsToError = require('../lib/convert-methods-to-error');\nvar assets = require('../lib/assets');\nvar FRAUDNET_FNCLS = require('../lib/constants').FRAUDNET_FNCLS;\nvar FRAUDNET_SOURCE = require('../lib/constants').FRAUDNET_SOURCE;\nvar FRAUDNET_URL = require('../lib/constants').FRAUDNET_URL;\n\nvar cachedClients = {};\n\n/**\n * This object is returned by {@link Client#getConfiguration|getConfiguration}. This information is used extensively by other Braintree modules to properly configure themselves.\n * @typedef {object} Client~configuration\n * @property {object} client The braintree-web/client parameters.\n * @property {string} client.authorization A tokenizationKey or clientToken.\n * @property {object} gatewayConfiguration Gateway-supplied configuration.\n * @property {object} analyticsMetadata Analytics-specific data.\n * @property {string} analyticsMetadata.sessionId Uniquely identifies a browsing session.\n * @property {string} analyticsMetadata.sdkVersion The braintree.js version.\n * @property {string} analyticsMetadata.merchantAppId Identifies the merchant's web app.\n */\n\n/**\n * @class\n * @param {Client~configuration} configuration Options\n * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/client.create|braintree.client.create} instead.</strong>\n * @classdesc This class is required by many other Braintree components. It serves as the base API layer that communicates with our servers. It is also capable of being used to formulate direct calls to our servers, such as direct credit card tokenization. See {@link Client#request}.\n */\nfunction Client(configuration) {\n  var configurationJSON, gatewayConfiguration, braintreeApiConfiguration;\n\n  configuration = configuration || {};\n\n  configurationJSON = JSON.stringify(configuration);\n  gatewayConfiguration = configuration.gatewayConfiguration;\n\n  if (!gatewayConfiguration) {\n    throw new BraintreeError(errors.CLIENT_MISSING_GATEWAY_CONFIGURATION);\n  }\n\n  [\n    'assetsUrl',\n    'clientApiUrl',\n    'configUrl'\n  ].forEach(function (property) {\n    if (property in gatewayConfiguration && !isVerifiedDomain(gatewayConfiguration[property])) {\n      throw new BraintreeError({\n        type: errors.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.type,\n        code: errors.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.code,\n        message: property + ' property is on an invalid domain.'\n      });\n    }\n  });\n\n  /**\n   * Returns a copy of the configuration values.\n   * @public\n   * @returns {Client~configuration} configuration\n   */\n  this.getConfiguration = function () {\n    return JSON.parse(configurationJSON);\n  };\n\n  this._request = request;\n  this._configuration = this.getConfiguration();\n\n  this._clientApiBaseUrl = gatewayConfiguration.clientApiUrl + '/v1/';\n\n  braintreeApiConfiguration = gatewayConfiguration.braintreeApi;\n  if (braintreeApiConfiguration) {\n    this._braintreeApi = {\n      baseUrl: braintreeApiConfiguration.url + '/',\n      accessToken: braintreeApiConfiguration.accessToken\n    };\n\n    if (!isVerifiedDomain(this._braintreeApi.baseUrl)) {\n      throw new BraintreeError({\n        type: errors.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.type,\n        code: errors.CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN.code,\n        message: 'braintreeApi URL is on an invalid domain.'\n      });\n    }\n  }\n\n  if (gatewayConfiguration.graphQL) {\n    this._graphQL = new GraphQL({\n      graphQL: gatewayConfiguration.graphQL\n    });\n  }\n}\n\nClient.initialize = function (options) {\n  var clientInstance;\n  var promise = cachedClients[options.authorization];\n\n  if (promise) {\n    analytics.sendEvent(promise, 'custom.client.load.cached');\n\n    return promise;\n  }\n\n  promise = getGatewayConfiguration(options).then(function (configuration) {\n    if (options.debug) {\n      configuration.isDebug = true;\n    }\n\n    clientInstance = new Client(configuration);\n\n    return clientInstance;\n  });\n\n  cachedClients[options.authorization] = promise;\n\n  analytics.sendEvent(promise, 'custom.client.load.initialized');\n\n  return promise.then(function (client) {\n    analytics.sendEvent(clientInstance, 'custom.client.load.succeeded');\n\n    return client;\n  }).catch(function (err) {\n    delete cachedClients[options.authorization];\n\n    return Promise.reject(err);\n  });\n};\n\n// Primarily used for testing the client initalization call\nClient.clearCache = function () {\n  cachedClients = {};\n};\n\nClient.prototype._findOrCreateFraudnetJSON = function (clientMetadataId) {\n  var el = document.querySelector('script[fncls=\"' + FRAUDNET_FNCLS + '\"]');\n  var config, additionalData, authorizationFingerprint, parameters;\n\n  if (!el) {\n    el = document.body.appendChild(document.createElement('script'));\n    el.type = 'application/json';\n    el.setAttribute('fncls', FRAUDNET_FNCLS);\n  }\n\n  config = this.getConfiguration();\n  additionalData = {\n    rda_tenant: 'bt_card', // eslint-disable-line camelcase\n    mid: config.gatewayConfiguration.merchantId\n  };\n  authorizationFingerprint = createAuthorizationData(config.authorization).attrs.authorizationFingerprint;\n\n  if (authorizationFingerprint) {\n    authorizationFingerprint.split('&').forEach(function (pieces) {\n      var component = pieces.split('=');\n\n      if (component[0] === 'customer_id' && component.length > 1) {\n        additionalData.cid = component[1];\n      }\n    });\n  }\n\n  parameters = {\n    f: clientMetadataId.substr(0, 32),\n    fp: additionalData,\n    bu: false,\n    s: FRAUDNET_SOURCE\n  };\n  el.text = JSON.stringify(parameters);\n};\n\n/**\n * Used by other modules to formulate all network requests to the Braintree gateway. It is also capable of being used directly from your own form to tokenize credit card information. However, be sure to satisfy PCI compliance if you use direct card tokenization.\n * @public\n * @param {object} options Request options:\n * @param {string} options.method HTTP method, e.g. \"get\" or \"post\".\n * @param {string} options.endpoint Endpoint path, e.g. \"payment_methods\".\n * @param {object} options.data Data to send with the request.\n * @param {number} [options.timeout=60000] Set a timeout (in milliseconds) for the request.\n * @param {callback} [callback] The second argument, <code>data</code>, is the returned server data.\n * @example\n * <caption>Direct Credit Card Tokenization</caption>\n * var createClient = require('braintree-web/client').create;\n *\n * createClient({\n *   authorization: CLIENT_AUTHORIZATION\n * }, function (createErr, clientInstance) {\n *   var form = document.getElementById('my-form-id');\n *   var data = {\n *     creditCard: {\n *       number: form['cc-number'].value,\n *       cvv: form['cc-cvv'].value,\n *       expirationDate: form['cc-expiration-date'].value,\n *       billingAddress: {\n *         postalCode: form['cc-postal-code'].value\n *       },\n *       options: {\n *         validate: false\n *       }\n *     }\n *   };\n *\n *   // Warning: For a merchant to be eligible for the easiest level of PCI compliance (SAQ A),\n *   // payment fields cannot be hosted on your checkout page.\n *   // For an alternative to the following, use Hosted Fields.\n *   clientInstance.request({\n *     endpoint: 'payment_methods/credit_cards',\n *     method: 'post',\n *     data: data\n *   }, function (requestErr, response) {\n *     // More detailed example of handling API errors: https://codepen.io/braintree/pen/MbwjdM\n *     if (requestErr) { throw new Error(requestErr); }\n *\n *     console.log('Got nonce:', response.creditCards[0].nonce);\n *   });\n * });\n * @example\n * <caption>Tokenizing Fields for AVS Checks</caption>\n * var createClient = require('braintree-web/client').create;\n *\n * createClient({\n *   authorization: CLIENT_AUTHORIZATION\n * }, function (createErr, clientInstance) {\n *   var form = document.getElementById('my-form-id');\n *   var data = {\n *     creditCard: {\n *       number: form['cc-number'].value,\n *       cvv: form['cc-cvv'].value,\n *       expirationDate: form['cc-date'].value,\n *       // The billing address can be checked with AVS rules.\n *       // See: https://articles.braintreepayments.com/support/guides/fraud-tools/basic/avs-cvv-rules\n *       billingAddress: {\n *         postalCode: form['cc-postal-code'].value,\n *         streetAddress: form['cc-street-address'].value,\n *         countryName: form['cc-country-name'].value,\n *         countryCodeAlpha2: form['cc-country-alpha2'].value,\n *         countryCodeAlpha3: form['cc-country-alpha3'].value,\n *         countryCodeNumeric: form['cc-country-numeric'].value\n *       },\n *       options: {\n *         validate: false\n *       }\n *     }\n *   };\n *\n *   // Warning: For a merchant to be eligible for the easiest level of PCI compliance (SAQ A),\n *   // payment fields cannot be hosted on your checkout page.\n *   // For an alternative to the following, use Hosted Fields.\n *   clientInstance.request({\n *     endpoint: 'payment_methods/credit_cards',\n *     method: 'post',\n *     data: data\n *   }, function (requestErr, response) {\n *     // More detailed example of handling API errors: https://codepen.io/braintree/pen/MbwjdM\n *     if (requestErr) { throw new Error(requestErr); }\n *\n *     console.log('Got nonce:', response.creditCards[0].nonce);\n *   });\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nClient.prototype.request = function (options, callback) {\n  var self = this; // eslint-disable-line no-invalid-this\n  var requestPromise = new Promise(function (resolve, reject) {\n    var optionName, api, baseUrl, requestOptions;\n    var shouldCollectData = Boolean(options.endpoint === 'payment_methods/credit_cards' && self.getConfiguration().gatewayConfiguration.creditCards.collectDeviceData);\n\n    if (options.api !== 'graphQLApi') {\n      if (!options.method) {\n        optionName = 'options.method';\n      } else if (!options.endpoint) {\n        optionName = 'options.endpoint';\n      }\n    }\n\n    if (optionName) {\n      throw new BraintreeError({\n        type: errors.CLIENT_OPTION_REQUIRED.type,\n        code: errors.CLIENT_OPTION_REQUIRED.code,\n        message: optionName + ' is required when making a request.'\n      });\n    }\n\n    if ('api' in options) {\n      api = options.api;\n    } else {\n      api = 'clientApi';\n    }\n\n    requestOptions = {\n      method: options.method,\n      graphQL: self._graphQL,\n      timeout: options.timeout,\n      metadata: self._configuration.analyticsMetadata\n    };\n\n    if (api === 'clientApi') {\n      baseUrl = self._clientApiBaseUrl;\n\n      requestOptions.data = addMetadata(self._configuration, options.data);\n    } else if (api === 'braintreeApi') {\n      if (!self._braintreeApi) {\n        throw new BraintreeError(sharedErrors.BRAINTREE_API_ACCESS_RESTRICTED);\n      }\n\n      baseUrl = self._braintreeApi.baseUrl;\n\n      requestOptions.data = options.data;\n\n      requestOptions.headers = {\n        'Braintree-Version': constants.BRAINTREE_API_VERSION_HEADER,\n        Authorization: 'Bearer ' + self._braintreeApi.accessToken\n      };\n    } else if (api === 'graphQLApi') {\n      baseUrl = GRAPHQL_URLS[self._configuration.gatewayConfiguration.environment];\n      options.endpoint = '';\n      requestOptions.method = 'post';\n      requestOptions.data = assign({\n        clientSdkMetadata: {\n          source: self._configuration.analyticsMetadata.source,\n          integration: self._configuration.analyticsMetadata.integration,\n          sessionId: self._configuration.analyticsMetadata.sessionId\n        }\n      }, options.data);\n\n      requestOptions.headers = getAuthorizationHeadersForGraphQL(self._configuration.authorization);\n    } else {\n      throw new BraintreeError({\n        type: errors.CLIENT_OPTION_INVALID.type,\n        code: errors.CLIENT_OPTION_INVALID.code,\n        message: 'options.api is invalid.'\n      });\n    }\n\n    requestOptions.url = baseUrl + options.endpoint;\n    requestOptions.sendAnalyticsEvent = function (kind) {\n      analytics.sendEvent(self, kind);\n    };\n\n    self._request(requestOptions, function (err, data, status) {\n      var resolvedData, requestError;\n\n      requestError = formatRequestError(status, err);\n\n      if (requestError) {\n        reject(requestError);\n\n        return;\n      }\n\n      if (api === 'graphQLApi' && data.errors) {\n        reject(convertToBraintreeError(data.errors, {\n          type: errors.CLIENT_GRAPHQL_REQUEST_ERROR.type,\n          code: errors.CLIENT_GRAPHQL_REQUEST_ERROR.code,\n          message: errors.CLIENT_GRAPHQL_REQUEST_ERROR.message\n        }));\n\n        return;\n      }\n\n      resolvedData = assign({_httpStatus: status}, data);\n\n      if (shouldCollectData && resolvedData.creditCards && resolvedData.creditCards.length > 0) {\n        self._findOrCreateFraudnetJSON(resolvedData.creditCards[0].nonce);\n\n        assets.loadScript({\n          src: FRAUDNET_URL,\n          forceScriptReload: true\n        });\n      }\n      resolve(resolvedData);\n    });\n  });\n\n  if (typeof callback === 'function') {\n    callback = once(deferred(callback));\n\n    requestPromise.then(function (response) {\n      callback(null, response, response._httpStatus);\n    }).catch(function (err) {\n      var status = err && err.details && err.details.httpStatus;\n\n      callback(err, null, status);\n    });\n\n    return;\n  }\n\n  return requestPromise; // eslint-disable-line consistent-return\n};\n\nfunction formatRequestError(status, err) { // eslint-disable-line consistent-return\n  var requestError;\n\n  if (status === -1) {\n    requestError = new BraintreeError(errors.CLIENT_REQUEST_TIMEOUT);\n  } else if (status === 403) {\n    requestError = new BraintreeError(errors.CLIENT_AUTHORIZATION_INSUFFICIENT);\n  } else if (status === 429) {\n    requestError = new BraintreeError(errors.CLIENT_RATE_LIMITED);\n  } else if (status >= 500) {\n    requestError = new BraintreeError(errors.CLIENT_GATEWAY_NETWORK);\n  } else if (status < 200 || status >= 400) {\n    requestError = convertToBraintreeError(err, {\n      type: errors.CLIENT_REQUEST_ERROR.type,\n      code: errors.CLIENT_REQUEST_ERROR.code,\n      message: errors.CLIENT_REQUEST_ERROR.message\n    });\n  }\n\n  if (requestError) {\n    requestError.details = requestError.details || {};\n    requestError.details.httpStatus = status;\n\n    return requestError;\n  }\n}\n\nClient.prototype.toJSON = function () {\n  return this.getConfiguration();\n};\n\n/**\n * Returns the Client version.\n * @public\n * @returns {String} The created client's version.\n * @example\n * var createClient = require('braintree-web/client').create;\n *\n * createClient({\n *   authorization: CLIENT_AUTHORIZATION\n * }, function (createErr, clientInstance) {\n *   console.log(clientInstance.getVersion()); // Ex: 1.0.0\n * });\n * @returns {void}\n */\nClient.prototype.getVersion = function () {\n  return VERSION;\n};\n\n/**\n * Cleanly tear down anything set up by {@link module:braintree-web/client.create|create}.\n * @public\n * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.\n * @example\n * clientInstance.teardown();\n * @example <caption>With callback</caption>\n * clientInstance.teardown(function () {\n *   // teardown is complete\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nClient.prototype.teardown = wrapPromise(function () {\n  var self = this; // eslint-disable-line no-invalid-this\n\n  delete cachedClients[self.getConfiguration().authorization];\n  convertMethodsToError(self, methods(Client.prototype));\n\n  return Promise.resolve();\n});\n\nfunction getAuthorizationHeadersForGraphQL(authorization) {\n  var authAttrs = createAuthorizationData(authorization).attrs;\n  var token = authAttrs.authorizationFingerprint || authAttrs.tokenizationKey;\n\n  return {\n    Authorization: 'Bearer ' + token,\n    'Braintree-Version': BRAINTREE_VERSION\n  };\n}\n\nmodule.exports = Client;\n\n},{\"../lib/add-metadata\":66,\"../lib/analytics\":67,\"../lib/assets\":68,\"../lib/assign\":69,\"../lib/braintree-error\":72,\"../lib/constants\":76,\"../lib/convert-methods-to-error\":77,\"../lib/convert-to-braintree-error\":78,\"../lib/create-authorization-data\":80,\"../lib/deferred\":82,\"../lib/errors\":85,\"../lib/is-verified-domain\":91,\"../lib/methods\":93,\"../lib/once\":94,\"../lib/promise\":95,\"./constants\":32,\"./errors\":33,\"./get-configuration\":34,\"./request\":46,\"./request/graphql\":44,\"@braintree/wrap-promise\":26}],32:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  BRAINTREE_API_VERSION_HEADER: '2017-04-03',\n  BRAINTREE_VERSION: '2018-05-10'\n};\n\n},{}],33:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.Client - Interal Error Codes\n * @ignore\n * @description These codes should never be experienced by the mechant directly.\n * @property {MERCHANT} CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN An error to prevent client creation for domains that are not allowed in the JS.\n * @property {INTERNAL} CLIENT_MISSING_GATEWAY_CONFIGURATION Occurs when the client is created without a gateway configuration. Should never happen.\n */\n\n/**\n * @name BraintreeError.Client - Create Error Codes\n * @description Errors that may occur when [creating the client](/current/module-braintree-web_client.html#.create)\n * @property {MERCHANT} CLIENT_INVALID_AUTHORIZATION Occurs when client token cannot be parsed.\n */\n\n/**\n * @name BraintreeError.Client - Request Error Codes\n * @description Errors that may occur when [using the request method](/current/Client.html#request)\n * @property {MERCHANT} CLIENT_OPTION_REQUIRED An option required in the request method was not provided. Usually `options.method` or `options.endpoint`\n * @property {MERCHANT} CLIENT_OPTION_INVALID The request option provided is invalid.\n * @property {MERCHANT} CLIENT_GATEWAY_NETWORK The Braintree gateway could not be contacted.\n * @property {NETWORK} CLIENT_REQUEST_TIMEOUT The request took too long to complete and timed out.\n * @property {NETWORK} CLIENT_REQUEST_ERROR The response from a request had status 400 or greater.\n * @property {NETWORK} CLIENT_GRAPHQL_REQUEST_ERROR The response from a request to GraphQL contained an error.\n * @property {MERCHANT} CLIENT_RATE_LIMITED The response from a request had a status of 429, indicating rate limiting.\n * @property {MERCHANT} CLIENT_AUTHORIZATION_INSUFFICIENT The user assocaited with the client token or tokenization key does not have permissions to make the request.\n */\n\nvar BraintreeError = require('../lib/braintree-error');\n\nmodule.exports = {\n  CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'CLIENT_GATEWAY_CONFIGURATION_INVALID_DOMAIN'\n  },\n  CLIENT_OPTION_REQUIRED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'CLIENT_OPTION_REQUIRED'\n  },\n  CLIENT_OPTION_INVALID: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'CLIENT_OPTION_INVALID'\n  },\n  CLIENT_MISSING_GATEWAY_CONFIGURATION: {\n    type: BraintreeError.types.INTERNAL,\n    code: 'CLIENT_MISSING_GATEWAY_CONFIGURATION',\n    message: 'Missing gatewayConfiguration.'\n  },\n  CLIENT_INVALID_AUTHORIZATION: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'CLIENT_INVALID_AUTHORIZATION',\n    message: 'Authorization is invalid. Make sure your client token or tokenization key is valid.'\n  },\n  CLIENT_GATEWAY_NETWORK: {\n    type: BraintreeError.types.NETWORK,\n    code: 'CLIENT_GATEWAY_NETWORK',\n    message: 'Cannot contact the gateway at this time.'\n  },\n  CLIENT_REQUEST_TIMEOUT: {\n    type: BraintreeError.types.NETWORK,\n    code: 'CLIENT_REQUEST_TIMEOUT',\n    message: 'Request timed out waiting for a reply.'\n  },\n  CLIENT_REQUEST_ERROR: {\n    type: BraintreeError.types.NETWORK,\n    code: 'CLIENT_REQUEST_ERROR',\n    message: 'There was a problem with your request.'\n  },\n  CLIENT_GRAPHQL_REQUEST_ERROR: {\n    type: BraintreeError.types.NETWORK,\n    code: 'CLIENT_GRAPHQL_REQUEST_ERROR',\n    message: 'There was a problem with your request.'\n  },\n  CLIENT_RATE_LIMITED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'CLIENT_RATE_LIMITED',\n    message: 'You are being rate-limited; please try again in a few minutes.'\n  },\n  CLIENT_AUTHORIZATION_INSUFFICIENT: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'CLIENT_AUTHORIZATION_INSUFFICIENT',\n    message: 'The authorization used has insufficient privileges.'\n  }\n};\n\n},{\"../lib/braintree-error\":72}],34:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar BraintreeError = require('../lib/braintree-error');\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar request = require('./request');\nvar uuid = require('../lib/vendor/uuid');\nvar constants = require('../lib/constants');\nvar createAuthorizationData = require('../lib/create-authorization-data');\nvar errors = require('./errors');\nvar GraphQL = require('./request/graphql');\nvar isDateStringBeforeOrOn = require('../lib/is-date-string-before-or-on');\n\nvar BRAINTREE_VERSION = require('./constants').BRAINTREE_VERSION;\n\nfunction getConfiguration(options) {\n  return new Promise(function (resolve, reject) {\n    var configuration, authData, attrs, configUrl, reqOptions;\n    var sessionId = uuid();\n    var analyticsMetadata = {\n      merchantAppId: global.location.host,\n      platform: constants.PLATFORM,\n      sdkVersion: constants.VERSION,\n      source: constants.SOURCE,\n      integration: constants.INTEGRATION,\n      integrationType: constants.INTEGRATION,\n      sessionId: sessionId\n    };\n\n    try {\n      authData = createAuthorizationData(options.authorization);\n    } catch (err) {\n      reject(new BraintreeError(errors.CLIENT_INVALID_AUTHORIZATION));\n\n      return;\n    }\n    attrs = authData.attrs;\n    configUrl = authData.configUrl;\n\n    attrs._meta = analyticsMetadata;\n    attrs.braintreeLibraryVersion = constants.BRAINTREE_LIBRARY_VERSION;\n    attrs.configVersion = '3';\n\n    reqOptions = {\n      url: configUrl,\n      method: 'GET',\n      data: attrs\n    };\n\n    if (attrs.authorizationFingerprint && authData.graphQL) {\n      if (isDateStringBeforeOrOn(authData.graphQL.date, BRAINTREE_VERSION)) {\n        reqOptions.graphQL = new GraphQL({\n          graphQL: {\n            url: authData.graphQL.url,\n            features: ['configuration']\n          }\n        });\n      }\n\n      reqOptions.metadata = analyticsMetadata;\n    }\n\n    request(reqOptions, function (err, response, status) {\n      var errorTemplate;\n\n      if (err) {\n        if (status === 403) {\n          errorTemplate = errors.CLIENT_AUTHORIZATION_INSUFFICIENT;\n        } else {\n          errorTemplate = errors.CLIENT_GATEWAY_NETWORK;\n        }\n\n        reject(new BraintreeError({\n          type: errorTemplate.type,\n          code: errorTemplate.code,\n          message: errorTemplate.message,\n          details: {\n            originalError: err\n          }\n        }));\n\n        return;\n      }\n\n      configuration = {\n        authorization: options.authorization,\n        authorizationType: attrs.tokenizationKey ? 'TOKENIZATION_KEY' : 'CLIENT_TOKEN',\n        analyticsMetadata: analyticsMetadata,\n        gatewayConfiguration: response\n      };\n\n      resolve(configuration);\n    });\n  });\n}\n\nmodule.exports = {\n  getConfiguration: wrapPromise(getConfiguration)\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../lib/braintree-error\":72,\"../lib/constants\":76,\"../lib/create-authorization-data\":80,\"../lib/is-date-string-before-or-on\":89,\"../lib/promise\":95,\"../lib/vendor/uuid\":99,\"./constants\":32,\"./errors\":33,\"./request\":46,\"./request/graphql\":44,\"@braintree/wrap-promise\":26}],35:[function(require,module,exports){\n'use strict';\n\nvar BraintreeError = require('../lib/braintree-error');\nvar Client = require('./client');\nvar VERSION = \"3.42.0\";\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar sharedErrors = require('../lib/errors');\n\n/** @module braintree-web/client */\n\n/**\n * @function create\n * @description This function is the entry point for the <code>braintree.client</code> module. It is used for creating {@link Client} instances that service communication to Braintree servers.\n * @param {object} options Object containing all {@link Client} options:\n * @param {string} options.authorization A tokenizationKey or clientToken.\n * @param {callback} [callback] The second argument, <code>data</code>, is the {@link Client} instance.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * var createClient = require('braintree-web/client').create;\n *\n * createClient({\n *   authorization: CLIENT_AUTHORIZATION\n * }, function (createErr, clientInstance) {\n *   // ...\n * });\n * @static\n */\nfunction create(options) {\n  if (!options.authorization) {\n    return Promise.reject(new BraintreeError({\n      type: sharedErrors.INSTANTIATION_OPTION_REQUIRED.type,\n      code: sharedErrors.INSTANTIATION_OPTION_REQUIRED.code,\n      message: 'options.authorization is required when instantiating a client.'\n    }));\n  }\n\n  return Client.initialize(options);\n}\n\nmodule.exports = {\n  create: wrapPromise(create),\n  /**\n   * @description The current version of the SDK, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"../lib/braintree-error\":72,\"../lib/errors\":85,\"../lib/promise\":95,\"./client\":31,\"@braintree/wrap-promise\":26}],36:[function(require,module,exports){\n'use strict';\n\nvar querystring = require('../../lib/querystring');\nvar browserDetection = require('../browser-detection');\nvar assign = require('../../lib/assign').assign;\nvar prepBody = require('./prep-body');\nvar parseBody = require('./parse-body');\nvar xhr = require('./xhr');\nvar isXHRAvailable = xhr.isAvailable;\nvar GraphQLRequest = require('./graphql/request');\nvar DefaultRequest = require('./default-request');\n\nvar MAX_TCP_RETRYCOUNT = 1;\nvar TCP_PRECONNECT_BUG_STATUS_CODE = 408;\n\nfunction requestShouldRetry(status) {\n  return (!status || status === TCP_PRECONNECT_BUG_STATUS_CODE) && browserDetection.isIe();\n}\n\nfunction graphQLRequestShouldRetryWithClientApi(body) {\n  var errorClass = !body.data && body.errors &&\n      body.errors[0] &&\n      body.errors[0].extensions &&\n      body.errors[0].extensions.errorClass;\n\n  return errorClass === 'UNKNOWN' || errorClass === 'INTERNAL';\n}\n\nfunction _requestWithRetry(options, tcpRetryCount, cb) {\n  var status, resBody, ajaxRequest, body, method, headers, parsedBody;\n  var url = options.url;\n  var graphQL = options.graphQL;\n  var timeout = options.timeout;\n  var req = xhr.getRequestObject();\n  var callback = cb;\n  var isGraphQLRequest = Boolean(graphQL && graphQL.isGraphQLRequest(url, options.data));\n\n  options.headers = assign({'Content-Type': 'application/json'}, options.headers);\n\n  if (isGraphQLRequest) {\n    ajaxRequest = new GraphQLRequest(options);\n  } else {\n    ajaxRequest = new DefaultRequest(options);\n  }\n\n  url = ajaxRequest.getUrl();\n  body = ajaxRequest.getBody();\n  method = ajaxRequest.getMethod();\n  headers = ajaxRequest.getHeaders();\n\n  if (method === 'GET') {\n    url = querystring.queryify(url, body);\n    body = null;\n  }\n\n  if (isXHRAvailable) {\n    req.onreadystatechange = function () {\n      if (req.readyState !== 4) { return; }\n\n      if (req.status === 0 && isGraphQLRequest) {\n        // If a merchant experiences a connection\n        // issue to the GraphQL endpoint (possibly\n        // due to a Content Security Policy), retry\n        // the request against the old client API.\n        delete options.graphQL;\n        _requestWithRetry(options, tcpRetryCount, cb);\n\n        return;\n      }\n\n      parsedBody = parseBody(req.responseText);\n      resBody = ajaxRequest.adaptResponseBody(parsedBody);\n      status = ajaxRequest.determineStatus(req.status, parsedBody);\n\n      if (status >= 400 || status < 200) {\n        if (isGraphQLRequest && graphQLRequestShouldRetryWithClientApi(parsedBody)) {\n          delete options.graphQL;\n          _requestWithRetry(options, tcpRetryCount, cb);\n\n          return;\n        }\n\n        if (tcpRetryCount < MAX_TCP_RETRYCOUNT && requestShouldRetry(status)) {\n          tcpRetryCount++;\n          _requestWithRetry(options, tcpRetryCount, cb);\n\n          return;\n        }\n        callback(resBody || 'error', null, status || 500);\n      } else {\n        callback(null, resBody, status);\n      }\n    };\n  } else {\n    if (options.headers) {\n      url = querystring.queryify(url, headers);\n    }\n\n    req.onload = function () {\n      callback(null, parseBody(req.responseText), req.status);\n    };\n\n    req.onerror = function () {\n      // XDomainRequest does not report a body or status for errors, so\n      // hardcode to 'error' and 500, respectively\n      callback('error', null, 500);\n    };\n\n    // This must remain for IE9 to work\n    req.onprogress = function () {};\n\n    req.ontimeout = function () {\n      callback('timeout', null, -1);\n    };\n  }\n\n  try {\n    req.open(method, url, true);\n  } catch (requestOpenError) {\n    // If a merchant has a Content Security Policy and they have\n    // not allowed our endpoints, some browsers may\n    // synchronously throw an error. If it is not a GraphQL\n    // request, we throw the error. If it is a GraphQL request\n    // we remove the GraphQL option and try the request against\n    // the old client API.\n    if (!isGraphQLRequest) {\n      throw requestOpenError;\n    }\n\n    delete options.graphQL;\n\n    _requestWithRetry(options, tcpRetryCount, cb);\n\n    return;\n  }\n\n  req.timeout = timeout;\n\n  if (isXHRAvailable) {\n    Object.keys(headers).forEach(function (headerKey) {\n      req.setRequestHeader(headerKey, headers[headerKey]);\n    });\n  }\n\n  try {\n    req.send(prepBody(method, body));\n  } catch (e) { /* ignored */ }\n}\n\nfunction request(options, cb) {\n  _requestWithRetry(options, 0, cb);\n}\n\nmodule.exports = {\n  request: request\n};\n\n},{\"../../lib/assign\":69,\"../../lib/querystring\":96,\"../browser-detection\":30,\"./default-request\":37,\"./graphql/request\":45,\"./parse-body\":49,\"./prep-body\":50,\"./xhr\":51}],37:[function(require,module,exports){\n'use strict';\n\nfunction DefaultRequest(options) {\n  this._url = options.url;\n  this._data = options.data;\n  this._method = options.method;\n  this._headers = options.headers;\n}\n\nDefaultRequest.prototype.getUrl = function () {\n  return this._url;\n};\n\nDefaultRequest.prototype.getBody = function () {\n  return this._data;\n};\n\nDefaultRequest.prototype.getMethod = function () {\n  return this._method;\n};\n\nDefaultRequest.prototype.getHeaders = function () {\n  return this._headers;\n};\n\nDefaultRequest.prototype.adaptResponseBody = function (parsedBody) {\n  return parsedBody;\n};\n\nDefaultRequest.prototype.determineStatus = function (status) {\n  return status;\n};\n\nmodule.exports = DefaultRequest;\n\n},{}],38:[function(require,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = function getUserAgent() {\n  return global.navigator.userAgent;\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],39:[function(require,module,exports){\n'use strict';\n\nvar errorResponseAdapter = require('./error');\nvar assign = require('../../../../lib/assign').assign;\n\n/* eslint-disable camelcase */\nvar cardTypeTransforms = {\n  creditCard: {\n    AMERICAN_EXPRESS: 'American Express',\n    DISCOVER: 'Discover',\n    INTERNATIONAL_MAESTRO: 'Maestro',\n    JCB: 'JCB',\n    MASTERCARD: 'MasterCard',\n    SOLO: 'Solo',\n    UK_MAESTRO: 'UK Maestro',\n    UNION_PAY: 'UnionPay',\n    VISA: 'Visa'\n  },\n  applePayWeb: {\n    VISA: 'visa',\n    MASTERCARD: 'mastercard',\n    DISCOVER: 'discover',\n    AMERICAN_EXPRESS: 'amex'\n  },\n  visaCheckout: {\n    VISA: 'Visa',\n    MASTERCARD: 'MasterCard',\n    DISCOVER: 'Discover',\n    AMERICAN_EXPRESS: 'American Express'\n  },\n  googlePay: {\n    VISA: 'visa',\n    MASTERCARD: 'mastercard',\n    DISCOVER: 'discover',\n    AMERICAN_EXPRESS: 'amex'\n  },\n  masterpass: {\n    VISA: 'visa',\n    MASTERCARD: 'master',\n    DISCOVER: 'discover',\n    AMERICAN_EXPRESS: 'amex',\n    DINERS: 'diners',\n    INTERNATIONAL_MAESTRO: 'maestro',\n    JCB: 'jcb'\n  }\n};\n/* eslint-enable camelcase */\n\nfunction configurationResponseAdapter(responseBody, ctx) {\n  var adaptedResponse;\n\n  if (responseBody.data && !responseBody.errors) {\n    adaptedResponse = adaptConfigurationResponseBody(responseBody, ctx);\n  } else {\n    adaptedResponse = errorResponseAdapter(responseBody);\n  }\n\n  return adaptedResponse;\n}\n\nfunction adaptConfigurationResponseBody(body, ctx) {\n  var configuration = body.data.clientConfiguration;\n  var response;\n\n  response = {\n    environment: configuration.environment.toLowerCase(),\n    clientApiUrl: configuration.clientApiUrl,\n    assetsUrl: configuration.assetsUrl,\n    analytics: {\n      url: configuration.analyticsUrl\n    },\n    merchantId: configuration.merchantId,\n    venmo: 'off'\n  };\n\n  if (configuration.supportedFeatures) {\n    response.graphQL = {\n      url: ctx._graphQL._config.url,\n      features: configuration.supportedFeatures.map(function (feature) {\n        return feature.toLowerCase();\n      })\n    };\n  }\n\n  if (configuration.braintreeApi) {\n    response.braintreeApi = configuration.braintreeApi;\n  }\n\n  if (configuration.applePayWeb) {\n    response.applePayWeb = configuration.applePayWeb;\n    response.applePayWeb.supportedNetworks = mapCardTypes(configuration.applePayWeb.supportedCardBrands, cardTypeTransforms.applePayWeb);\n\n    delete response.applePayWeb.supportedCardBrands;\n  }\n\n  if (configuration.ideal) {\n    response.ideal = configuration.ideal;\n  }\n\n  if (configuration.kount) {\n    response.kount = {\n      kountMerchantId: configuration.kount.merchantId\n    };\n  }\n\n  if (configuration.creditCard) {\n    response.challenges = configuration.creditCard.challenges.map(function (challenge) {\n      return challenge.toLowerCase();\n    });\n\n    response.creditCards = {\n      supportedCardTypes: mapCardTypes(configuration.creditCard.supportedCardBrands, cardTypeTransforms.creditCard)\n    };\n    response.threeDSecureEnabled = configuration.creditCard.threeDSecureEnabled;\n  } else {\n    response.challenges = [];\n    response.creditCards = {\n      supportedCardTypes: []\n    };\n    response.threeDSecureEnabled = false;\n  }\n\n  if (configuration.googlePay) {\n    response.androidPay = {\n      displayName: configuration.googlePay.displayName,\n      enabled: true,\n      environment: configuration.googlePay.environment.toLowerCase(),\n      googleAuthorizationFingerprint: configuration.googlePay.googleAuthorization,\n      supportedNetworks: mapCardTypes(configuration.googlePay.supportedCardBrands, cardTypeTransforms.googlePay)\n    };\n  }\n\n  if (configuration.venmo) {\n    response.payWithVenmo = {\n      merchantId: configuration.venmo.merchantId,\n      accessToken: configuration.venmo.accessToken,\n      environment: configuration.venmo.environment.toLowerCase()\n    };\n  }\n\n  if (configuration.paypal) {\n    response.paypalEnabled = true;\n    response.paypal = assign({}, configuration.paypal);\n    response.paypal.currencyIsoCode = response.paypal.currencyCode;\n    response.paypal.environment = response.paypal.environment.toLowerCase();\n\n    delete response.paypal.currencyCode;\n  } else {\n    response.paypalEnabled = false;\n  }\n\n  if (configuration.unionPay) {\n    response.unionPay = {\n      enabled: true,\n      merchantAccountId: configuration.unionPay.merchantAccountId\n    };\n  }\n\n  if (configuration.visaCheckout) {\n    response.visaCheckout = {\n      apikey: configuration.visaCheckout.apiKey,\n      externalClientId: configuration.visaCheckout.externalClientId,\n      supportedCardTypes: mapCardTypes(configuration.visaCheckout.supportedCardBrands, cardTypeTransforms.visaCheckout)\n    };\n  }\n\n  if (configuration.masterpass) {\n    response.masterpass = {\n      merchantCheckoutId: configuration.masterpass.merchantCheckoutId,\n      supportedNetworks: mapCardTypes(configuration.masterpass.supportedCardBrands, cardTypeTransforms.masterpass)\n    };\n  }\n\n  if (configuration.usBankAccount) {\n    response.usBankAccount = {\n      routeId: configuration.usBankAccount.routeId,\n      plaid: {\n        publicKey: configuration.usBankAccount.plaidPublicKey\n      }\n    };\n  }\n\n  return response;\n}\n\nfunction mapCardTypes(cardTypes, cardTypeTransformMap) {\n  return cardTypes.reduce(function (acc, type) {\n    if (cardTypeTransformMap.hasOwnProperty(type)) {\n      return acc.concat(cardTypeTransformMap[type]);\n    }\n\n    return acc;\n  }, []);\n}\n\nmodule.exports = configurationResponseAdapter;\n\n},{\"../../../../lib/assign\":69,\"./error\":41}],40:[function(require,module,exports){\n'use strict';\n\nvar errorResponseAdapter = require('./error');\n\nvar CARD_BRAND_MAP = {\n  /* eslint-disable camelcase */\n  AMERICAN_EXPRESS: 'American Express',\n  DINERS: 'Discover',\n  DISCOVER: 'Discover',\n  INTERNATIONAL_MAESTRO: 'Maestro',\n  JCB: 'JCB',\n  MASTERCARD: 'MasterCard',\n  UK_MAESTRO: 'Maestro',\n  UNION_PAY: 'Union Pay',\n  VISA: 'Visa'\n  /* eslint-enable camelcase */\n};\n\nvar BIN_DATA_MAP = {\n  YES: 'Yes',\n  NO: 'No',\n  UNKNOWN: 'Unknown'\n};\n\nfunction creditCardTokenizationResponseAdapter(responseBody) {\n  var adaptedResponse;\n\n  if (responseBody.data && !responseBody.errors) {\n    adaptedResponse = adaptTokenizeCreditCardResponseBody(responseBody);\n  } else {\n    adaptedResponse = errorResponseAdapter(responseBody);\n  }\n\n  return adaptedResponse;\n}\n\nfunction adaptTokenizeCreditCardResponseBody(body) {\n  var data = body.data.tokenizeCreditCard;\n  var creditCard = data.creditCard;\n  var lastTwo = creditCard.last4 ? creditCard.last4.substr(2, 4) : '';\n  var binData = creditCard.binData;\n  var response;\n\n  if (binData) {\n    ['commercial', 'debit', 'durbinRegulated', 'healthcare', 'payroll', 'prepaid'].forEach(function (key) {\n      if (binData[key]) {\n        binData[key] = BIN_DATA_MAP[binData[key]];\n      } else {\n        binData[key] = 'Unknown';\n      }\n    });\n\n    ['issuingBank', 'countryOfIssuance', 'productId'].forEach(function (key) {\n      if (!binData[key]) { binData[key] = 'Unknown'; }\n    });\n  }\n\n  response = {\n    creditCards: [\n      {\n        binData: binData,\n        consumed: false,\n        description: lastTwo ? 'ending in ' + lastTwo : '',\n        nonce: data.token,\n        details: {\n          cardType: CARD_BRAND_MAP[creditCard.brandCode] || 'Unknown',\n          lastFour: creditCard.last4 || '',\n          lastTwo: lastTwo\n        },\n        type: 'CreditCard',\n        threeDSecureInfo: null\n      }\n    ]\n  };\n\n  return response;\n}\n\nmodule.exports = creditCardTokenizationResponseAdapter;\n\n},{\"./error\":41}],41:[function(require,module,exports){\n'use strict';\n\nfunction errorResponseAdapter(responseBody) {\n  var response;\n  var errorClass = responseBody.errors &&\n    responseBody.errors[0] &&\n    responseBody.errors[0].extensions &&\n    responseBody.errors[0].extensions.errorClass;\n\n  if (errorClass === 'VALIDATION') {\n    response = userErrorResponseAdapter(responseBody);\n  } else if (errorClass) {\n    response = errorWithClassResponseAdapter(responseBody);\n  } else {\n    response = {error: {message: 'There was a problem serving your request'}, fieldErrors: []};\n  }\n\n  return response;\n}\n\nfunction errorWithClassResponseAdapter(responseBody) {\n  return {error: {message: responseBody.errors[0].message}, fieldErrors: []};\n}\n\nfunction userErrorResponseAdapter(responseBody) {\n  var fieldErrors = buildFieldErrors(responseBody.errors);\n\n  return {error: {message: getLegacyMessage(fieldErrors)}, fieldErrors: fieldErrors};\n}\n\nfunction buildFieldErrors(errors) {\n  var fieldErrors = [];\n\n  errors.forEach(function (error) {\n    addFieldError(error.extensions.inputPath.slice(1), error, fieldErrors);\n  });\n\n  return fieldErrors;\n}\n\nfunction addFieldError(inputPath, errorDetail, fieldErrors) {\n  var fieldError;\n  var legacyCode = errorDetail.extensions.legacyCode;\n  var inputField = inputPath[0];\n\n  if (inputPath.length === 1) {\n    fieldErrors.push({\n      code: legacyCode,\n      field: inputField,\n      message: errorDetail.message\n    });\n\n    return;\n  }\n\n  fieldErrors.forEach(function (candidate) {\n    if (candidate.field === inputField) {\n      fieldError = candidate;\n    }\n  });\n\n  if (!fieldError) {\n    fieldError = {field: inputField, fieldErrors: []};\n    fieldErrors.push(fieldError);\n  }\n\n  addFieldError(inputPath.slice(1), errorDetail, fieldError.fieldErrors);\n}\n\nfunction getLegacyMessage(errors) {\n  var legacyMessages = {\n    creditCard: 'Credit card is invalid'\n  };\n\n  var field = errors[0].field;\n\n  return legacyMessages[field];\n}\n\nmodule.exports = errorResponseAdapter;\n\n},{}],42:[function(require,module,exports){\n'use strict';\n\nvar CONFIGURATION_QUERY = 'query ClientConfiguration { ' +\n'  clientConfiguration { ' +\n'    analyticsUrl ' +\n'    environment ' +\n'    merchantId ' +\n'    assetsUrl ' +\n'    clientApiUrl ' +\n'    creditCard { ' +\n'      supportedCardBrands ' +\n'      challenges ' +\n'      threeDSecureEnabled ' +\n'    } ' +\n'    applePayWeb { ' +\n'      countryCode ' +\n'      currencyCode ' +\n'      merchantIdentifier ' +\n'      supportedCardBrands ' +\n'    } ' +\n'    googlePay { ' +\n'      displayName ' +\n'      supportedCardBrands ' +\n'      environment ' +\n'      googleAuthorization ' +\n'    } ' +\n'    ideal { ' +\n'      routeId ' +\n'      assetsUrl ' +\n'    } ' +\n'    kount { ' +\n'      merchantId ' +\n'    } ' +\n'    masterpass { ' +\n'      merchantCheckoutId ' +\n'      supportedCardBrands ' +\n'    } ' +\n'    paypal { ' +\n'      displayName ' +\n'      clientId ' +\n'      privacyUrl ' +\n'      userAgreementUrl ' +\n'      assetsUrl ' +\n'      environment ' +\n'      environmentNoNetwork ' +\n'      unvettedMerchant ' +\n'      braintreeClientId ' +\n'      billingAgreementsEnabled ' +\n'      merchantAccountId ' +\n'      currencyCode ' +\n'      payeeEmail ' +\n'    } ' +\n'    unionPay { ' +\n'      merchantAccountId ' +\n'    } ' +\n'    usBankAccount { ' +\n'      routeId ' +\n'      plaidPublicKey ' +\n'    } ' +\n'    venmo { ' +\n'      merchantId ' +\n'      accessToken ' +\n'      environment ' +\n'    } ' +\n'    visaCheckout { ' +\n'      apiKey ' +\n'      externalClientId ' +\n'      supportedCardBrands ' +\n'    } ' +\n'    braintreeApi { ' +\n'      accessToken ' +\n'      url ' +\n'    } ' +\n'    supportedFeatures ' +\n'  } ' +\n'}';\n\nfunction configuration() {\n  return {\n    query: CONFIGURATION_QUERY,\n    operationName: 'ClientConfiguration'\n  };\n}\n\nmodule.exports = configuration;\n\n},{}],43:[function(require,module,exports){\n'use strict';\n\nvar assign = require('../../../../lib/assign').assign;\n\nvar CREDIT_CARD_TOKENIZATION_MUTATION = 'mutation TokenizeCreditCard($input: TokenizeCreditCardInput!) { ' +\n'  tokenizeCreditCard(input: $input) { ' +\n'    token ' +\n'    creditCard { ' +\n'      brandCode ' +\n'      last4 ' +\n'      binData { ' +\n'        prepaid ' +\n'        healthcare ' +\n'        debit ' +\n'        durbinRegulated ' +\n'        commercial ' +\n'        payroll ' +\n'        issuingBank ' +\n'        countryOfIssuance ' +\n'        productId ' +\n'      } ' +\n'    } ' +\n'  } ' +\n'}';\n\nfunction createCreditCardTokenizationBody(body) {\n  var cc = body.creditCard;\n  var billingAddress = cc && cc.billingAddress;\n  var expDate = cc && cc.expirationDate;\n  var expirationMonth = cc && (cc.expirationMonth || (expDate && expDate.split('/')[0].trim()));\n  var expirationYear = cc && (cc.expirationYear || (expDate && expDate.split('/')[1].trim()));\n  var variables = {\n    input: {\n      creditCard: {\n        number: cc && cc.number,\n        expirationMonth: expirationMonth,\n        expirationYear: expirationYear,\n        cvv: cc && cc.cvv,\n        cardholderName: cc && cc.cardholderName\n      },\n      options: {}\n    }\n  };\n\n  if (billingAddress) {\n    variables.input.creditCard.billingAddress = billingAddress;\n  }\n\n  variables.input = addValidationRule(body, variables.input);\n\n  return variables;\n}\n\nfunction addValidationRule(body, input) {\n  var validate;\n\n  if (body.creditCard && body.creditCard.options && typeof body.creditCard.options.validate === 'boolean') {\n    validate = body.creditCard.options.validate;\n  } else if ((body.authorizationFingerprint && body.tokenizationKey) || body.authorizationFingerprint) {\n    validate = true;\n  } else if (body.tokenizationKey) {\n    validate = false;\n  }\n\n  if (typeof validate === 'boolean') {\n    input.options = assign({\n      validate: validate\n    }, input.options);\n  }\n\n  return input;\n}\n\nfunction creditCardTokenization(body) {\n  return {\n    query: CREDIT_CARD_TOKENIZATION_MUTATION,\n    variables: createCreditCardTokenizationBody(body),\n    operationName: 'TokenizeCreditCard'\n  };\n}\n\nmodule.exports = creditCardTokenization;\n\n},{\"../../../../lib/assign\":69}],44:[function(require,module,exports){\n'use strict';\n\nvar browserDetection = require('../../browser-detection');\n\nvar features = {\n  tokenize_credit_cards: 'payment_methods/credit_cards', // eslint-disable-line camelcase\n  configuration: 'configuration'\n};\n\nvar disallowedInputPaths = [\n  'creditCard.options.unionPayEnrollment'\n];\n\nfunction GraphQL(config) {\n  this._config = config.graphQL;\n}\n\nGraphQL.prototype.getGraphQLEndpoint = function () {\n  return this._config.url;\n};\n\nGraphQL.prototype.isGraphQLRequest = function (url, body) {\n  var featureEnabled;\n  var path = this.getClientApiPath(url);\n\n  if (!this._isGraphQLEnabled() || !path || browserDetection.isIe9()) {\n    return false;\n  }\n\n  featureEnabled = this._config.features.some(function (feature) {\n    return features[feature] === path;\n  });\n\n  if (containsDisallowedlistedKeys(body)) {\n    return false;\n  }\n\n  return featureEnabled;\n};\n\nGraphQL.prototype.getClientApiPath = function (url) {\n  var path;\n  var clientApiPrefix = '/client_api/v1/';\n  var pathParts = url.split(clientApiPrefix);\n\n  if (pathParts.length > 1) {\n    path = pathParts[1].split('?')[0];\n  }\n\n  return path;\n};\n\nGraphQL.prototype._isGraphQLEnabled = function () {\n  return Boolean(this._config);\n};\n\nfunction containsDisallowedlistedKeys(body) {\n  return disallowedInputPaths.some(function (keys) {\n    var value = keys.split('.').reduce(function (accumulator, key) {\n      return accumulator && accumulator[key];\n    }, body);\n\n    return value !== undefined; // eslint-disable-line no-undefined\n  });\n}\n\nmodule.exports = GraphQL;\n\n},{\"../../browser-detection\":30}],45:[function(require,module,exports){\n'use strict';\n\nvar BRAINTREE_VERSION = require('../../constants').BRAINTREE_VERSION;\n\nvar assign = require('../../../lib/assign').assign;\n\nvar creditCardTokenizationBodyGenerator = require('./generators/credit-card-tokenization');\nvar creditCardTokenizationResponseAdapter = require('./adapters/credit-card-tokenization');\n\nvar configurationBodyGenerator = require('./generators/configuration');\nvar configurationResponseAdapter = require('./adapters/configuration');\n\nvar generators = {\n  'payment_methods/credit_cards': creditCardTokenizationBodyGenerator,\n  configuration: configurationBodyGenerator\n};\nvar adapters = {\n  'payment_methods/credit_cards': creditCardTokenizationResponseAdapter,\n  configuration: configurationResponseAdapter\n};\n\nfunction GraphQLRequest(options) {\n  var clientApiPath = options.graphQL.getClientApiPath(options.url);\n\n  this._graphQL = options.graphQL;\n  this._data = options.data;\n  this._method = options.method;\n  this._headers = options.headers;\n  this._clientSdkMetadata = {\n    source: options.metadata.source,\n    integration: options.metadata.integration,\n    sessionId: options.metadata.sessionId\n  };\n  this._sendAnalyticsEvent = options.sendAnalyticsEvent || Function.prototype;\n\n  this._generator = generators[clientApiPath];\n  this._adapter = adapters[clientApiPath];\n\n  this._sendAnalyticsEvent('graphql.init');\n}\n\nGraphQLRequest.prototype.getUrl = function () {\n  return this._graphQL.getGraphQLEndpoint();\n};\n\nGraphQLRequest.prototype.getBody = function () {\n  var formattedBody = formatBodyKeys(this._data);\n  var generatedBody = this._generator(formattedBody);\n  var body = assign({clientSdkMetadata: this._clientSdkMetadata}, generatedBody);\n\n  return JSON.stringify(body);\n};\n\nGraphQLRequest.prototype.getMethod = function () {\n  return 'POST';\n};\n\nGraphQLRequest.prototype.getHeaders = function () {\n  var authorization, headers;\n\n  if (this._data.authorizationFingerprint) {\n    this._sendAnalyticsEvent('graphql.authorization-fingerprint');\n    authorization = this._data.authorizationFingerprint;\n  } else {\n    this._sendAnalyticsEvent('graphql.tokenization-key');\n    authorization = this._data.tokenizationKey;\n  }\n\n  headers = {\n    Authorization: 'Bearer ' + authorization,\n    'Braintree-Version': BRAINTREE_VERSION\n  };\n\n  return assign({}, this._headers, headers);\n};\n\nGraphQLRequest.prototype.adaptResponseBody = function (parsedBody) {\n  return this._adapter(parsedBody, this);\n};\n\nGraphQLRequest.prototype.determineStatus = function (httpStatus, parsedResponse) {\n  var status, errorClass;\n\n  if (httpStatus === 200) {\n    errorClass = parsedResponse.errors &&\n      parsedResponse.errors[0] &&\n      parsedResponse.errors[0].extensions &&\n      parsedResponse.errors[0].extensions.errorClass;\n\n    if (parsedResponse.data && !parsedResponse.errors) {\n      status = 200;\n    } else if (errorClass === 'VALIDATION') {\n      status = 422;\n    } else if (errorClass === 'AUTHORIZATION') {\n      status = 403;\n    } else if (errorClass === 'AUTHENTICATION') {\n      status = 401;\n    } else if (isGraphQLError(errorClass, parsedResponse)) {\n      status = 403;\n    } else {\n      status = 500;\n    }\n  } else if (!httpStatus) {\n    status = 500;\n  } else {\n    status = httpStatus;\n  }\n\n  this._sendAnalyticsEvent('graphql.status.' + httpStatus);\n  this._sendAnalyticsEvent('graphql.determinedStatus.' + status);\n\n  return status;\n};\n\nfunction isGraphQLError(errorClass, parsedResponse) {\n  return !errorClass && parsedResponse.errors[0].message;\n}\n\nfunction snakeCaseToCamelCase(snakeString) {\n  if (snakeString.indexOf('_') === -1) {\n    return snakeString;\n  }\n\n  return snakeString.toLowerCase().replace(/(\\_\\w)/g, function (match) {\n    return match[1].toUpperCase();\n  });\n}\n\nfunction formatBodyKeys(originalBody) {\n  var body = {};\n\n  Object.keys(originalBody).forEach(function (key) {\n    var camelCaseKey = snakeCaseToCamelCase(key);\n\n    if (typeof originalBody[key] === 'object') {\n      body[camelCaseKey] = formatBodyKeys(originalBody[key]);\n    } else if (typeof originalBody[key] === 'number') {\n      body[camelCaseKey] = String(originalBody[key]);\n    } else {\n      body[camelCaseKey] = originalBody[key];\n    }\n  });\n\n  return body;\n}\n\nmodule.exports = GraphQLRequest;\n\n},{\"../../../lib/assign\":69,\"../../constants\":32,\"./adapters/configuration\":39,\"./adapters/credit-card-tokenization\":40,\"./generators/configuration\":42,\"./generators/credit-card-tokenization\":43}],46:[function(require,module,exports){\n'use strict';\n\nvar ajaxIsAvaliable;\nvar once = require('../../lib/once');\nvar JSONPDriver = require('./jsonp-driver');\nvar AJAXDriver = require('./ajax-driver');\nvar getUserAgent = require('./get-user-agent');\nvar isHTTP = require('./is-http');\n\nfunction isAjaxAvailable() {\n  if (ajaxIsAvaliable == null) {\n    ajaxIsAvaliable = !(isHTTP() && /MSIE\\s(8|9)/.test(getUserAgent()));\n  }\n\n  return ajaxIsAvaliable;\n}\n\nmodule.exports = function (options, cb) {\n  cb = once(cb || Function.prototype);\n  options.method = (options.method || 'GET').toUpperCase();\n  options.timeout = options.timeout == null ? 60000 : options.timeout;\n  options.data = options.data || {};\n\n  if (isAjaxAvailable()) {\n    AJAXDriver.request(options, cb);\n  } else {\n    JSONPDriver.request(options, cb);\n  }\n};\n\n},{\"../../lib/once\":94,\"./ajax-driver\":36,\"./get-user-agent\":38,\"./is-http\":47,\"./jsonp-driver\":48}],47:[function(require,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = function () {\n  return global.location.protocol === 'http:';\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],48:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar head;\nvar uuid = require('../../lib/vendor/uuid');\nvar querystring = require('../../lib/querystring');\nvar timeouts = {};\n\nfunction _removeScript(script) {\n  if (script && script.parentNode) {\n    script.parentNode.removeChild(script);\n  }\n}\n\nfunction _createScriptTag(url, callbackName) {\n  var script = document.createElement('script');\n  var done = false;\n\n  script.src = url;\n  script.async = true;\n  script.onerror = function () {\n    global[callbackName]({message: 'error', status: 500});\n  };\n\n  script.onload = script.onreadystatechange = function () {\n    if (done) { return; }\n\n    if (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') {\n      done = true;\n      script.onload = script.onreadystatechange = null;\n    }\n  };\n\n  return script;\n}\n\nfunction _cleanupGlobal(callbackName) {\n  try {\n    delete global[callbackName];\n  } catch (_) {\n    global[callbackName] = null;\n  }\n}\n\nfunction _setupTimeout(timeout, callbackName) {\n  timeouts[callbackName] = setTimeout(function () {\n    timeouts[callbackName] = null;\n\n    global[callbackName]({\n      error: 'timeout',\n      status: -1\n    });\n\n    global[callbackName] = function () {\n      _cleanupGlobal(callbackName);\n    };\n  }, timeout);\n}\n\nfunction _setupGlobalCallback(script, callback, callbackName) {\n  global[callbackName] = function (response) {\n    var status = response.status || 500;\n    var err = null;\n    var data = null;\n\n    delete response.status;\n\n    if (status >= 400 || status < 200) {\n      err = response;\n    } else {\n      data = response;\n    }\n\n    _cleanupGlobal(callbackName);\n    _removeScript(script);\n\n    clearTimeout(timeouts[callbackName]);\n    callback(err, data, status);\n  };\n}\n\nfunction request(options, callback) {\n  var script;\n  var callbackName = 'callback_json_' + uuid().replace(/-/g, '');\n  var url = options.url;\n  var attrs = options.data;\n  var method = options.method;\n  var timeout = options.timeout;\n\n  url = querystring.queryify(url, attrs);\n  url = querystring.queryify(url, {\n    _method: method,\n    callback: callbackName\n  });\n\n  script = _createScriptTag(url, callbackName);\n  _setupGlobalCallback(script, callback, callbackName);\n  _setupTimeout(timeout, callbackName);\n\n  if (!head) {\n    head = document.getElementsByTagName('head')[0];\n  }\n\n  head.appendChild(script);\n}\n\nmodule.exports = {\n  request: request\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../lib/querystring\":96,\"../../lib/vendor/uuid\":99}],49:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (body) {\n  try {\n    body = JSON.parse(body);\n  } catch (e) { /* ignored */ }\n\n  return body;\n};\n\n},{}],50:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (method, body) {\n  if (typeof method !== 'string') {\n    throw new Error('Method must be a string');\n  }\n\n  if (method.toLowerCase() !== 'get' && body != null) {\n    body = typeof body === 'string' ? body : JSON.stringify(body);\n  }\n\n  return body;\n};\n\n},{}],51:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar isXHRAvailable = global.XMLHttpRequest && 'withCredentials' in new global.XMLHttpRequest();\n\nfunction getRequestObject() {\n  return isXHRAvailable ? new XMLHttpRequest() : new XDomainRequest();\n}\n\nmodule.exports = {\n  isAvailable: isXHRAvailable,\n  getRequestObject: getRequestObject\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],52:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.Google Payment - Creation Error Codes\n * @description Errors that occur when [creating the Google Payment component](/current/module-braintree-web_google-payment.html#.create).\n * @property {MERCHANT} GOOGLE_PAYMENT_NOT_ENABLED Occurs when Google Pay is not enabled on the Braintree control panel.\n */\n\n/**\n * @name BraintreeError.Google Payment - parseResponse Error Codes\n * @description Errors that occur when [parsing the response from Google](/current/GooglePayment.html#parseResponse).\n * @property {UNKNOWN} GOOGLE_PAYMENT_GATEWAY_ERROR Occurs when Google Pay could not be tokenized.\n */\n\nvar BraintreeError = require('../lib/braintree-error');\n\nmodule.exports = {\n  GOOGLE_PAYMENT_NOT_ENABLED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'GOOGLE_PAYMENT_NOT_ENABLED',\n    message: 'Google Pay is not enabled for this merchant.'\n  },\n  GOOGLE_PAYMENT_GATEWAY_ERROR: {\n    code: 'GOOGLE_PAYMENT_GATEWAY_ERROR',\n    message: 'There was an error when tokenizing the Google Pay payment method.',\n    type: BraintreeError.types.UNKNOWN\n  }\n};\n\n},{\"../lib/braintree-error\":72}],53:[function(require,module,exports){\n'use strict';\n\nvar analytics = require('../lib/analytics');\nvar assign = require('../lib/assign').assign;\nvar convertMethodsToError = require('../lib/convert-methods-to-error');\nvar find = require('../lib/find');\nvar generateGooglePayConfiguration = require('../lib/generate-google-pay-configuration');\nvar BraintreeError = require('../lib/braintree-error');\nvar errors = require('./errors');\nvar methods = require('../lib/methods');\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\n\nvar DEFAULT_CARD_NETWORKS = ['AMEX', 'DISCOVER', 'MASTERCARD', 'VISA'];\n\n/**\n * @typedef {object} GooglePayment~tokenizePayload\n * @property {string} nonce The payment method nonce.\n * @property {object} details Additional account details.\n * @property {string} details.cardType Type of card, ex: Visa, MasterCard.\n * @property {string} details.lastFour Last four digits of card number.\n * @property {string} details.lastTwo Last two digits of card number.\n * @property {string} description A human-readable description.\n * @property {string} type The payment method type, `CreditCard` or `AndroidPayCard`.\n * @property {object} binData Information about the card based on the bin.\n * @property {string} binData.commercial Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.countryOfIssuance The country of issuance.\n * @property {string} binData.debit Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.healthcare Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.issuingBank The issuing bank.\n * @property {string} binData.payroll Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.prepaid Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.productId The product id.\n */\n\n/**\n * @class GooglePayment\n * @param {object} options Google Payment {@link module:braintree-web/google-payment.create create} options.\n * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/google-payment.create|braintree-web.google-payment.create} instead.</strong>\n * @classdesc This class represents a Google Payment component produced by {@link module:braintree-web/google-payment.create|braintree-web/google-payment.create}. Instances of this class have methods for initializing the Google Pay flow.\n */\nfunction GooglePayment(options) {\n  this._client = options.client;\n  this._googlePayVersion = options.googlePayVersion || 1;\n  this._googleMerchantId = options.googleMerchantId;\n}\n\nGooglePayment.prototype._createV1PaymentDataRequest = function (defaultConfig, paymentDataRequest) {\n  var overrideCardNetworks = paymentDataRequest.cardRequirements && paymentDataRequest.cardRequirements.allowedCardNetworks;\n  var defaultConfigCardNetworks = defaultConfig.cardRequirements.allowedCardNetworks;\n  var allowedCardNetworks = overrideCardNetworks || defaultConfigCardNetworks;\n\n  paymentDataRequest = assign({}, defaultConfig, paymentDataRequest);\n\n  // this way we can preserve allowedCardNetworks from default integration\n  // if merchant did not pass any in `cardRequirements`\n  paymentDataRequest.cardRequirements.allowedCardNetworks = allowedCardNetworks;\n\n  return paymentDataRequest;\n};\n\nGooglePayment.prototype._createV2PaymentDataRequest = function (defaultConfig, paymentDataRequest) {\n  var newCardPaymentMethod, defaultConfigCardPaymentMethod, parameters;\n  var defaultConfigPaymentMethods = defaultConfig.allowedPaymentMethods;\n\n  // For the CARD allowed payment method, ensure allowedCardNetworks is set.\n  if (paymentDataRequest.allowedPaymentMethods) {\n    newCardPaymentMethod = find(paymentDataRequest.allowedPaymentMethods, 'type', 'CARD');\n    defaultConfigCardPaymentMethod = find(defaultConfigPaymentMethods, 'type', 'CARD');\n\n    if (newCardPaymentMethod) {\n      newCardPaymentMethod.parameters = assign({}, newCardPaymentMethod.parameters);\n      parameters = newCardPaymentMethod.parameters;\n      if (!parameters.allowedCardNetworks || (parameters.allowedCardNetworks && parameters.allowedCardNetworks.length === 0)) {\n        if (defaultConfigCardPaymentMethod &&\n          defaultConfigCardPaymentMethod.parameters &&\n          defaultConfigCardPaymentMethod.parameters.allowedCardNetworks\n        ) {\n          parameters.allowedCardNetworks = defaultConfigCardPaymentMethod.parameters.allowedCardNetworks;\n        } else {\n          parameters.allowedCardNetworks = DEFAULT_CARD_NETWORKS;\n        }\n      }\n    }\n  }\n  paymentDataRequest = assign({}, defaultConfig, paymentDataRequest);\n\n  return paymentDataRequest;\n};\n\n/**\n * Create a configuration object for use in the `loadPaymentData` method.\n *\n * **Note**: Version 1 of the Google Pay Api is deprecated and will become unsupported in a future version. Until then, version 1 will continue to be used by default, and version 1 schema parameters and overrides will remain functional on existing integrations. However, new integrations and all following examples will be presented in the GooglePay version 2 schema. See [Google Pay's upgrade guide](https://developers.google.com/pay/api/web/guides/resources/update-to-latest-version) to see how to update your integration.\n *\n * If `options.googlePayVersion === 2` was set during the initial {@link module:braintree-web/google-payment.create|create} call, overrides must match the Google Pay v2 schema to be valid.\n *\n * @public\n * @param {object} overrides The supplied parameters for creating the PaymentDataRequest object. Required parameters are:\n *  @param {object} overrides.transactionInfo Object according to the [Google Pay Transaction Info](https://developers.google.com/pay/api/web/reference/object#TransactionInfo) spec.\n *  Optionally, any of the parameters in the [PaymentDataRequest](https://developers.google.com/pay/api/web/reference/object#PaymentDataRequest) parameters can be overridden, but note that it is recommended only to override top level parameters to avoid squashing deeply nested configuration objects. An example can be found below showing how to safely edit these deeply nested objects.\n * @example\n * var paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({\n *   merchantInfo: {\n *     merchantId: 'my-merchant-id-from-google'\n *   },\n *   transactionInfo: {\n *     currencyCode: 'USD',\n *     totalPriceStatus: 'FINAL',\n *     totalPrice: '100.00'\n *   }\n * });\n *\n * // Update card payment methods to require billing address\n * var cardPaymentMethod = paymentDataRequest.allowedPaymentMethods;\n * cardPaymentMethod.parameters.billingAddressRequired = true;\n * cardPaymentMethod.parameters.billingAddressParameters = {\n *   format: 'FULL',\n *   phoneNumberRequired: true\n * };\n *\n * var paymentsClient = new google.payments.api.PaymentsClient({\n *   environment: 'TEST' // or 'PRODUCTION'\n * })\n *\n * paymentsClient.loadPaymentData(paymentDataRequest).then(function (response) {\n *   // handle response with googlePaymentInstance.parseResponse\n *   // (see below)\n * });\n * @returns {object} Returns a configuration object for Google PaymentDataRequest.\n */\nGooglePayment.prototype.createPaymentDataRequest = function (overrides) {\n  var paymentDataRequest = assign({}, overrides);\n  var defaultConfig = generateGooglePayConfiguration(this._client.getConfiguration(), this._googlePayVersion, this._googleMerchantId);\n\n  // Default to using v1 config. If apiVersion is specifically set to 2, use v2 config.\n  if (this._googlePayVersion === 2) {\n    paymentDataRequest = this._createV2PaymentDataRequest(defaultConfig, paymentDataRequest);\n    analytics.sendEvent(this._client, 'google-payment.v2.createPaymentDataRequest');\n  } else {\n    paymentDataRequest = this._createV1PaymentDataRequest(defaultConfig, paymentDataRequest);\n    analytics.sendEvent(this._client, 'google-payment.v1.createPaymentDataRequest');\n  }\n\n  return paymentDataRequest;\n};\n\n/**\n * Parse the response from the tokenization.\n * @public\n * @param {object} response The response back from the Google Pay tokenization.\n * @param {callback} [callback] The second argument, <code>data</code>, is a {@link GooglePay~tokenizePayload|tokenizePayload}. If no callback is provided, `parseResponse` returns a promise that resolves with a {@link GooglePayment~tokenizePayload|tokenizePayload}.\n * @example with callback\n * var paymentsClient = new google.payments.api.PaymentsClient({\n *   environment: 'TEST' // or 'PRODUCTION'\n * })\n *\n * paymentsClient.loadPaymentData(paymentDataRequestFromCreatePaymentDataRequest).then(function (response) {\n *   googlePaymentInstance.parseResponse(response, function (err, data) {\n *     if (err) {\n *       // handle errors\n *     }\n *     // send parsedResponse.nonce to your server\n *   });\n * });\n * @example with promise\n * var paymentsClient = new google.payments.api.PaymentsClient({\n *   environment: 'TEST' // or 'PRODUCTION'\n * })\n *\n * paymentsClient.loadPaymentData(paymentDataRequestFromCreatePaymentDataRequest).then(function (response) {\n *   return googlePaymentInstance.parseResponse(response);\n * }).then(function (parsedResponse) {\n *   // send parsedResponse.nonce to your server\n * }).catch(function (err) {\n *   // handle errors\n * });\n * @returns {Promise|void} Returns a promise that resolves the parsed response if no callback is provided.\n */\nGooglePayment.prototype.parseResponse = function (response) {\n  var client = this._client;\n\n  return Promise.resolve().then(function () {\n    var payload;\n    var rawResponse = response.apiVersion === 2 ?\n      response.paymentMethodData.tokenizationData.token :\n      response.paymentMethodToken.token;\n    var parsedResponse = JSON.parse(rawResponse);\n    var error = parsedResponse.error;\n\n    if (error) {\n      return Promise.reject(error);\n    }\n\n    analytics.sendEvent(client, 'google-payment.parseResponse.succeeded');\n\n    if (parsedResponse.paypalAccounts) {\n      payload = parsedResponse.paypalAccounts[0];\n      analytics.sendEvent(client, 'google-payment.parseResponse.succeeded.paypal');\n\n      return Promise.resolve({\n        nonce: payload.nonce,\n        type: payload.type,\n        description: payload.description\n      });\n    }\n    payload = parsedResponse.androidPayCards[0];\n    analytics.sendEvent(client, 'google-payment.parseResponse.succeeded.google-payment');\n\n    return Promise.resolve({\n      nonce: payload.nonce,\n      type: payload.type,\n      description: payload.description,\n      details: {\n        cardType: payload.details.cardType,\n        lastFour: payload.details.lastFour,\n        lastTwo: payload.details.lastTwo\n      },\n      binData: payload.binData\n    });\n  }).catch(function (error) {\n    analytics.sendEvent(client, 'google-payment.parseResponse.failed');\n\n    return Promise.reject(new BraintreeError({\n      code: errors.GOOGLE_PAYMENT_GATEWAY_ERROR.code,\n      message: errors.GOOGLE_PAYMENT_GATEWAY_ERROR.message,\n      type: errors.GOOGLE_PAYMENT_GATEWAY_ERROR.type,\n      details: {\n        originalError: error\n      }\n    }));\n  });\n};\n\n/**\n * Cleanly tear down anything set up by {@link module:braintree-web/google-payment.create|create}.\n * @public\n * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.\n * @example\n * googlePaymentInstance.teardown();\n * @example <caption>With callback</caption>\n * googlePaymentInstance.teardown(function () {\n *   // teardown is complete\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nGooglePayment.prototype.teardown = function () {\n  convertMethodsToError(this, methods(GooglePayment.prototype));\n\n  return Promise.resolve();\n};\n\nmodule.exports = wrapPromise.wrapPrototype(GooglePayment);\n\n},{\"../lib/analytics\":67,\"../lib/assign\":69,\"../lib/braintree-error\":72,\"../lib/convert-methods-to-error\":77,\"../lib/find\":87,\"../lib/generate-google-pay-configuration\":88,\"../lib/methods\":93,\"../lib/promise\":95,\"./errors\":52,\"@braintree/wrap-promise\":26}],54:[function(require,module,exports){\n'use strict';\n/**\n * @module braintree-web/google-payment\n * @description A component to integrate with Google Pay. The majority of the integration uses [Google's pay.js JavaScript file](https://pay.google.com/gp/p/js/pay.js). The Braintree component generates the configuration object necessary for Google Pay to initiate the Payment Request and parse the returned data to retrieve the payment method nonce which is used to process the transaction on the server.\n */\n\nvar basicComponentVerification = require('../lib/basic-component-verification');\nvar BraintreeError = require('../lib/braintree-error');\nvar errors = require('./errors');\nvar GooglePayment = require('./google-payment');\nvar createDeferredClient = require('../lib/create-deferred-client');\nvar createAssetsUrl = require('../lib/create-assets-url');\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar VERSION = \"3.42.0\";\n\n/**\n * @static\n * @function create\n * @param {object} options Creation options:\n * @param {Client} [options.client] A {@link Client} instance.\n * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.\n * @param {Number} [options.googlePayVersion] The version of the Google Pay API to use. Value of 2 is required to accept parameters documented [by Google](https://developers.google.com/pay/api/web/reference/object). Omit this parameter to use the deprecated Google Pay Version 1.\n * @param {String} [options.googleMerchantId] A Google merchant identifier issued after your website is approved by Google. Required when PaymentsClient is initialized with an environment property of PRODUCTION, but may be omitted in TEST environment.\n * @param {callback} [callback] The second argument, `data`, is the {@link GooglePayment} instance. If no callback is provided, `create` returns a promise that resolves with the {@link GooglePayment} instance.\n * @example <caption>Simple Example</caption>\n * // include https://pay.google.com/gp/p/js/pay.js in a script tag\n * // on your page to load the `google.payments.api.PaymentsClient` global object.\n *\n * var paymentButton = document.querySelector('#google-pay-button');\n * var paymentsClient = new google.payments.api.PaymentsClient({\n *   environment: 'TEST' // or 'PRODUCTION'\n * });\n *\n * braintree.client.create({\n *   authorization: 'tokenization-key-or-client-token'\n * }).then(function (clientInstance) {\n *   return braintree.googlePayment.create({\n *     client: clientInstance,\n*      googlePayVersion: 2,\n*      googleMerchantId: 'your-merchant-id-from-google'\n *   });\n * }).then(function (googlePaymentInstance) {\n *   paymentButton.addEventListener('click', function (event) {\n *     var paymentDataRequest;\n *\n *     event.preventDefault();\n *\n *     paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({\n *       transactionInfo: {\n *         currencyCode: 'USD',\n *         totalPriceStatus: 'FINAL',\n *         totalPrice: '100.00'\n *       }\n *     });\n *\n *     paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {\n *       return googlePaymentInstance.parseResponse(paymentData);\n *     }).then(function (result) {\n *       // send result.nonce to your server\n *     }).catch(function (err) {\n *       // handle err\n *     });\n *   });\n * });\n * @example <caption>Check Browser and Customer Compatibility</caption>\n * var paymentsClient = new google.payments.api.PaymentsClient({\n *   environment: 'TEST' // or 'PRODUCTION'\n * });\n *\n * function setupGooglePayButton(googlePaymentInstance) {\n *   var button = document.createElement('button');\n *\n *   button.id = 'google-pay';\n *   button.appendChild(document.createTextNode('Google Pay'));\n *   button.addEventListener('click', function (event) {\n *     var paymentRequestData;\n *\n *     event.preventDefault();\n *\n *     paymentDataRequest = googlePaymentInstance.createPaymentDataRequest({\n *       transactionInfo: {\n *         currencyCode: 'USD',\n *         totalPriceStatus: 'FINAL',\n *         totalPrice: '100.00' // your amount\n *       }\n *     });\n *\n *     paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {\n *       return googlePaymentInstance.parseResponse(paymentData);\n*       }).then(function (result) {\n *       // send result.nonce to your server\n *     }).catch(function (err) {\n *       // handle errors\n *     });\n *   });\n *\n *   document.getElementById('container').appendChild(button);\n * }\n *\n * braintree.client.create({\n *   authorization: 'tokenization-key-or-client-token'\n * }).then(function (clientInstance) {\n *   return braintree.googlePayment.create({\n *     client: clientInstance,\n *     googlePayVersion: 2,\n *     googleMerchantId: 'your-merchant-id-from-google'\n *   });\n * }).then(function (googlePaymentInstance) {\n *\n *   return paymentsClient.isReadyToPay({\n *     apiVersion: 2,\n *     apiVersionMinor: 0,\n *     allowedPaymentMethods: googlePaymentInstance.createPaymentDataRequest().allowedPaymentMethods\n *   });\n * }).then(function (response) {\n *   if (response.result) {\n *     setupGooglePayButton(googlePaymentInstance);\n *   }\n * }).catch(function (err) {\n *   // handle setup errors\n * });\n *\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nfunction create(options) {\n  var name = 'Google Pay';\n\n  return basicComponentVerification.verify({\n    name: name,\n    client: options.client,\n    authorization: options.authorization\n  }).then(function () {\n    return createDeferredClient.create({\n      authorization: options.authorization,\n      client: options.client,\n      debug: options.debug,\n      assetsUrl: createAssetsUrl.create(options.authorization),\n      name: name\n    });\n  }).then(function (client) {\n    options.client = client;\n\n    if (!options.client.getConfiguration().gatewayConfiguration.androidPay) {\n      return Promise.reject(new BraintreeError(errors.GOOGLE_PAYMENT_NOT_ENABLED));\n    }\n\n    return new GooglePayment(options);\n  });\n}\n\nmodule.exports = {\n  create: wrapPromise(create),\n  /**\n   * @description The current version of the SDK, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"../lib/basic-component-verification\":70,\"../lib/braintree-error\":72,\"../lib/create-assets-url\":79,\"../lib/create-deferred-client\":81,\"../lib/promise\":95,\"./errors\":52,\"./google-payment\":53,\"@braintree/wrap-promise\":26}],55:[function(require,module,exports){\n'use strict';\n\nvar BraintreeError = require('../../lib/braintree-error');\nvar errors = require('../shared/errors');\nvar allowedAttributes = require('../shared/constants').allowedAttributes;\n\nfunction attributeValidationError(attribute, value) {\n  var err;\n\n  if (!allowedAttributes.hasOwnProperty(attribute)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED.type,\n      code: errors.HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED.code,\n      message: 'The \"' + attribute + '\" attribute is not supported in Hosted Fields.'\n    });\n  } else if (value != null && !_isValid(attribute, value)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED.type,\n      code: errors.HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED.code,\n      message: 'Value \"' + value + '\" is not allowed for \"' + attribute + '\" attribute.'\n    });\n  }\n\n  return err;\n}\n\nfunction _isValid(attribute, value) {\n  if (allowedAttributes[attribute] === 'string') {\n    return typeof value === 'string' || typeof value === 'number';\n  } else if (allowedAttributes[attribute] === 'boolean') {\n    return String(value) === 'true' || String(value) === 'false';\n  }\n\n  return false;\n}\n\nmodule.exports = attributeValidationError;\n\n},{\"../../lib/braintree-error\":72,\"../shared/constants\":62,\"../shared/errors\":63}],56:[function(require,module,exports){\n'use strict';\n\nvar constants = require('../shared/constants');\nvar useMin = require('../../lib/use-min');\n\nmodule.exports = function composeUrl(assetsUrl, componentId, isDebug) {\n  return assetsUrl +\n    '/web/' +\n    constants.VERSION +\n    '/html/hosted-fields-frame' + useMin(isDebug) + '.html#' +\n    componentId;\n};\n\n},{\"../../lib/use-min\":97,\"../shared/constants\":62}],57:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar allowedStyles = require('../shared/constants').allowedStyles;\n\nmodule.exports = function getStylesFromClass(cssClass) {\n  var element = document.createElement('input');\n  var styles = {};\n  var computedStyles;\n\n  if (cssClass[0] === '.') {\n    cssClass = cssClass.substring(1);\n  }\n\n  element.className = cssClass;\n  element.style.display = 'none !important';\n  element.style.position = 'fixed !important';\n  element.style.left = '-99999px !important';\n  element.style.top = '-99999px !important';\n  global.document.body.appendChild(element);\n\n  computedStyles = global.getComputedStyle(element);\n\n  allowedStyles.forEach(function (style) {\n    var value = computedStyles[style];\n\n    if (value) {\n      styles[style] = value;\n    }\n  });\n\n  global.document.body.removeChild(element);\n\n  return styles;\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../shared/constants\":62}],58:[function(require,module,exports){\n'use strict';\n\nvar assign = require('../../lib/assign').assign;\nvar createAssetsUrl = require('../../lib/create-assets-url');\nvar Destructor = require('../../lib/destructor');\nvar classList = require('@braintree/class-list');\nvar iFramer = require('@braintree/iframer');\nvar Bus = require('../../lib/bus');\nvar createDeferredClient = require('../../lib/create-deferred-client');\nvar BraintreeError = require('../../lib/braintree-error');\nvar composeUrl = require('./compose-url');\nvar getStylesFromClass = require('./get-styles-from-class');\nvar constants = require('../shared/constants');\nvar errors = require('../shared/errors');\nvar INTEGRATION_TIMEOUT_MS = require('../../lib/constants').INTEGRATION_TIMEOUT_MS;\nvar uuid = require('../../lib/vendor/uuid');\nvar findParentTags = require('../shared/find-parent-tags');\nvar browserDetection = require('../shared/browser-detection');\nvar events = constants.events;\nvar EventEmitter = require('../../lib/event-emitter');\nvar injectFrame = require('./inject-frame');\nvar analytics = require('../../lib/analytics');\nvar allowedFields = constants.allowedFields;\nvar methods = require('../../lib/methods');\nvar convertMethodsToError = require('../../lib/convert-methods-to-error');\nvar sharedErrors = require('../../lib/errors');\nvar getCardTypes = require('../shared/get-card-types');\nvar attributeValidationError = require('./attribute-validation-error');\nvar Promise = require('../../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\n\n/**\n * @typedef {object} HostedFields~tokenizePayload\n * @property {string} nonce The payment method nonce.\n * @property {object} details Additional account details.\n * @property {string} details.cardType Type of card, ex: Visa, MasterCard.\n * @property {string} details.lastFour Last four digits of card number.\n * @property {string} details.lastTwo Last two digits of card number.\n * @property {string} description A human-readable description.\n * @property {string} type The payment method type, always `CreditCard`.\n * @property {object} binData Information about the card based on the bin.\n * @property {string} binData.commercial Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.countryOfIssuance The country of issuance.\n * @property {string} binData.debit Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.healthcare Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.issuingBank The issuing bank.\n * @property {string} binData.payroll Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.prepaid Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.productId The product id.\n */\n\n/**\n * @typedef {object} HostedFields~stateObject\n * @description The event payload sent from {@link HostedFields#on|on} or {@link HostedFields#getState|getState}.\n * @property {HostedFields~hostedFieldsCard[]} cards\n * This will return an array of potential {@link HostedFields~hostedFieldsCard|cards}. If the card type has been determined, the array will contain only one card.\n * Internally, Hosted Fields uses <a href=\"https://github.com/braintree/credit-card-type\">credit-card-type</a>,\n * an open-source card detection library.\n * @property {string} emittedBy\n * The name of the field associated with an event. This will not be included if returned by {@link HostedFields#getState|getState}. It will be one of the following strings:<br>\n * - `\"number\"`\n * - `\"cvv\"`\n * - `\"expirationDate\"`\n * - `\"expirationMonth\"`\n * - `\"expirationYear\"`\n * - `\"postalCode\"`\n * @property {object} fields\n * @property {?HostedFields~hostedFieldsFieldData} fields.number {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the number field, if it is present.\n * @property {?HostedFields~hostedFieldsFieldData} fields.cvv {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the CVV field, if it is present.\n * @property {?HostedFields~hostedFieldsFieldData} fields.expirationDate {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the expiration date field, if it is present.\n * @property {?HostedFields~hostedFieldsFieldData} fields.expirationMonth {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the expiration month field, if it is present.\n * @property {?HostedFields~hostedFieldsFieldData} fields.expirationYear {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the expiration year field, if it is present.\n * @property {?HostedFields~hostedFieldsFieldData} fields.postalCode {@link HostedFields~hostedFieldsFieldData|hostedFieldsFieldData} for the postal code field, if it is present.\n */\n\n/**\n * @typedef {object} HostedFields~hostedFieldsFieldData\n * @description Data about Hosted Fields fields, sent in {@link HostedFields~stateObject|stateObjects}.\n * @property {HTMLElement} container Reference to the container DOM element on your page associated with the current event.\n * @property {boolean} isFocused Whether or not the input is currently focused.\n * @property {boolean} isEmpty Whether or not the user has entered a value in the input.\n * @property {boolean} isPotentiallyValid\n * A determination based on the future validity of the input value.\n * This is helpful when a user is entering a card number and types <code>\"41\"</code>.\n * While that value is not valid for submission, it is still possible for\n * it to become a fully qualified entry. However, if the user enters <code>\"4x\"</code>\n * it is clear that the card number can never become valid and isPotentiallyValid will\n * return false.\n * @property {boolean} isValid Whether or not the value of the associated input is <i>fully</i> qualified for submission.\n */\n\n/**\n * @typedef {object} HostedFields~hostedFieldsCard\n * @description Information about the card type, sent in {@link HostedFields~stateObject|stateObjects}.\n * @property {string} type The code-friendly representation of the card type. It will be one of the following strings:\n * - `american-express`\n * - `diners-club`\n * - `discover`\n * - `jcb`\n * - `maestro`\n * - `master-card`\n * - `unionpay`\n * - `visa`\n * @property {string} niceType The pretty-printed card type. It will be one of the following strings:\n * - `American Express`\n * - `Diners Club`\n * - `Discover`\n * - `JCB`\n * - `Maestro`\n * - `MasterCard`\n * - `UnionPay`\n * - `Visa`\n * @property {object} code\n * This object contains data relevant to the security code requirements of the card brand.\n * For example, on a Visa card there will be a <code>CVV</code> of 3 digits, whereas an\n * American Express card requires a 4-digit <code>CID</code>.\n * @property {string} code.name <code>\"CVV\"</code> <code>\"CID\"</code> <code>\"CVC\"</code>\n * @property {number} code.size The expected length of the security code. Typically, this is 3 or 4.\n */\n\n/**\n * @name HostedFields#on\n * @function\n * @param {string} event The name of the event to which you are subscribing.\n * @param {function} handler A callback to handle the event.\n * @description Subscribes a handler function to a named event. `event` should be {@link HostedFields#event:blur|blur}, {@link HostedFields#event:focus|focus}, {@link HostedFields#event:empty|empty}, {@link HostedFields#event:notEmpty|notEmpty}, {@link HostedFields#event:cardTypeChange|cardTypeChange}, or {@link HostedFields#event:validityChange|validityChange}. Events will emit a {@link HostedFields~stateObject|stateObject}.\n * @example\n * <caption>Listening to a Hosted Field event, in this case 'focus'</caption>\n * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {\n *   hostedFieldsInstance.on('focus', function (event) {\n *     console.log(event.emittedBy, 'has been focused');\n *   });\n * });\n * @returns {void}\n */\n\n/**\n * This event is emitted when the user requests submission of an input field, such as by pressing the Enter or Return key on their keyboard, or mobile equivalent.\n * @event HostedFields#inputSubmitRequest\n * @type {HostedFields~stateObject}\n * @example\n * <caption>Clicking a submit button upon hitting Enter (or equivalent) within a Hosted Field</caption>\n * var hostedFields = require('braintree-web/hosted-fields');\n * var submitButton = document.querySelector('input[type=\"submit\"]');\n *\n * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {\n *   hostedFieldsInstance.on('inputSubmitRequest', function () {\n *     // User requested submission, e.g. by pressing Enter or equivalent\n *     submitButton.click();\n *   });\n * });\n */\n\n/**\n * This event is emitted when a field transitions from having data to being empty.\n * @event HostedFields#empty\n * @type {HostedFields~stateObject}\n * @example\n * <caption>Listening to an empty event</caption>\n * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {\n *   hostedFieldsInstance.on('empty', function (event) {\n *     console.log(event.emittedBy, 'is now empty');\n *   });\n * });\n */\n\n/**\n * This event is emitted when a field transitions from being empty to having data.\n * @event HostedFields#notEmpty\n * @type {HostedFields~stateObject}\n * @example\n * <caption>Listening to an notEmpty event</caption>\n * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {\n *   hostedFieldsInstance.on('notEmpty', function (event) {\n *     console.log(event.emittedBy, 'is now not empty');\n *   });\n * });\n */\n\n/**\n * This event is emitted when a field loses focus.\n * @event HostedFields#blur\n * @type {HostedFields~stateObject}\n * @example\n * <caption>Listening to a blur event</caption>\n * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {\n *   hostedFieldsInstance.on('blur', function (event) {\n *     console.log(event.emittedBy, 'lost focus');\n *   });\n * });\n */\n\n/**\n * This event is emitted when a field gains focus.\n * @event HostedFields#focus\n * @type {HostedFields~stateObject}\n * @example\n * <caption>Listening to a focus event</caption>\n * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {\n *   hostedFieldsInstance.on('focus', function (event) {\n *     console.log(event.emittedBy, 'gained focus');\n *   });\n * });\n */\n\n/**\n * This event is emitted when activity within the number field has changed such that the possible card type has changed.\n * @event HostedFields#cardTypeChange\n * @type {HostedFields~stateObject}\n * @example\n * <caption>Listening to a cardTypeChange event</caption>\n * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {\n *   hostedFieldsInstance.on('cardTypeChange', function (event) {\n *     if (event.cards.length === 1) {\n *       console.log(event.cards[0].type);\n *     } else {\n *       console.log('Type of card not yet known');\n *     }\n *   });\n * });\n */\n\n/**\n * This event is emitted when the validity of a field has changed. Validity is represented in the {@link HostedFields~stateObject|stateObject} as two booleans: `isValid` and `isPotentiallyValid`.\n * @event HostedFields#validityChange\n * @type {HostedFields~stateObject}\n * @example\n * <caption>Listening to a validityChange event</caption>\n * hostedFields.create({ ... }, function (createErr, hostedFieldsInstance) {\n *   hostedFieldsInstance.on('validityChange', function (event) {\n *     var field = event.fields[event.emittedBy];\n *\n *     if (field.isValid) {\n *       console.log(event.emittedBy, 'is fully valid');\n *     } else if (field.isPotentiallyValid) {\n *       console.log(event.emittedBy, 'is potentially valid');\n *     } else {\n *       console.log(event.emittedBy, 'is not valid');\n *     }\n *   });\n * });\n */\n\nfunction createInputEventHandler(fields) {\n  return function (eventData) {\n    var field;\n    var merchantPayload = eventData.merchantPayload;\n    var emittedBy = merchantPayload.emittedBy;\n    var container = fields[emittedBy].containerElement;\n\n    Object.keys(merchantPayload.fields).forEach(function (key) {\n      merchantPayload.fields[key].container = fields[key].containerElement;\n    });\n\n    field = merchantPayload.fields[emittedBy];\n\n    if (eventData.type === 'blur') {\n      performBlurFixForIos(container);\n    }\n\n    classList.toggle(container, constants.externalClasses.FOCUSED, field.isFocused);\n    classList.toggle(container, constants.externalClasses.VALID, field.isValid);\n    classList.toggle(container, constants.externalClasses.INVALID, !field.isPotentiallyValid);\n\n    this._state = { // eslint-disable-line no-invalid-this\n      cards: merchantPayload.cards,\n      fields: merchantPayload.fields\n    };\n\n    this._emit(eventData.type, merchantPayload); // eslint-disable-line no-invalid-this\n  };\n}\n\n// iOS Safari has a bug where inputs in iframes\n// will not dismiss the keyboard when they lose\n// focus. We create a hidden button input that we\n// can focus on and blur to force the keyboard to\n// dismiss. See #229\nfunction performBlurFixForIos(container) {\n  var hiddenInput;\n\n  if (!browserDetection.isIos()) {\n    return;\n  }\n\n  if (document.activeElement === document.body) {\n    hiddenInput = container.querySelector('input');\n\n    if (!hiddenInput) {\n      hiddenInput = document.createElement('input');\n\n      hiddenInput.type = 'button';\n      hiddenInput.style.height = '0px';\n      hiddenInput.style.width = '0px';\n      hiddenInput.style.opacity = '0';\n      hiddenInput.style.padding = '0';\n      hiddenInput.style.position = 'absolute';\n      hiddenInput.style.left = '-200%';\n      hiddenInput.style.top = '0px';\n\n      container.insertBefore(hiddenInput, container.firstChild);\n    }\n\n    hiddenInput.focus();\n    hiddenInput.blur();\n  }\n}\n\n/**\n * @class HostedFields\n * @param {object} options The Hosted Fields {@link module:braintree-web/hosted-fields.create create} options.\n * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/hosted-fields.create|braintree-web.hosted-fields.create} instead.</strong>\n * @classdesc This class represents a Hosted Fields component produced by {@link module:braintree-web/hosted-fields.create|braintree-web/hosted-fields.create}. Instances of this class have methods for interacting with the input fields within Hosted Fields' iframes.\n */\nfunction HostedFields(options) {\n  var failureTimeout, clientConfig, assetsUrl, isDebug, hostedFieldsUrl;\n  var self = this;\n  var fields = {};\n  var busOptions = assign({}, options);\n  var frameReadyPromiseResolveFunctions = {};\n  var frameReadyPromises = [];\n  var componentId = uuid();\n\n  if (options.client) {\n    clientConfig = options.client.getConfiguration();\n    assetsUrl = clientConfig.gatewayConfiguration.assetsUrl;\n    isDebug = clientConfig.isDebug;\n  } else {\n    assetsUrl = createAssetsUrl.create(options.authorization);\n    isDebug = Boolean(options.isDebug);\n  }\n\n  this._clientPromise = createDeferredClient.create({\n    client: options.client,\n    authorization: options.authorization,\n    debug: isDebug,\n    assetsUrl: assetsUrl,\n    name: 'Hosted Fields'\n  });\n\n  hostedFieldsUrl = composeUrl(assetsUrl, componentId, isDebug);\n\n  if (!options.fields || Object.keys(options.fields).length === 0) {\n    throw new BraintreeError({\n      type: sharedErrors.INSTANTIATION_OPTION_REQUIRED.type,\n      code: sharedErrors.INSTANTIATION_OPTION_REQUIRED.code,\n      message: 'options.fields is required when instantiating Hosted Fields.'\n    });\n  }\n\n  EventEmitter.call(this);\n\n  this._injectedNodes = [];\n  this._destructor = new Destructor();\n  this._fields = fields;\n  this._state = {\n    fields: {},\n    cards: getCardTypes('')\n  };\n\n  this._bus = new Bus({\n    channel: componentId,\n    merchantUrl: location.href\n  });\n\n  this._destructor.registerFunctionForTeardown(function () {\n    self._bus.teardown();\n  });\n\n  analytics.sendEvent(this._clientPromise, 'custom.hosted-fields.initialized');\n\n  Object.keys(options.fields).forEach(function (key) {\n    var field, container, frame, frameReadyPromise;\n\n    if (!constants.allowedFields.hasOwnProperty(key)) {\n      throw new BraintreeError({\n        type: errors.HOSTED_FIELDS_INVALID_FIELD_KEY.type,\n        code: errors.HOSTED_FIELDS_INVALID_FIELD_KEY.code,\n        message: '\"' + key + '\" is not a valid field.'\n      });\n    }\n\n    field = options.fields[key];\n\n    container = document.querySelector(field.selector);\n\n    if (!container) {\n      throw new BraintreeError({\n        type: errors.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.type,\n        code: errors.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.code,\n        message: errors.HOSTED_FIELDS_INVALID_FIELD_SELECTOR.message,\n        details: {\n          fieldSelector: field.selector,\n          fieldKey: key\n        }\n      });\n    } else if (container.querySelector('iframe[name^=\"braintree-\"]')) {\n      throw new BraintreeError({\n        type: errors.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.type,\n        code: errors.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.code,\n        message: errors.HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME.message,\n        details: {\n          fieldSelector: field.selector,\n          fieldKey: key\n        }\n      });\n    }\n\n    if (field.maxlength && typeof field.maxlength !== 'number') {\n      throw new BraintreeError({\n        type: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.type,\n        code: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.code,\n        message: 'The value for maxlength must be a number.',\n        details: {\n          fieldKey: key\n        }\n      });\n    }\n\n    if (field.minlength && typeof field.minlength !== 'number') {\n      throw new BraintreeError({\n        type: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.type,\n        code: errors.HOSTED_FIELDS_FIELD_PROPERTY_INVALID.code,\n        message: 'The value for minlength must be a number.',\n        details: {\n          fieldKey: key\n        }\n      });\n    }\n\n    frame = iFramer({\n      type: key,\n      name: 'braintree-hosted-field-' + key,\n      style: constants.defaultIFrameStyle,\n      title: 'Secure Credit Card Frame - ' + constants.allowedFields[key].label\n    });\n\n    this._injectedNodes.push.apply(this._injectedNodes, injectFrame(frame, container));\n    this._setupLabelFocus(key, container);\n    fields[key] = {\n      frameElement: frame,\n      containerElement: container\n    };\n    frameReadyPromise = new Promise(function (resolve) {\n      frameReadyPromiseResolveFunctions[key] = resolve;\n    });\n    frameReadyPromises.push(frameReadyPromise);\n\n    this._state.fields[key] = {\n      isEmpty: true,\n      isValid: false,\n      isPotentiallyValid: true,\n      isFocused: false,\n      container: container\n    };\n\n    setTimeout(function () {\n      // Edge has an intermittent issue where\n      // the iframes load, but the JavaScript\n      // can't message out to the parent page.\n      // We can fix this by setting the src\n      // to about:blank first followed by\n      // the actual source. Both instances\n      // of setting the src need to be in a\n      // setTimeout to work.\n      if (browserDetection.isIE() || browserDetection.isEdge()) {\n        frame.src = 'about:blank';\n        setTimeout(function () {\n          frame.src = hostedFieldsUrl;\n        }, 0);\n      } else {\n        frame.src = hostedFieldsUrl;\n      }\n    }, 0);\n  }.bind(this));\n\n  if (busOptions.styles) {\n    Object.keys(busOptions.styles).forEach(function (selector) {\n      var className = busOptions.styles[selector];\n\n      if (typeof className === 'string') {\n        busOptions.styles[selector] = getStylesFromClass(className);\n      }\n    });\n  }\n\n  this._bus.on(events.READY_FOR_CLIENT, function (reply) {\n    self._clientPromise.then(function (client) {\n      reply(client);\n    });\n  });\n\n  failureTimeout = setTimeout(function () {\n    analytics.sendEvent(self._clientPromise, 'custom.hosted-fields.load.timed-out');\n    self._emit('timeout');\n  }, INTEGRATION_TIMEOUT_MS);\n\n  Promise.all(frameReadyPromises).then(function (results) {\n    var reply = results[0];\n\n    clearTimeout(failureTimeout);\n    reply(busOptions);\n    self._emit('ready');\n  });\n\n  this._bus.on(events.FRAME_READY, function (data, reply) {\n    frameReadyPromiseResolveFunctions[data.field](reply);\n  });\n\n  this._bus.on(\n    events.INPUT_EVENT,\n    createInputEventHandler(fields).bind(this)\n  );\n\n  this._destructor.registerFunctionForTeardown(function () {\n    var j, node, parent;\n\n    for (j = 0; j < self._injectedNodes.length; j++) {\n      node = self._injectedNodes[j];\n      parent = node.parentNode;\n\n      parent.removeChild(node);\n\n      classList.remove(\n        parent,\n        constants.externalClasses.FOCUSED,\n        constants.externalClasses.INVALID,\n        constants.externalClasses.VALID\n      );\n    }\n  });\n\n  this._destructor.registerFunctionForTeardown(function () {\n    var methodNames = methods(HostedFields.prototype).concat(methods(EventEmitter.prototype));\n\n    convertMethodsToError(self, methodNames);\n  });\n}\n\nHostedFields.prototype = Object.create(EventEmitter.prototype, {\n  constructor: HostedFields\n});\n\nHostedFields.prototype._setupLabelFocus = function (type, container) {\n  var labels, i;\n  var shouldSkipLabelFocus = browserDetection.isIos();\n  var bus = this._bus;\n\n  if (shouldSkipLabelFocus) { return; }\n  if (container.id == null) { return; }\n\n  function triggerFocus() {\n    bus.emit(events.TRIGGER_INPUT_FOCUS, type);\n  }\n\n  labels = Array.prototype.slice.call(document.querySelectorAll('label[for=\"' + container.id + '\"]'));\n  labels = labels.concat(findParentTags(container, 'label'));\n\n  for (i = 0; i < labels.length; i++) {\n    labels[i].addEventListener('click', triggerFocus, false);\n  }\n\n  this._destructor.registerFunctionForTeardown(function () {\n    for (i = 0; i < labels.length; i++) {\n      labels[i].removeEventListener('click', triggerFocus, false);\n    }\n  });\n};\n\nHostedFields.prototype._attachInvalidFieldContainersToError = function (err) {\n  if (!(err.details && err.details.invalidFieldKeys && err.details.invalidFieldKeys.length > 0)) {\n    return;\n  }\n  err.details.invalidFields = {};\n  err.details.invalidFieldKeys.forEach(function (field) {\n    err.details.invalidFields[field] = this._fields[field].containerElement;\n  }.bind(this));\n};\n\n/**\n * Cleanly remove anything set up by {@link module:braintree-web/hosted-fields.create|create}.\n * @public\n * @param {callback} [callback] Called on completion, containing an error if one occurred. No data is returned if teardown completes successfully. If no callback is provided, `teardown` returns a promise.\n * @example\n * hostedFieldsInstance.teardown(function (teardownErr) {\n *   if (teardownErr) {\n *     console.error('Could not tear down Hosted Fields!');\n *   } else {\n *     console.info('Hosted Fields has been torn down!');\n *   }\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nHostedFields.prototype.teardown = function () {\n  var self = this;\n\n  return new Promise(function (resolve, reject) {\n    self._destructor.teardown(function (err) {\n      analytics.sendEvent(self._clientPromise, 'custom.hosted-fields.teardown-completed');\n\n      if (err) {\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n/**\n * Tokenizes fields and returns a nonce payload.\n * @public\n * @param {object} [options] All tokenization options for the Hosted Fields component.\n * @param {boolean} [options.vault=false] When true, will vault the tokenized card. Cards will only be vaulted when using a client created with a client token that includes a customer ID.\n * @param {string} [options.cardholderName] When supplied, the cardholder name to be tokenized with the contents of the fields.\n * @param {string} [options.billingAddress.postalCode] When supplied, this postal code will be tokenized along with the contents of the fields. If a postal code is provided as part of the Hosted Fields configuration, the value of the field will be tokenized and this value will be ignored.\n * @param {string} [options.billingAddress.firstName] When supplied, this customer first name will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.lastName] When supplied, this customer last name will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.company] When supplied, this company name will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.streetAddress] When supplied, this street address will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.extendedAddress] When supplied, this extended address will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.locality] When supplied, this locality (the city) will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.region] When supplied, this region (the state) will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.countryCodeNumeric] When supplied, this numeric country code will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.countryCodeAlpha2] When supplied, this alpha 2 representation of a country will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.countryCodeAlpha3] When supplied, this alpha 3 representation of a country will be tokenized along with the contents of the fields.\n * @param {string} [options.billingAddress.countryName] When supplied, this country name will be tokenized along with the contents of the fields.\n *\n * @param {callback} [callback] The second argument, <code>data</code>, is a {@link HostedFields~tokenizePayload|tokenizePayload}. If no callback is provided, `tokenize` returns a function that resolves with a {@link HostedFields~tokenizePayload|tokenizePayload}.\n * @example <caption>Tokenize a card</caption>\n * hostedFieldsInstance.tokenize(function (tokenizeErr, payload) {\n *   if (tokenizeErr) {\n *     switch (tokenizeErr.code) {\n *       case 'HOSTED_FIELDS_FIELDS_EMPTY':\n *         // occurs when none of the fields are filled in\n *         console.error('All fields are empty! Please fill out the form.');\n *         break;\n *       case 'HOSTED_FIELDS_FIELDS_INVALID':\n *         // occurs when certain fields do not pass client side validation\n *         console.error('Some fields are invalid:', tokenizeErr.details.invalidFieldKeys);\n *\n *         // you can also programtically access the field containers for the invalid fields\n *         tokenizeErr.details.invalidFields.forEach(function (fieldContainer) {\n *           fieldContainer.className = 'invalid';\n *         });\n *         break;\n *       case 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE':\n *         // occurs when:\n *         //   * the client token used for client authorization was generated\n *         //     with a customer ID and the fail on duplicate payment method\n *         //     option is set to true\n *         //   * the card being tokenized has previously been vaulted (with any customer)\n *         // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.fail_on_duplicate_payment_method\n *         console.error('This payment method already exists in your vault.');\n *         break;\n *       case 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED':\n *         // occurs when:\n *         //   * the client token used for client authorization was generated\n *         //     with a customer ID and the verify card option is set to true\n *         //     and you have credit card verification turned on in the Braintree\n *         //     control panel\n *         //   * the cvv does not pass verfication (https://developers.braintreepayments.com/reference/general/testing/#avs-and-cvv/cid-responses)\n *         // See: https://developers.braintreepayments.com/reference/request/client-token/generate/#options.verify_card\n *         console.error('CVV did not pass verification');\n *         break;\n *       case 'HOSTED_FIELDS_FAILED_TOKENIZATION':\n *         // occurs for any other tokenization error on the server\n *         console.error('Tokenization failed server side. Is the card valid?');\n *         break;\n *       case 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR':\n *         // occurs when the Braintree gateway cannot be contacted\n *         console.error('Network error occurred when tokenizing.');\n *         break;\n *       default:\n *         console.error('Something bad happened!', tokenizeErr);\n *     }\n *   } else {\n *     console.log('Got nonce:', payload.nonce);\n *   }\n * });\n * @example <caption>Tokenize and vault a card</caption>\n * hostedFieldsInstance.tokenize({\n *   vault: true\n * }, function (tokenizeErr, payload) {\n *   if (tokenizeErr) {\n *     console.error(tokenizeErr);\n *   } else {\n *     console.log('Got nonce:', payload.nonce);\n *   }\n * });\n * @example <caption>Tokenize a card with cardholder name</caption>\n * hostedFieldsInstance.tokenize({\n *   cardholderName: 'First Last'\n * }, function (tokenizeErr, payload) {\n *   if (tokenizeErr) {\n *     console.error(tokenizeErr);\n *   } else {\n *     console.log('Got nonce:', payload.nonce);\n *   }\n * });\n * @example <caption>Tokenize a card with the postal code option</caption>\n * hostedFieldsInstance.tokenize({\n *   billingAddress: {\n *     postalCode: '11111'\n *   }\n * }, function (tokenizeErr, payload) {\n *   if (tokenizeErr) {\n *     console.error(tokenizeErr);\n *   } else {\n *     console.log('Got nonce:', payload.nonce);\n *   }\n * });\n * @example <caption>Tokenize a card with additional billing address options</caption>\n * hostedFieldsInstance.tokenize({\n *   billingAddress: {\n *     firstName: 'First',\n *     lastName: 'Last',\n *     company: 'Company',\n *     streetAddress: '123 Street',\n *     extendedAddress: 'Unit 1',\n *     // passing just one of the country options is sufficient to\n *     // associate the card details with a particular country\n *     // valid country names and codes can be found here:\n *     // https://developers.braintreepayments.com/reference/general/countries/ruby#list-of-countries\n *     countryName: 'United States',\n *     countryCodeAlpha2: 'US',\n *     countryCodeAlpha3: 'USA',\n *     countryCodeNumeric: '840'\n *   }\n * }, function (tokenizeErr, payload) {\n *   if (tokenizeErr) {\n *     console.error(tokenizeErr);\n *   } else {\n *     console.log('Got nonce:', payload.nonce);\n *   }\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nHostedFields.prototype.tokenize = function (options) {\n  var self = this;\n\n  if (!options) {\n    options = {};\n  }\n\n  return new Promise(function (resolve, reject) {\n    self._bus.emit(events.TOKENIZATION_REQUEST, options, function (response) {\n      var err = response[0];\n      var payload = response[1];\n\n      if (err) {\n        self._attachInvalidFieldContainersToError(err);\n        reject(new BraintreeError(err));\n      } else {\n        resolve(payload);\n      }\n    });\n  });\n};\n\n/**\n * Add a class to a {@link module:braintree-web/hosted-fields~field field}. Useful for updating field styles when events occur elsewhere in your checkout.\n * @public\n * @param {string} field The field you wish to add a class to. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.\n * @param {string} classname The class to be added.\n * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the class is added successfully.\n *\n * @example\n * hostedFieldsInstance.addClass('number', 'custom-class', function (addClassErr) {\n *   if (addClassErr) {\n *     console.error(addClassErr);\n *   }\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nHostedFields.prototype.addClass = function (field, classname) {\n  var err;\n\n  if (!allowedFields.hasOwnProperty(field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_INVALID.type,\n      code: errors.HOSTED_FIELDS_FIELD_INVALID.code,\n      message: '\"' + field + '\" is not a valid field. You must use a valid field option when adding a class.'\n    });\n  } else if (!this._fields.hasOwnProperty(field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,\n      code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,\n      message: 'Cannot add class to \"' + field + '\" field because it is not part of the current Hosted Fields options.'\n    });\n  } else {\n    this._bus.emit(events.ADD_CLASS, field, classname);\n  }\n\n  if (err) {\n    return Promise.reject(err);\n  }\n\n  return Promise.resolve();\n};\n\n/**\n * Removes a class to a {@link module:braintree-web/hosted-fields~field field}. Useful for updating field styles when events occur elsewhere in your checkout.\n * @public\n * @param {string} field The field you wish to remove a class from. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.\n * @param {string} classname The class to be removed.\n * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the class is removed successfully.\n *\n * @example\n * hostedFieldsInstance.addClass('number', 'custom-class', function (addClassErr) {\n *   if (addClassErr) {\n *     console.error(addClassErr);\n *     return;\n *   }\n *\n *   // some time later...\n *   hostedFieldsInstance.removeClass('number', 'custom-class');\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nHostedFields.prototype.removeClass = function (field, classname) {\n  var err;\n\n  if (!allowedFields.hasOwnProperty(field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_INVALID.type,\n      code: errors.HOSTED_FIELDS_FIELD_INVALID.code,\n      message: '\"' + field + '\" is not a valid field. You must use a valid field option when removing a class.'\n    });\n  } else if (!this._fields.hasOwnProperty(field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,\n      code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,\n      message: 'Cannot remove class from \"' + field + '\" field because it is not part of the current Hosted Fields options.'\n    });\n  } else {\n    this._bus.emit(events.REMOVE_CLASS, field, classname);\n  }\n\n  if (err) {\n    return Promise.reject(err);\n  }\n\n  return Promise.resolve();\n};\n\n/**\n * Sets an attribute of a {@link module:braintree-web/hosted-fields~field field}.\n * Supported attributes are `aria-invalid`, `aria-required`, `disabled`, and `placeholder`.\n *\n * @public\n * @param {object} options The options for the attribute you wish to set.\n * @param {string} options.field The field to which you wish to add an attribute. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.\n * @param {string} options.attribute The name of the attribute you wish to add to the field.\n * @param {string} options.value The value for the attribute.\n * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the attribute is set successfully.\n *\n * @example <caption>Set the placeholder attribute of a field</caption>\n * hostedFieldsInstance.setAttribute({\n *   field: 'number',\n *   attribute: 'placeholder',\n *   value: '1111 1111 1111 1111'\n * }, function (attributeErr) {\n *   if (attributeErr) {\n *     console.error(attributeErr);\n *   }\n * });\n *\n * @example <caption>Set the aria-required attribute of a field</caption>\n * hostedFieldsInstance.setAttribute({\n *   field: 'number',\n *   attribute: 'aria-required',\n *   value: true\n * }, function (attributeErr) {\n *   if (attributeErr) {\n *     console.error(attributeErr);\n *   }\n * });\n *\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nHostedFields.prototype.setAttribute = function (options) {\n  var attributeErr, err;\n\n  if (!allowedFields.hasOwnProperty(options.field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_INVALID.type,\n      code: errors.HOSTED_FIELDS_FIELD_INVALID.code,\n      message: '\"' + options.field + '\" is not a valid field. You must use a valid field option when setting an attribute.'\n    });\n  } else if (!this._fields.hasOwnProperty(options.field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,\n      code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,\n      message: 'Cannot set attribute for \"' + options.field + '\" field because it is not part of the current Hosted Fields options.'\n    });\n  } else {\n    attributeErr = attributeValidationError(options.attribute, options.value);\n\n    if (attributeErr) {\n      err = attributeErr;\n    } else {\n      this._bus.emit(events.SET_ATTRIBUTE, options.field, options.attribute, options.value);\n    }\n  }\n\n  if (err) {\n    return Promise.reject(err);\n  }\n\n  return Promise.resolve();\n};\n\n/**\n * Sets a visually hidden message (for screenreaders) on a {@link module:braintree-web/hosted-fields~field field}.\n *\n * @public\n * @param {object} options The options for the attribute you wish to set.\n * @param {string} options.field The field to which you wish to add an attribute. Must be a valid {@link module:braintree-web/hosted-fields~field field}.\n * @param {string} options.message The message to set.\n *\n * @example <caption>Set an error message on a field</caption>\n * hostedFieldsInstance.setMessage({\n *   field: 'number',\n *   message: 'Invalid card number'\n * });\n *\n * @example <caption>Remove the message on a field</caption>\n * hostedFieldsInstance.setMessage({\n *   field: 'number',\n *   message: ''\n * });\n *\n * @returns {void}\n */\nHostedFields.prototype.setMessage = function (options) {\n  this._bus.emit(events.SET_MESSAGE, options.field, options.message);\n};\n\n/**\n * Removes a supported attribute from a {@link module:braintree-web/hosted-fields~field field}.\n *\n * @public\n * @param {object} options The options for the attribute you wish to remove.\n * @param {string} options.field The field from which you wish to remove an attribute. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.\n * @param {string} options.attribute The name of the attribute you wish to remove from the field.\n * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the attribute is removed successfully.\n *\n * @example <caption>Remove the placeholder attribute of a field</caption>\n * hostedFieldsInstance.removeAttribute({\n *   field: 'number',\n *   attribute: 'placeholder'\n * }, function (attributeErr) {\n *   if (attributeErr) {\n *     console.error(attributeErr);\n *   }\n * });\n *\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nHostedFields.prototype.removeAttribute = function (options) {\n  var attributeErr, err;\n\n  if (!allowedFields.hasOwnProperty(options.field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_INVALID.type,\n      code: errors.HOSTED_FIELDS_FIELD_INVALID.code,\n      message: '\"' + options.field + '\" is not a valid field. You must use a valid field option when removing an attribute.'\n    });\n  } else if (!this._fields.hasOwnProperty(options.field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,\n      code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,\n      message: 'Cannot remove attribute for \"' + options.field + '\" field because it is not part of the current Hosted Fields options.'\n    });\n  } else {\n    attributeErr = attributeValidationError(options.attribute);\n\n    if (attributeErr) {\n      err = attributeErr;\n    } else {\n      this._bus.emit(events.REMOVE_ATTRIBUTE, options.field, options.attribute);\n    }\n  }\n\n  if (err) {\n    return Promise.reject(err);\n  }\n\n  return Promise.resolve();\n};\n\n/**\n * @deprecated since version 3.8.0. Use {@link HostedFields#setAttribute|setAttribute} instead.\n *\n * @public\n * @param {string} field The field whose placeholder you wish to change. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.\n * @param {string} placeholder Will be used as the `placeholder` attribute of the input.\n * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the placeholder updated successfully.\n *\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nHostedFields.prototype.setPlaceholder = function (field, placeholder) {\n  return this.setAttribute({\n    field: field,\n    attribute: 'placeholder',\n    value: placeholder\n  });\n};\n\n/**\n * Clear the value of a {@link module:braintree-web/hosted-fields~field field}.\n * @public\n * @param {string} field The field you wish to clear. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.\n * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the field cleared successfully.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * hostedFieldsInstance.clear('number', function (clearErr) {\n *   if (clearErr) {\n *     console.error(clearErr);\n *   }\n * });\n *\n * @example <caption>Clear several fields</caption>\n * hostedFieldsInstance.clear('number');\n * hostedFieldsInstance.clear('cvv');\n * hostedFieldsInstance.clear('expirationDate');\n */\nHostedFields.prototype.clear = function (field) {\n  var err;\n\n  if (!allowedFields.hasOwnProperty(field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_INVALID.type,\n      code: errors.HOSTED_FIELDS_FIELD_INVALID.code,\n      message: '\"' + field + '\" is not a valid field. You must use a valid field option when clearing a field.'\n    });\n  } else if (!this._fields.hasOwnProperty(field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,\n      code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,\n      message: 'Cannot clear \"' + field + '\" field because it is not part of the current Hosted Fields options.'\n    });\n  } else {\n    this._bus.emit(events.CLEAR_FIELD, field);\n  }\n\n  if (err) {\n    return Promise.reject(err);\n  }\n\n  return Promise.resolve();\n};\n\n/**\n * Programmatically focus a {@link module:braintree-web/hosted-fields~field field}.\n * @public\n * @param {string} field The field you want to focus. Must be a valid {@link module:braintree-web/hosted-fields~fieldOptions fieldOption}.\n * @param {callback} [callback] Callback executed on completion, containing an error if one occurred. No data is returned if the field focused successfully.\n * @returns {void}\n * @example\n * hostedFieldsInstance.focus('number', function (focusErr) {\n *   if (focusErr) {\n *     console.error(focusErr);\n *   }\n * });\n * @example <caption>Using an event listener</caption>\n * myElement.addEventListener('click', function (e) {\n *   // In Firefox, the focus method can be suppressed\n *   //   if the element has a tabindex property or the element\n *   //   is an anchor link with an href property.\n *   // In Mobile Safari, the focus method is unable to\n *   //   programatically open the keyboard, as only\n *   //   touch events are allowed to do so.\n *   e.preventDefault();\n *   hostedFieldsInstance.focus('number');\n * });\n */\nHostedFields.prototype.focus = function (field) {\n  var err;\n\n  if (!allowedFields.hasOwnProperty(field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_INVALID.type,\n      code: errors.HOSTED_FIELDS_FIELD_INVALID.code,\n      message: '\"' + field + '\" is not a valid field. You must use a valid field option when focusing a field.'\n    });\n  } else if (!this._fields.hasOwnProperty(field)) {\n    err = new BraintreeError({\n      type: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.type,\n      code: errors.HOSTED_FIELDS_FIELD_NOT_PRESENT.code,\n      message: 'Cannot focus \"' + field + '\" field because it is not part of the current Hosted Fields options.'\n    });\n  } else {\n    this._bus.emit(events.TRIGGER_INPUT_FOCUS, field);\n  }\n\n  if (err) {\n    return Promise.reject(err);\n  }\n\n  return Promise.resolve();\n};\n\n/**\n * Returns an {@link HostedFields~stateObject|object} that includes the state of all fields and possible card types.\n * @public\n * @returns {object} {@link HostedFields~stateObject|stateObject}\n * @example <caption>Check if all fields are valid</caption>\n * var state = hostedFieldsInstance.getState();\n *\n * var formValid = Object.keys(state.fields).every(function (key) {\n *   return state.fields[key].isValid;\n * });\n */\nHostedFields.prototype.getState = function () {\n  return this._state;\n};\n\nmodule.exports = wrapPromise.wrapPrototype(HostedFields);\n\n},{\"../../lib/analytics\":67,\"../../lib/assign\":69,\"../../lib/braintree-error\":72,\"../../lib/bus\":75,\"../../lib/constants\":76,\"../../lib/convert-methods-to-error\":77,\"../../lib/create-assets-url\":79,\"../../lib/create-deferred-client\":81,\"../../lib/destructor\":83,\"../../lib/errors\":85,\"../../lib/event-emitter\":86,\"../../lib/methods\":93,\"../../lib/promise\":95,\"../../lib/vendor/uuid\":99,\"../shared/browser-detection\":61,\"../shared/constants\":62,\"../shared/errors\":63,\"../shared/find-parent-tags\":64,\"../shared/get-card-types\":65,\"./attribute-validation-error\":55,\"./compose-url\":56,\"./get-styles-from-class\":57,\"./inject-frame\":59,\"@braintree/class-list\":18,\"@braintree/iframer\":19,\"@braintree/wrap-promise\":26}],59:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function injectFrame(frame, container) {\n  var clearboth = document.createElement('div');\n  var fragment = document.createDocumentFragment();\n\n  clearboth.style.clear = 'both';\n\n  fragment.appendChild(frame);\n  fragment.appendChild(clearboth);\n\n  container.appendChild(fragment);\n\n  return [frame, clearboth];\n};\n\n},{}],60:[function(require,module,exports){\n'use strict';\n/** @module braintree-web/hosted-fields */\n\nvar HostedFields = require('./external/hosted-fields');\nvar basicComponentVerification = require('../lib/basic-component-verification');\nvar errors = require('./shared/errors');\nvar supportsInputFormatting = require('restricted-input/supports-input-formatting');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar BraintreeError = require('../lib/braintree-error');\nvar Promise = require('../lib/promise');\nvar VERSION = \"3.42.0\";\n\n/**\n * Fields used in {@link module:braintree-web/hosted-fields~fieldOptions fields options}\n * @typedef {object} field\n * @property {string} selector A CSS selector to find the container where the hosted field will be inserted.\n * @property {string} [placeholder] Will be used as the `placeholder` attribute of the input. If `placeholder` is not natively supported by the browser, it will be polyfilled.\n * @property {string} [type] Will be used as the `type` attribute of the input. To mask `cvv` input, for instance, `type: \"password\"` can be used.\n * @property {boolean} [formatInput=true] Enable or disable automatic formatting on this field.\n * @property {object|boolean} [maskInput=false] Enable or disable input masking when input is not focused. If set to `true` instead of an object, the defaults for the `maskInput` parameters will be used.\n * @property {string} [maskInput.character=•] The character to use when masking the input. The default character ('•') uses a unicode symbol, so the webpage must support UTF-8 characters when using the default.\n * @property {Boolean} [maskInput.showLastFour=false] Only applicable for the credit card field. Whether or not to show the last 4 digits of the card when masking.\n * @property {object|boolean} [select] If truthy, this field becomes a `<select>` dropdown list. This can only be used for `expirationMonth` and `expirationYear` fields. If you do not use a `placeholder` property for the field, the current month/year will be the default selected value.\n * @property {string[]} [select.options] An array of 12 strings, one per month. This can only be used for the `expirationMonth` field. For example, the array can look like `['01 - January', '02 - February', ...]`.\n * @property {number} [maxCardLength] This option applies only to the number field. Allows a limit to the length of the card number, even if the card brand may support numbers of a greater length. If the value passed is greater than the max length for a card brand, the smaller number of the 2 values will be used. For example, is `maxCardLength` is set to 16, but an American Express card is entered (which has a max card length of 15), a max card length of 15 will be used.\n * @property {number} [maxlength] This option applies only to the CVV and postal code fields. Will be used as the `maxlength` attribute of the input if it is less than the default. The primary use cases for the `maxlength` option are: limiting the length of the CVV input for CVV-only verifications when the card type is known and limiting the length of the postal code input when cards are coming from a known region.\n * @property {number} [minlength=3] This option applies only to the cvv and postal code fields. Will be used as the `minlength` attribute of the input.\n * For postal code fields, the default value is 3, representing the Icelandic postal code length. This option's primary use case is to increase the `minlength`, e.g. for US customers, the postal code `minlength` can be set to 5.\n * For cvv fields, the default value is 3. The `minlength` attribute only applies to integrations capturing a cvv without a number field.\n * @property {string} [prefill] A value to prefill the field with. For example, when creating an update card form, you can prefill the expiration date fields with the old expiration date data.\n * @property {boolean} [rejectUnsupportedCards=false] Only allow card types that your merchant account is able to process. Unsupported card types will invalidate the card form. e.g. if you only process Visa cards, a customer entering a American Express card would get an invalid card field. This can only be used for the `number` field.\n */\n\n/**\n * An object that has {@link module:braintree-web/hosted-fields~field field objects} for each field. Used in {@link module:braintree-web/hosted-fields~create create}.\n * @typedef {object} fieldOptions\n * @property {field} [number] A field for card number.\n * @property {field} [expirationDate] A field for expiration date in `MM/YYYY` format. This should not be used with the `expirationMonth` and `expirationYear` properties.\n * @property {field} [expirationMonth] A field for expiration month in `MM` format. This should be used with the `expirationYear` property.\n * @property {field} [expirationYear] A field for expiration year in `YYYY` format. This should be used with the `expirationMonth` property.\n * @property {field} [cvv] A field for 3 or 4 digit card verification code (like CVV or CID). If you wish to create a CVV-only payment method nonce to verify a card already stored in your Vault, omit all other fields to only collect CVV.\n * @property {field} [postalCode] A field for postal or region code.\n */\n\n/**\n * An object that represents CSS that will be applied in each hosted field. This object looks similar to CSS. Typically, these styles involve fonts (such as `font-family` or `color`).\n *\n * You may also pass the name of a class on your site that contains the styles you would like to apply. The style properties will be automatically pulled off the class and applied to the Hosted Fields inputs. Note: this is recomended for `input` elements only. If using a `select` for the expiration date, unexpected styling may occur.\n *\n * These are the CSS properties that Hosted Fields supports. Any other CSS should be specified on your page and outside of any Braintree configuration. Trying to set unsupported properties will fail and put a warning in the console.\n *\n * Supported CSS properties are:\n * `appearance`\n * `color`\n * `direction`\n * `font-family`\n * `font-size-adjust`\n * `font-size`\n * `font-stretch`\n * `font-style`\n * `font-variant-alternates`\n * `font-variant-caps`\n * `font-variant-east-asian`\n * `font-variant-ligatures`\n * `font-variant-numeric`\n * `font-variant`\n * `font-weight`\n * `font`\n * `letter-spacing`\n * `line-height`\n * `opacity`\n * `outline`\n * `padding`\n * `text-shadow`\n * `transition`\n * `-moz-appearance`\n * `-moz-osx-font-smoothing`\n * `-moz-tap-highlight-color`\n * `-moz-transition`\n * `-webkit-appearance`\n * `-webkit-font-smoothing`\n * `-webkit-tap-highlight-color`\n * `-webkit-transition`\n * @typedef {object} styleOptions\n */\n\n/**\n * @static\n * @function create\n * @param {object} options Creation options:\n * @param {Client} [options.client] A {@link Client} instance.\n * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.\n * @param {fieldOptions} options.fields A {@link module:braintree-web/hosted-fields~fieldOptions set of options for each field}.\n * @param {styleOptions} [options.styles] {@link module:braintree-web/hosted-fields~styleOptions Styles} applied to each field.\n * @param {callback} [callback] The second argument, `data`, is the {@link HostedFields} instance. If no callback is provided, `create` returns a promise that resolves with the {@link HostedFields} instance.\n * @returns {void}\n * @example\n * braintree.hostedFields.create({\n *   client: clientInstance,\n *   styles: {\n *     'input': {\n *       'font-size': '16pt',\n *       'color': '#3A3A3A'\n *     },\n *     '.number': {\n *       'font-family': 'monospace'\n *     },\n *     '.valid': {\n *       'color': 'green'\n *     }\n *   },\n *   fields: {\n *     number: {\n *       selector: '#card-number'\n *     },\n *     cvv: {\n *       selector: '#cvv',\n *       placeholder: '•••'\n *     },\n *     expirationDate: {\n *       selector: '#expiration-date',\n *       type: 'month'\n *     }\n *   }\n * }, callback);\n * @example <caption>Applying styles with a class name</caption>\n * // in document head\n * <style>\n *   .braintree-input-class {\n *     color: black;\n *   }\n *   .braintree-valid-class {\n *     color: green;\n *   }\n *   .braintree-invalid-class {\n *     color: red;\n *   }\n * </style>\n * // in a script tag\n * braintree.hostedFields.create({\n *   client: clientInstance,\n *   styles: {\n *     'input': 'braintree-input-class',\n *     '.invalid': 'braintree-invalid-class',\n *     '.valid': {\n *       // you can also use the object syntax alongside\n *       // the class name syntax\n *       color: green;\n *     }\n *   },\n *   fields: {\n *     number: {\n *       selector: '#card-number'\n *     },\n *     // etc...\n *   }\n * }, callback);\n * @example <caption>Right to Left Language Support</caption>\n * braintree.hostedFields.create({\n *   client: clientInstance,\n *   styles: {\n *     'input': {\n *       // other styles\n *       direction: 'rtl'\n *     },\n *   },\n *   fields: {\n *     number: {\n *       selector: '#card-number',\n *       // Credit card formatting is not currently supported\n *       // with RTL languages, so we need to turn it off for the number input\n *       formatInput: false\n *     },\n *     cvv: {\n *       selector: '#cvv',\n *       placeholder: '•••'\n *     },\n *     expirationDate: {\n *       selector: '#expiration-date',\n *       type: 'month'\n *     }\n *   }\n * }, callback);\n * @example <caption>Setting up Hosted Fields to tokenize CVV only</caption>\n * braintree.hostedFields.create({\n *   client: clientInstance,\n *   fields: {\n *     // Only add the `cvv` option.\n *     cvv: {\n *       selector: '#cvv',\n *       placeholder: '•••'\n *     }\n *   }\n * }, callback);\n * @example <caption>Creating an expiration date update form with prefilled data</caption>\n * var storedCreditCardInformation = {\n *   // get this info from your server\n *   // with a payment method lookup\n *   month: '09',\n *   year: '2017'\n * };\n *\n * braintree.hostedFields.create({\n *   client: clientInstance,\n *   fields: {\n *     expirationMonth: {\n *       selector: '#expiration-month',\n *       prefill: storedCreditCardInformation.month\n *     },\n *     expirationYear: {\n *       selector: '#expiration-year',\n *       prefill: storedCreditCardInformation.year\n *     }\n *   }\n * }, callback);\n * @example <caption>Validate the card form for supported card types</caption>\n * braintree.hostedFields.create({\n *   client: clientInstance,\n *   fields: {\n *     number: {\n *       selector: '#card-number',\n *       rejectUnsupportedCards: true\n *     },\n *     cvv: {\n *       selector: '#cvv',\n *       placeholder: '•••'\n *     },\n *     expirationDate: {\n *       selector: '#expiration-date',\n *       type: 'month'\n *     }\n *   },\n * }, callback);\n */\nfunction create(options) {\n  return basicComponentVerification.verify({\n    name: 'Hosted Fields',\n    authorization: options.authorization,\n    client: options.client\n  }).then(function () {\n    var integration = new HostedFields(options);\n\n    return new Promise(function (resolve, reject) {\n      integration.on('ready', function () {\n        resolve(integration);\n      });\n      integration.on('timeout', function () {\n        reject(new BraintreeError(errors.HOSTED_FIELDS_TIMEOUT));\n      });\n    });\n  });\n}\n\nmodule.exports = {\n  /**\n   * @static\n   * @function supportsInputFormatting\n   * @description Returns false if input formatting will be automatically disabled due to browser incompatibility. Otherwise, returns true. For a list of unsupported browsers, [go here](https://github.com/braintree/restricted-input/blob/master/README.md#browsers-where-formatting-is-turned-off-automatically).\n   * @returns {Boolean} Returns false if input formatting will be automatically disabled due to browser incompatibility. Otherwise, returns true.\n   * @example\n   * <caption>Conditionally choosing split expiration date inputs if formatting is unavailable</caption>\n   * var canFormat = braintree.hostedFields.supportsInputFormatting();\n   * var fields = {\n   *   number: {\n   *     selector: '#card-number'\n   *   },\n   *   cvv: {\n   *     selector: '#cvv'\n   *   }\n   * };\n   *\n   * if (canFormat) {\n   *   fields.expirationDate = {\n   *     selection: '#expiration-date'\n   *   };\n   *   functionToCreateAndInsertExpirationDateDivToForm();\n   * } else {\n   *   fields.expirationMonth = {\n   *     selection: '#expiration-month'\n   *   };\n   *   fields.expirationYear = {\n   *     selection: '#expiration-year'\n   *   };\n   *   functionToCreateAndInsertExpirationMonthAndYearDivsToForm();\n   * }\n   *\n   * braintree.hostedFields.create({\n   *   client: clientInstance,\n   *   styles: {\n   *     // Styles\n   *   },\n   *   fields: fields\n   * }, callback);\n   */\n  supportsInputFormatting: supportsInputFormatting,\n  create: wrapPromise(create),\n  /**\n   * @description The current version of the SDK, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"../lib/basic-component-verification\":70,\"../lib/braintree-error\":72,\"../lib/promise\":95,\"./external/hosted-fields\":58,\"./shared/errors\":63,\"@braintree/wrap-promise\":26,\"restricted-input/supports-input-formatting\":123}],61:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  isIE: require('@braintree/browser-detection/is-ie'),\n  isEdge: require('@braintree/browser-detection/is-edge'),\n  isIe9: require('@braintree/browser-detection/is-ie9'),\n  isIos: require('@braintree/browser-detection/is-ios'),\n  isIosWebview: require('@braintree/browser-detection/is-ios-webview')\n};\n\n},{\"@braintree/browser-detection/is-edge\":7,\"@braintree/browser-detection/is-ie\":8,\"@braintree/browser-detection/is-ie9\":11,\"@braintree/browser-detection/is-ios\":15,\"@braintree/browser-detection/is-ios-webview\":14}],62:[function(require,module,exports){\n'use strict';\n/* eslint-disable no-reserved-keys */\n\nvar enumerate = require('../../lib/enumerate');\nvar errors = require('./errors');\nvar VERSION = \"3.42.0\";\n\nvar constants = {\n  VERSION: VERSION,\n  maxExpirationYearAge: 19,\n  externalEvents: {\n    FOCUS: 'focus',\n    BLUR: 'blur',\n    EMPTY: 'empty',\n    NOT_EMPTY: 'notEmpty',\n    VALIDITY_CHANGE: 'validityChange',\n    CARD_TYPE_CHANGE: 'cardTypeChange'\n  },\n  defaultMaxLengths: {\n    number: 19,\n    postalCode: 8,\n    expirationDate: 7,\n    expirationMonth: 2,\n    expirationYear: 4,\n    cvv: 3\n  },\n  externalClasses: {\n    FOCUSED: 'braintree-hosted-fields-focused',\n    INVALID: 'braintree-hosted-fields-invalid',\n    VALID: 'braintree-hosted-fields-valid'\n  },\n  defaultIFrameStyle: {\n    border: 'none',\n    width: '100%',\n    height: '100%',\n    'float': 'left'\n  },\n  tokenizationErrorCodes: {\n    81724: errors.HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE,\n    81736: errors.HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED\n  },\n  allowedStyles: [\n    '-moz-appearance',\n    '-moz-osx-font-smoothing',\n    '-moz-tap-highlight-color',\n    '-moz-transition',\n    '-webkit-appearance',\n    '-webkit-font-smoothing',\n    '-webkit-tap-highlight-color',\n    '-webkit-transition',\n    'appearance',\n    'color',\n    'direction',\n    'font',\n    'font-family',\n    'font-size',\n    'font-size-adjust',\n    'font-stretch',\n    'font-style',\n    'font-variant',\n    'font-variant-alternates',\n    'font-variant-caps',\n    'font-variant-east-asian',\n    'font-variant-ligatures',\n    'font-variant-numeric',\n    'font-weight',\n    'letter-spacing',\n    'line-height',\n    'padding',\n    'opacity',\n    'outline',\n    'text-shadow',\n    'transition'\n  ],\n  allowedFields: {\n    number: {\n      name: 'credit-card-number',\n      label: 'Credit Card Number'\n    },\n    cvv: {\n      name: 'cvv',\n      label: 'CVV'\n    },\n    expirationDate: {\n      name: 'expiration',\n      label: 'Expiration Date'\n    },\n    expirationMonth: {\n      name: 'expiration-month',\n      label: 'Expiration Month'\n    },\n    expirationYear: {\n      name: 'expiration-year',\n      label: 'Expiration Year'\n    },\n    postalCode: {\n      name: 'postal-code',\n      label: 'Postal Code'\n    }\n  },\n  allowedAttributes: {\n    'aria-invalid': 'boolean',\n    'aria-required': 'boolean',\n    disabled: 'boolean',\n    placeholder: 'string'\n  },\n  autocompleteMappings: {\n    'credit-card-number': 'cc-number',\n    expiration: 'cc-exp',\n    'expiration-month': 'cc-exp-month',\n    'expiration-year': 'cc-exp-year',\n    cvv: 'cc-csc',\n    'postal-code': 'billing postal-code'\n  }\n};\n\nconstants.events = enumerate([\n  'READY_FOR_CLIENT',\n  'FRAME_READY',\n  'VALIDATE_STRICT',\n  'CONFIGURATION',\n  'TOKENIZATION_REQUEST',\n  'INPUT_EVENT',\n  'TRIGGER_INPUT_FOCUS',\n  'ADD_CLASS',\n  'REMOVE_CLASS',\n  'SET_ATTRIBUTE',\n  'REMOVE_ATTRIBUTE',\n  'CLEAR_FIELD',\n  'AUTOFILL_EXPIRATION_DATE',\n  'SET_MESSAGE'\n], 'hosted-fields:');\n\nmodule.exports = constants;\n\n},{\"../../lib/enumerate\":84,\"./errors\":63}],63:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.Hosted Fields - Creation Error Codes\n * @description Errors that occur when [creating the Hosted Fields component](/current/module-braintree-web_hosted-fields.html#.create).\n * @property {UNKNOWN} HOSTED_FIELDS_TIMEOUT Occurs when Hosted Fields does not finish setting up within 60 seconds.\n * @property {MERCHANT} HOSTED_FIELDS_INVALID_FIELD_KEY Occurs when Hosted Fields is instantated with an invalid Field option.\n * @property {MERCHANT} HOSTED_FIELDS_INVALID_FIELD_SELECTOR Occurs when Hosted Fields given a field selector that is not valid.\n * @property {MERCHANT} HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME Occurs when Hosted Fields given a field selector that already contains an iframe.\n * @property {MERCHANT} HOSTED_FIELDS_FIELD_PROPERTY_INVALID Occurs when a field configuration option is not valid.\n */\n\n/**\n * @name BraintreeError.Hosted Fields - Field Manipulation Error Codes\n * @description Errors that occur when modifying fields through [`addClass`](/current/HostedFields.html#addClass), [`removeClass`](/current/HostedFields.html#removeClass), [`setAttribute`](/current/HostedFields.html#setAttribute), [`removeAttribute`](/current/HostedFields.html#removeAttribute), [`clear`](/current/HostedFields.html#clear), and [`focus`](/current/HostedFields.html#focus).\n * @property {MERCHANT} HOSTED_FIELDS_FIELD_INVALID Occurs when attempting to modify a field that is not a valid Hosted Fields option.\n * @property {MERCHANT} HOSTED_FIELDS_FIELD_NOT_PRESENT Occurs when attempting to modify a field that is not configured with Hosted Fields.\n */\n\n/**\n * @name BraintreeError.Hosted Fields - Set Attribtue Error Codes\n * @description Errors that occur when using the [`setAttribtue` method](/current/HostedFields.html#setAttribute)\n * @property {MERCHANT} HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED Occurs when trying to set an attribtue that is not supported to be set.\n * @property {MERCHANT} HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED Occurs when the type of value for an attribue is not allowed to be set.\n */\n\n/**\n * @name BraintreeError.Hosted Fields - Tokenize Error Codes\n * @description Errors that occur when [tokenizing the card details with Hosted Fields](/current/HostedFields.html#tokenize).\n * @property {NETWORK} HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR Occurs when the Braintree gateway cannot be contacted.\n * @property {CUSTOMER} HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE Occurs when attempting to vault a card, but the client token being used is configured to fail if the card already exists in the vault.\n * @property {CUSTOMER} HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED Occurs when cvv verification is turned on in the Braintree control panel.\n * @property {CUSTOMER} HOSTED_FIELDS_FAILED_TOKENIZATION Occurs when the credit card details were sent to Braintree, but failed to tokenize.\n * @property {CUSTOMER} HOSTED_FIELDS_FIELDS_EMPTY Occurs when all the Hosted Fields inputs are empty.\n * @property {CUSTOMER} HOSTED_FIELDS_FIELDS_INVALID Occurs when one ore more fields are invalid.\n */\n\nvar BraintreeError = require('../../lib/braintree-error');\n\nmodule.exports = {\n  HOSTED_FIELDS_TIMEOUT: {\n    type: BraintreeError.types.UNKNOWN,\n    code: 'HOSTED_FIELDS_TIMEOUT',\n    message: 'Hosted Fields timed out when attempting to set up.'\n  },\n  HOSTED_FIELDS_INVALID_FIELD_KEY: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'HOSTED_FIELDS_INVALID_FIELD_KEY'\n  },\n  HOSTED_FIELDS_INVALID_FIELD_SELECTOR: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'HOSTED_FIELDS_INVALID_FIELD_SELECTOR',\n    message: 'Selector does not reference a valid DOM node.'\n  },\n  HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'HOSTED_FIELDS_FIELD_DUPLICATE_IFRAME',\n    message: 'Element already contains a Braintree iframe.'\n  },\n  HOSTED_FIELDS_FIELD_INVALID: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'HOSTED_FIELDS_FIELD_INVALID'\n  },\n  HOSTED_FIELDS_FIELD_NOT_PRESENT: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'HOSTED_FIELDS_FIELD_NOT_PRESENT'\n  },\n  HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR: {\n    type: BraintreeError.types.NETWORK,\n    code: 'HOSTED_FIELDS_TOKENIZATION_NETWORK_ERROR',\n    message: 'A tokenization network error occurred.'\n  },\n  HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE: {\n    type: BraintreeError.types.CUSTOMER,\n    code: 'HOSTED_FIELDS_TOKENIZATION_FAIL_ON_DUPLICATE',\n    message: 'This credit card already exists in the merchant\\'s vault.'\n  },\n  HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED: {\n    type: BraintreeError.types.CUSTOMER,\n    code: 'HOSTED_FIELDS_TOKENIZATION_CVV_VERIFICATION_FAILED',\n    message: 'CVV verification failed during tokenization.'\n  },\n  HOSTED_FIELDS_FAILED_TOKENIZATION: {\n    type: BraintreeError.types.CUSTOMER,\n    code: 'HOSTED_FIELDS_FAILED_TOKENIZATION',\n    message: 'The supplied card data failed tokenization.'\n  },\n  HOSTED_FIELDS_FIELDS_EMPTY: {\n    type: BraintreeError.types.CUSTOMER,\n    code: 'HOSTED_FIELDS_FIELDS_EMPTY',\n    message: 'All fields are empty. Cannot tokenize empty card fields.'\n  },\n  HOSTED_FIELDS_FIELDS_INVALID: {\n    type: BraintreeError.types.CUSTOMER,\n    code: 'HOSTED_FIELDS_FIELDS_INVALID',\n    message: 'Some payment input fields are invalid. Cannot tokenize invalid card fields.'\n  },\n  HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'HOSTED_FIELDS_ATTRIBUTE_NOT_SUPPORTED'\n  },\n  HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'HOSTED_FIELDS_ATTRIBUTE_VALUE_NOT_ALLOWED'\n  },\n  HOSTED_FIELDS_FIELD_PROPERTY_INVALID: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'HOSTED_FIELDS_FIELD_PROPERTY_INVALID'\n  }\n};\n\n},{\"../../lib/braintree-error\":72}],64:[function(require,module,exports){\n'use strict';\n\nfunction findParentTags(element, tag) {\n  var parent = element.parentNode;\n  var parents = [];\n\n  while (parent != null) {\n    if (parent.tagName != null && parent.tagName.toLowerCase() === tag) {\n      parents.push(parent);\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return parents;\n}\n\nmodule.exports = findParentTags;\n\n},{}],65:[function(require,module,exports){\n'use strict';\n\nvar creditCardType = require('credit-card-type');\n\nmodule.exports = function (number) {\n  var results = creditCardType(number);\n\n  results.forEach(function (card) {\n    // NEXT_MAJOR_VERSION credit-card-type fixed the mastercard enum\n    // but we still pass master-card in the braintree API\n    // in a major version bump, we can remove this and\n    // this will be mastercard instead of master-card\n    if (card.type === 'mastercard') {\n      card.type = 'master-card';\n    }\n  });\n\n  return results;\n};\n\n},{\"credit-card-type\":118}],66:[function(require,module,exports){\n'use strict';\n\nvar createAuthorizationData = require('./create-authorization-data');\nvar jsonClone = require('./json-clone');\nvar constants = require('./constants');\n\nfunction addMetadata(configuration, data) {\n  var key;\n  var attrs = data ? jsonClone(data) : {};\n  var authAttrs = createAuthorizationData(configuration.authorization).attrs;\n  var _meta = jsonClone(configuration.analyticsMetadata);\n\n  attrs.braintreeLibraryVersion = constants.BRAINTREE_LIBRARY_VERSION;\n\n  for (key in attrs._meta) {\n    if (attrs._meta.hasOwnProperty(key)) {\n      _meta[key] = attrs._meta[key];\n    }\n  }\n\n  attrs._meta = _meta;\n\n  if (authAttrs.tokenizationKey) {\n    attrs.tokenizationKey = authAttrs.tokenizationKey;\n  } else {\n    attrs.authorizationFingerprint = authAttrs.authorizationFingerprint;\n  }\n\n  return attrs;\n}\n\nmodule.exports = addMetadata;\n\n},{\"./constants\":76,\"./create-authorization-data\":80,\"./json-clone\":92}],67:[function(require,module,exports){\n'use strict';\n\nvar Promise = require('./promise');\nvar constants = require('./constants');\nvar addMetadata = require('./add-metadata');\n\nfunction _millisToSeconds(millis) {\n  return Math.floor(millis / 1000);\n}\n\nfunction sendAnalyticsEvent(clientInstanceOrPromise, kind, callback) {\n  var timestamp = _millisToSeconds(Date.now());\n\n  return Promise.resolve(clientInstanceOrPromise).then(function (client) {\n    var timestampInPromise = _millisToSeconds(Date.now());\n    var configuration = client.getConfiguration();\n    var request = client._request;\n    var url = configuration.gatewayConfiguration.analytics.url;\n    var data = {\n      analytics: [{\n        kind: constants.ANALYTICS_PREFIX + kind,\n        isAsync: timestampInPromise !== timestamp,\n        timestamp: timestamp\n      }]\n    };\n\n    request({\n      url: url,\n      method: 'post',\n      data: addMetadata(configuration, data),\n      timeout: constants.ANALYTICS_REQUEST_TIMEOUT_MS\n    }, callback);\n  });\n}\n\nmodule.exports = {\n  sendEvent: sendAnalyticsEvent\n};\n\n},{\"./add-metadata\":66,\"./constants\":76,\"./promise\":95}],68:[function(require,module,exports){\n'use strict';\n\nvar loadScript = require('@braintree/asset-loader/load-script');\n\nmodule.exports = {\n  loadScript: loadScript\n};\n\n},{\"@braintree/asset-loader/load-script\":3}],69:[function(require,module,exports){\n'use strict';\n\nvar assignNormalized = typeof Object.assign === 'function' ? Object.assign : assignPolyfill;\n\nfunction assignPolyfill(destination) {\n  var i, source, key;\n\n  for (i = 1; i < arguments.length; i++) {\n    source = arguments[i];\n    for (key in source) {\n      if (source.hasOwnProperty(key)) {\n        destination[key] = source[key];\n      }\n    }\n  }\n\n  return destination;\n}\n\nmodule.exports = {\n  assign: assignNormalized,\n  _assign: assignPolyfill\n};\n\n},{}],70:[function(require,module,exports){\n'use strict';\n\nvar BraintreeError = require('./braintree-error');\nvar Promise = require('./promise');\nvar sharedErrors = require('./errors');\nvar VERSION = \"3.42.0\";\n\nfunction basicComponentVerification(options) {\n  var client, authorization, name;\n\n  if (!options) {\n    return Promise.reject(new BraintreeError({\n      type: sharedErrors.INVALID_USE_OF_INTERNAL_FUNCTION.type,\n      code: sharedErrors.INVALID_USE_OF_INTERNAL_FUNCTION.code,\n      message: 'Options must be passed to basicComponentVerification function.'\n    }));\n  }\n\n  name = options.name;\n  client = options.client;\n  authorization = options.authorization;\n\n  if (client == null && authorization == null) {\n    return Promise.reject(new BraintreeError({\n      type: sharedErrors.INSTANTIATION_OPTION_REQUIRED.type,\n      code: sharedErrors.INSTANTIATION_OPTION_REQUIRED.code,\n      // NEXT_MAJOR_VERSION in major version, we expose passing in authorization for all components\n      // instead of passing in a client instance. Leave this a silent feature for now.\n      message: 'options.client is required when instantiating ' + name + '.'\n    }));\n  }\n\n  if (!authorization && client.getVersion() !== VERSION) {\n    return Promise.reject(new BraintreeError({\n      type: sharedErrors.INCOMPATIBLE_VERSIONS.type,\n      code: sharedErrors.INCOMPATIBLE_VERSIONS.code,\n      message: 'Client (version ' + client.getVersion() + ') and ' + name + ' (version ' + VERSION + ') components must be from the same SDK version.'\n    }));\n  }\n\n  return Promise.resolve();\n}\n\nmodule.exports = {\n  verify: basicComponentVerification\n};\n\n},{\"./braintree-error\":72,\"./errors\":85,\"./promise\":95}],71:[function(require,module,exports){\n'use strict';\n\nvar once = require('./once');\n\nfunction call(fn, callback) {\n  var isSync = fn.length === 0;\n\n  if (isSync) {\n    fn();\n    callback(null);\n  } else {\n    fn(callback);\n  }\n}\n\nmodule.exports = function (functions, cb) {\n  var i;\n  var length = functions.length;\n  var remaining = length;\n  var callback = once(cb);\n\n  if (length === 0) {\n    callback(null);\n\n    return;\n  }\n\n  function finish(err) {\n    if (err) {\n      callback(err);\n\n      return;\n    }\n\n    remaining -= 1;\n    if (remaining === 0) {\n      callback(null);\n    }\n  }\n\n  for (i = 0; i < length; i++) {\n    call(functions[i], finish);\n  }\n};\n\n},{\"./once\":94}],72:[function(require,module,exports){\n'use strict';\n\nvar enumerate = require('./enumerate');\n\n/**\n * @class\n * @global\n * @param {object} options Construction options\n * @classdesc This class is used to report error conditions, frequently as the first parameter to callbacks throughout the Braintree SDK.\n * @description <strong>You cannot use this constructor directly. Interact with instances of this class through {@link callback callbacks}.</strong>\n */\nfunction BraintreeError(options) {\n  if (!BraintreeError.types.hasOwnProperty(options.type)) {\n    throw new Error(options.type + ' is not a valid type.');\n  }\n\n  if (!options.code) {\n    throw new Error('Error code required.');\n  }\n\n  if (!options.message) {\n    throw new Error('Error message required.');\n  }\n\n  this.name = 'BraintreeError';\n\n  /**\n   * @type {string}\n   * @description A code that corresponds to specific errors.\n   */\n  this.code = options.code;\n\n  /**\n   * @type {string}\n   * @description A short description of the error.\n   */\n  this.message = options.message;\n\n  /**\n   * @type {BraintreeError.types}\n   * @description The type of error.\n   */\n  this.type = options.type;\n\n  /**\n   * @type {object=}\n   * @description Additional information about the error, such as an underlying network error response.\n   */\n  this.details = options.details;\n}\n\nBraintreeError.prototype = Object.create(Error.prototype);\nBraintreeError.prototype.constructor = BraintreeError;\n\n/**\n * Enum for {@link BraintreeError} types.\n * @name BraintreeError.types\n * @enum\n * @readonly\n * @memberof BraintreeError\n * @property {string} CUSTOMER An error caused by the customer.\n * @property {string} MERCHANT An error that is actionable by the merchant.\n * @property {string} NETWORK An error due to a network problem.\n * @property {string} INTERNAL An error caused by Braintree code.\n * @property {string} UNKNOWN An error where the origin is unknown.\n */\nBraintreeError.types = enumerate([\n  'CUSTOMER',\n  'MERCHANT',\n  'NETWORK',\n  'INTERNAL',\n  'UNKNOWN'\n]);\n\nBraintreeError.findRootError = function (err) {\n  if (err instanceof BraintreeError && err.details && err.details.originalError) {\n    return BraintreeError.findRootError(err.details.originalError);\n  }\n\n  return err;\n};\n\nmodule.exports = BraintreeError;\n\n},{\"./enumerate\":84}],73:[function(require,module,exports){\n'use strict';\n\nvar isVerifiedDomain = require('../is-verified-domain');\n\nfunction checkOrigin(postMessageOrigin, merchantUrl) {\n  var merchantOrigin, merchantHost;\n  var a = document.createElement('a');\n\n  a.href = merchantUrl;\n\n  if (a.protocol === 'https:') {\n    merchantHost = a.host.replace(/:443$/, '');\n  } else if (a.protocol === 'http:') {\n    merchantHost = a.host.replace(/:80$/, '');\n  } else {\n    merchantHost = a.host;\n  }\n\n  merchantOrigin = a.protocol + '//' + merchantHost;\n\n  if (merchantOrigin === postMessageOrigin) { return true; }\n\n  a.href = postMessageOrigin;\n\n  return isVerifiedDomain(postMessageOrigin);\n}\n\nmodule.exports = {\n  checkOrigin: checkOrigin\n};\n\n},{\"../is-verified-domain\":91}],74:[function(require,module,exports){\n'use strict';\n\nvar enumerate = require('../enumerate');\n\nmodule.exports = enumerate([\n  'CONFIGURATION_REQUEST'\n], 'bus:');\n\n},{\"../enumerate\":84}],75:[function(require,module,exports){\n'use strict';\n\nvar bus = require('framebus');\nvar events = require('./events');\nvar checkOrigin = require('./check-origin').checkOrigin;\nvar BraintreeError = require('../braintree-error');\n\nfunction BraintreeBus(options) {\n  options = options || {};\n\n  this.channel = options.channel;\n  if (!this.channel) {\n    throw new BraintreeError({\n      type: BraintreeError.types.INTERNAL,\n      code: 'MISSING_CHANNEL_ID',\n      message: 'Channel ID must be specified.'\n    });\n  }\n\n  this.merchantUrl = options.merchantUrl;\n\n  this._isDestroyed = false;\n  this._isVerbose = false;\n\n  this._listeners = [];\n\n  this._log('new bus on channel ' + this.channel, [location.href]);\n}\n\nBraintreeBus.prototype.on = function (eventName, originalHandler) {\n  var namespacedEvent, args;\n  var handler = originalHandler;\n  var self = this;\n\n  if (this._isDestroyed) { return; }\n\n  if (this.merchantUrl) {\n    handler = function () {\n      /* eslint-disable no-invalid-this */\n      if (checkOrigin(this.origin, self.merchantUrl)) {\n        originalHandler.apply(this, arguments);\n      }\n      /* eslint-enable no-invalid-this */\n    };\n  }\n\n  namespacedEvent = this._namespaceEvent(eventName);\n  args = Array.prototype.slice.call(arguments);\n  args[0] = namespacedEvent;\n  args[1] = handler;\n\n  this._log('on', args);\n  bus.on.apply(bus, args);\n\n  this._listeners.push({\n    eventName: eventName,\n    handler: handler,\n    originalHandler: originalHandler\n  });\n};\n\nBraintreeBus.prototype.emit = function (eventName) {\n  var args;\n\n  if (this._isDestroyed) { return; }\n\n  args = Array.prototype.slice.call(arguments);\n  args[0] = this._namespaceEvent(eventName);\n\n  this._log('emit', args);\n  bus.emit.apply(bus, args);\n};\n\nBraintreeBus.prototype._offDirect = function (eventName) {\n  var args = Array.prototype.slice.call(arguments);\n\n  if (this._isDestroyed) { return; }\n\n  args[0] = this._namespaceEvent(eventName);\n\n  this._log('off', args);\n  bus.off.apply(bus, args);\n};\n\nBraintreeBus.prototype.off = function (eventName, originalHandler) {\n  var i, listener;\n  var handler = originalHandler;\n\n  if (this._isDestroyed) { return; }\n\n  if (this.merchantUrl) {\n    for (i = 0; i < this._listeners.length; i++) {\n      listener = this._listeners[i];\n\n      if (listener.originalHandler === originalHandler) {\n        handler = listener.handler;\n      }\n    }\n  }\n\n  this._offDirect(eventName, handler);\n};\n\nBraintreeBus.prototype._namespaceEvent = function (eventName) {\n  return ['braintree', this.channel, eventName].join(':');\n};\n\nBraintreeBus.prototype.teardown = function () {\n  var listener, i;\n\n  for (i = 0; i < this._listeners.length; i++) {\n    listener = this._listeners[i];\n    this._offDirect(listener.eventName, listener.handler);\n  }\n\n  this._listeners.length = 0;\n\n  this._isDestroyed = true;\n};\n\nBraintreeBus.prototype._log = function (functionName, args) {\n  if (this._isVerbose) {\n    console.log(functionName, args); // eslint-disable-line no-console\n  }\n};\n\nBraintreeBus.events = events;\n\nmodule.exports = BraintreeBus;\n\n},{\"../braintree-error\":72,\"./check-origin\":73,\"./events\":74,\"framebus\":119}],76:[function(require,module,exports){\n'use strict';\n\nvar VERSION = \"3.42.0\";\nvar PLATFORM = 'web';\n\nvar CLIENT_API_URLS = {\n  production: 'https://api.braintreegateway.com:443',\n  sandbox: 'https://api.sandbox.braintreegateway.com:443'\n};\n\nvar ASSETS_URLS = {\n  production: 'https://assets.braintreegateway.com',\n  sandbox: 'https://assets.braintreegateway.com'\n};\n\nvar GRAPHQL_URLS = {\n  production: 'https://payments.braintree-api.com/graphql',\n  sandbox: 'https://payments.sandbox.braintree-api.com/graphql'\n};\n\nmodule.exports = {\n  ANALYTICS_PREFIX: PLATFORM + '.',\n  ANALYTICS_REQUEST_TIMEOUT_MS: 2000,\n  ASSETS_URLS: ASSETS_URLS,\n  CLIENT_API_URLS: CLIENT_API_URLS,\n  FRAUDNET_SOURCE: 'BRAINTREE_SIGNIN',\n  FRAUDNET_FNCLS: 'fnparams-dede7cc5-15fd-4c75-a9f4-36c430ee3a99',\n  FRAUDNET_URL: 'https://c.paypal.com/da/r/fb.js',\n  GRAPHQL_URLS: GRAPHQL_URLS,\n  INTEGRATION_TIMEOUT_MS: 60000,\n  VERSION: VERSION,\n  INTEGRATION: 'custom',\n  SOURCE: 'client',\n  PLATFORM: PLATFORM,\n  BRAINTREE_LIBRARY_VERSION: 'braintree/' + PLATFORM + '/' + VERSION\n};\n\n},{}],77:[function(require,module,exports){\n'use strict';\n\nvar BraintreeError = require('./braintree-error');\nvar sharedErrors = require('./errors');\n\nmodule.exports = function (instance, methodNames) {\n  methodNames.forEach(function (methodName) {\n    instance[methodName] = function () {\n      throw new BraintreeError({\n        type: sharedErrors.METHOD_CALLED_AFTER_TEARDOWN.type,\n        code: sharedErrors.METHOD_CALLED_AFTER_TEARDOWN.code,\n        message: methodName + ' cannot be called after teardown.'\n      });\n    };\n  });\n};\n\n},{\"./braintree-error\":72,\"./errors\":85}],78:[function(require,module,exports){\n'use strict';\n\nvar BraintreeError = require('./braintree-error');\n\nfunction convertToBraintreeError(originalErr, btErrorObject) {\n  if (originalErr instanceof BraintreeError) {\n    return originalErr;\n  }\n\n  return new BraintreeError({\n    type: btErrorObject.type,\n    code: btErrorObject.code,\n    message: btErrorObject.message,\n    details: {\n      originalError: originalErr\n    }\n  });\n}\n\nmodule.exports = convertToBraintreeError;\n\n},{\"./braintree-error\":72}],79:[function(require,module,exports){\n'use strict';\n\nvar ASSETS_URLS = require('./constants').ASSETS_URLS;\n\nfunction createAssetsUrl(authorization) {\n\n  return ASSETS_URLS.production;\n}\n/* eslint-enable */\n\nmodule.exports = {\n  create: createAssetsUrl\n};\n\n},{\"./constants\":76}],80:[function(require,module,exports){\n'use strict';\n\nvar atob = require('../lib/vendor/polyfill').atob;\nvar CLIENT_API_URLS = require('../lib/constants').CLIENT_API_URLS;\n\nfunction _isTokenizationKey(str) {\n  return /^[a-zA-Z0-9]+_[a-zA-Z0-9]+_[a-zA-Z0-9_]+$/.test(str);\n}\n\nfunction _parseTokenizationKey(tokenizationKey) {\n  var tokens = tokenizationKey.split('_');\n  var environment = tokens[0];\n  var merchantId = tokens.slice(2).join('_');\n\n  return {\n    merchantId: merchantId,\n    environment: environment\n  };\n}\n\nfunction createAuthorizationData(authorization) {\n  var parsedClientToken, parsedTokenizationKey;\n  var data = {\n    attrs: {},\n    configUrl: ''\n  };\n\n  if (_isTokenizationKey(authorization)) {\n    parsedTokenizationKey = _parseTokenizationKey(authorization);\n    data.environment = parsedTokenizationKey.environment;\n    data.attrs.tokenizationKey = authorization;\n    data.configUrl = CLIENT_API_URLS[parsedTokenizationKey.environment] + '/merchants/' + parsedTokenizationKey.merchantId + '/client_api/v1/configuration';\n  } else {\n    parsedClientToken = JSON.parse(atob(authorization));\n    data.environment = parsedClientToken.environment;\n    data.attrs.authorizationFingerprint = parsedClientToken.authorizationFingerprint;\n    data.configUrl = parsedClientToken.configUrl;\n    data.graphQL = parsedClientToken.graphQL;\n  }\n\n  return data;\n}\n\nmodule.exports = createAuthorizationData;\n\n},{\"../lib/constants\":76,\"../lib/vendor/polyfill\":98}],81:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar BraintreeError = require('./braintree-error');\nvar Promise = require('./promise');\nvar assets = require('./assets');\nvar sharedErrors = require('./errors');\n\nvar VERSION = \"3.42.0\";\n\nfunction createDeferredClient(options) {\n  var promise = Promise.resolve();\n\n  if (options.client) {\n    return Promise.resolve(options.client);\n  }\n\n  if (!(global.braintree && global.braintree.client)) {\n    promise = assets.loadScript({\n      src: options.assetsUrl + '/web/' + VERSION + '/js/client.min.js'\n    }).catch(function (err) {\n      return Promise.reject(new BraintreeError({\n        type: sharedErrors.CLIENT_SCRIPT_FAILED_TO_LOAD.type,\n        code: sharedErrors.CLIENT_SCRIPT_FAILED_TO_LOAD.code,\n        message: sharedErrors.CLIENT_SCRIPT_FAILED_TO_LOAD.message,\n        details: {\n          originalError: err\n        }\n      }));\n    });\n  }\n\n  return promise.then(function () {\n    if (global.braintree.client.VERSION !== VERSION) {\n      return Promise.reject(new BraintreeError({\n        type: sharedErrors.INCOMPATIBLE_VERSIONS.type,\n        code: sharedErrors.INCOMPATIBLE_VERSIONS.code,\n        message: 'Client (version ' + global.braintree.client.VERSION + ') and ' + options.name + ' (version ' + VERSION + ') components must be from the same SDK version.'\n      }));\n    }\n\n    return global.braintree.client.create({\n      authorization: options.authorization,\n      debug: options.debug\n    });\n  });\n}\n\nmodule.exports = {\n  create: createDeferredClient\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./assets\":68,\"./braintree-error\":72,\"./errors\":85,\"./promise\":95}],82:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (fn) {\n  return function () {\n    // IE9 doesn't support passing arguments to setTimeout so we have to emulate it.\n    var args = arguments;\n\n    setTimeout(function () {\n      fn.apply(null, args);\n    }, 1);\n  };\n};\n\n},{}],83:[function(require,module,exports){\n'use strict';\n\nvar batchExecuteFunctions = require('./batch-execute-functions');\n\nfunction Destructor() {\n  this._teardownRegistry = [];\n\n  this._isTearingDown = false;\n}\n\nDestructor.prototype.registerFunctionForTeardown = function (fn) {\n  if (typeof fn === 'function') {\n    this._teardownRegistry.push(fn);\n  }\n};\n\nDestructor.prototype.teardown = function (callback) {\n  if (this._isTearingDown) {\n    callback(new Error('Destructor is already tearing down'));\n\n    return;\n  }\n\n  this._isTearingDown = true;\n\n  batchExecuteFunctions(this._teardownRegistry, function (err) {\n    this._teardownRegistry = [];\n    this._isTearingDown = false;\n\n    if (typeof callback === 'function') {\n      callback(err);\n    }\n  }.bind(this));\n};\n\nmodule.exports = Destructor;\n\n},{\"./batch-execute-functions\":71}],84:[function(require,module,exports){\n'use strict';\n\nfunction enumerate(values, prefix) {\n  prefix = prefix == null ? '' : prefix;\n\n  return values.reduce(function (enumeration, value) {\n    enumeration[value] = prefix + value;\n\n    return enumeration;\n  }, {});\n}\n\nmodule.exports = enumerate;\n\n},{}],85:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.Shared Interal Error Codes\n * @ignore\n * @description These codes should never be experienced by the mechant directly.\n * @property {INTERNAL} INVALID_USE_OF_INTERNAL_FUNCTION Occurs when the client is created without a gateway configuration. Should never happen.\n */\n\n/**\n * @name BraintreeError.Shared Errors - Component Creation Error Codes\n * @description Errors that occur when creating components.\n * @property {MERCHANT} INSTANTIATION_OPTION_REQUIRED Occurs when a component is created that is missing a required option.\n * @property {MERCHANT} INCOMPATIBLE_VERSIONS Occurs when a component is created with a client with a different version than the component.\n * @property {NETWORK} CLIENT_SCRIPT_FAILED_TO_LOAD Occurs when a component attempts to load the Braintree client script, but the request fails.\n */\n\n/**\n * @name BraintreeError.Shared Errors - Component Instance Error Codes\n * @description Errors that occur when using instances of components.\n * @property {MERCHANT} METHOD_CALLED_AFTER_TEARDOWN Occurs when a method is called on a component instance after it has been torn down.\n * @property {MERCHANT} BRAINTREE_API_ACCESS_RESTRICTED Occurs when the client token or tokenization key does not have the correct permissions.\n */\n\nvar BraintreeError = require('./braintree-error');\n\nmodule.exports = {\n  INVALID_USE_OF_INTERNAL_FUNCTION: {\n    type: BraintreeError.types.INTERNAL,\n    code: 'INVALID_USE_OF_INTERNAL_FUNCTION'\n  },\n  INSTANTIATION_OPTION_REQUIRED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'INSTANTIATION_OPTION_REQUIRED'\n  },\n  INCOMPATIBLE_VERSIONS: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'INCOMPATIBLE_VERSIONS'\n  },\n  CLIENT_SCRIPT_FAILED_TO_LOAD: {\n    type: BraintreeError.types.NETWORK,\n    code: 'CLIENT_SCRIPT_FAILED_TO_LOAD',\n    message: 'Braintree client script could not be loaded.'\n  },\n  METHOD_CALLED_AFTER_TEARDOWN: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'METHOD_CALLED_AFTER_TEARDOWN'\n  },\n  BRAINTREE_API_ACCESS_RESTRICTED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'BRAINTREE_API_ACCESS_RESTRICTED',\n    message: 'Your access is restricted and cannot use this part of the Braintree API.'\n  }\n};\n\n},{\"./braintree-error\":72}],86:[function(require,module,exports){\n'use strict';\n\nfunction EventEmitter() {\n  this._events = {};\n}\n\nEventEmitter.prototype.on = function (event, callback) {\n  if (this._events[event]) {\n    this._events[event].push(callback);\n  } else {\n    this._events[event] = [callback];\n  }\n};\n\nEventEmitter.prototype._emit = function (event) {\n  var i, args;\n  var callbacks = this._events[event];\n\n  if (!callbacks) { return; }\n\n  args = Array.prototype.slice.call(arguments, 1);\n\n  for (i = 0; i < callbacks.length; i++) {\n    callbacks[i].apply(null, args);\n  }\n};\n\nmodule.exports = EventEmitter;\n\n},{}],87:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (array, key, value) {\n  var i;\n\n  for (i = 0; i < array.length; i++) {\n    if (array[i].hasOwnProperty(key) && array[i][key] === value) {\n      return array[i];\n    }\n  }\n\n  return null;\n};\n\n},{}],88:[function(require,module,exports){\n'use strict';\n\nvar VERSION = \"3.42.0\";\nvar assign = require('./assign').assign;\n\nfunction generateTokenizationParameters(configuration, overrides) {\n  var metadata = configuration.analyticsMetadata;\n  var basicTokenizationParameters = {\n    gateway: 'braintree',\n    'braintree:merchantId': configuration.gatewayConfiguration.merchantId,\n    'braintree:apiVersion': 'v1',\n    'braintree:sdkVersion': VERSION,\n    'braintree:metadata': JSON.stringify({\n      source: metadata.source,\n      integration: metadata.integration,\n      sessionId: metadata.sessionId,\n      version: VERSION,\n      platform: metadata.platform\n    })\n  };\n\n  return assign({}, basicTokenizationParameters, overrides);\n}\n\nmodule.exports = function (configuration, googlePayVersion, googleMerchantId) {\n  var data, allowedPaymentMethod, paypalPaymentMethod;\n  var androidPayConfiguration = configuration.gatewayConfiguration.androidPay;\n  var environment = configuration.gatewayConfiguration.environment === 'production' ? 'PRODUCTION' : 'TEST';\n\n  if (googlePayVersion === 2) {\n    data = {\n      apiVersion: 2,\n      apiVersionMinor: 0,\n      environment: environment,\n      allowedPaymentMethods: [{\n        type: 'CARD',\n        parameters: {\n          allowedAuthMethods: [\n            'PAN_ONLY',\n            'CRYPTOGRAM_3DS'\n          ],\n          allowedCardNetworks:\n            androidPayConfiguration.supportedNetworks.map(function (card) { return card.toUpperCase(); })\n        },\n        tokenizationSpecification: {\n          type: 'PAYMENT_GATEWAY',\n          parameters: generateTokenizationParameters(configuration, {\n            'braintree:authorizationFingerprint': androidPayConfiguration.googleAuthorizationFingerprint\n          })\n        }\n      }]\n    };\n\n    if (googleMerchantId) {\n      data.merchantInfo = {\n        merchantId: googleMerchantId\n      };\n    }\n\n    if (configuration.authorizationType === 'TOKENIZATION_KEY') {\n      allowedPaymentMethod = find(data.allowedPaymentMethods, 'type', 'CARD');\n\n      if (allowedPaymentMethod) {\n        allowedPaymentMethod.tokenizationSpecification.parameters['braintree:clientKey'] = configuration.authorization;\n      }\n    }\n\n    if (configuration.gatewayConfiguration.paypal &&\n      configuration.gatewayConfiguration.paypal.clientId &&\n      configuration.gatewayConfiguration.paypal.environmentNoNetwork === false\n    ) {\n      paypalPaymentMethod = {\n        type: 'PAYPAL',\n        parameters: {\n          purchase_context: { // eslint-disable-line camelcase\n            purchase_units: [ // eslint-disable-line camelcase\n              {\n                payee: {\n                  client_id: configuration.gatewayConfiguration.paypal.clientId // eslint-disable-line camelcase\n                },\n                recurring_payment: true // eslint-disable-line camelcase\n              }\n            ]\n          }\n        },\n        tokenizationSpecification: {\n          type: 'PAYMENT_GATEWAY',\n          parameters: generateTokenizationParameters(configuration, {\n            'braintree:paypalClientId': configuration.gatewayConfiguration.paypal.clientId\n          })\n        }\n      };\n\n      data.allowedPaymentMethods.push(paypalPaymentMethod);\n    }\n  } else {\n    data = {\n      environment: environment,\n      allowedPaymentMethods: ['CARD', 'TOKENIZED_CARD'],\n      paymentMethodTokenizationParameters: {\n        tokenizationType: 'PAYMENT_GATEWAY',\n        parameters: generateTokenizationParameters(configuration, {\n          'braintree:authorizationFingerprint': androidPayConfiguration.googleAuthorizationFingerprint\n        })\n      },\n      cardRequirements: {\n        allowedCardNetworks: androidPayConfiguration.supportedNetworks.map(function (card) { return card.toUpperCase(); })\n      }\n    };\n\n    if (configuration.authorizationType === 'TOKENIZATION_KEY') {\n      data.paymentMethodTokenizationParameters.parameters['braintree:clientKey'] = configuration.authorization;\n    }\n\n    if (googleMerchantId) {\n      data.merchantId = googleMerchantId;\n    }\n\n    if (googlePayVersion) {\n      data.apiVersion = googlePayVersion;\n    }\n  }\n\n  return data;\n};\n\n},{\"./assign\":69}],89:[function(require,module,exports){\n'use strict';\n\nfunction convertDateStringToDate(dateString) {\n  var splitDate = dateString.split('-');\n\n  return new Date(splitDate[0], splitDate[1], splitDate[2]);\n}\n\nfunction isDateStringBeforeOrOn(firstDate, secondDate) {\n  return convertDateStringToDate(firstDate) <= convertDateStringToDate(secondDate);\n}\n\nmodule.exports = isDateStringBeforeOrOn;\n\n},{}],90:[function(require,module,exports){\n(function (global){\n'use strict';\n\nfunction isHTTPS(protocol) {\n  protocol = protocol || global.location.protocol;\n\n  return protocol === 'https:';\n}\n\nmodule.exports = {\n  isHTTPS: isHTTPS\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],91:[function(require,module,exports){\n'use strict';\n\nvar parser;\nvar legalHosts = {\n  'paypal.com': 1,\n  'braintreepayments.com': 1,\n  'braintreegateway.com': 1,\n  'braintree-api.com': 1\n};\n\nfunction stripSubdomains(domain) {\n  return domain.split('.').slice(-2).join('.');\n}\n\nfunction isVerifiedDomain(url) {\n  var mainDomain;\n\n  url = url.toLowerCase();\n\n  if (!/^https:/.test(url)) {\n    return false;\n  }\n\n  parser = parser || document.createElement('a');\n  parser.href = url;\n  mainDomain = stripSubdomains(parser.hostname);\n\n  return legalHosts.hasOwnProperty(mainDomain);\n}\n\nmodule.exports = isVerifiedDomain;\n\n},{}],92:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (value) {\n  return JSON.parse(JSON.stringify(value));\n};\n\n},{}],93:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (obj) {\n  return Object.keys(obj).filter(function (key) {\n    return typeof obj[key] === 'function';\n  });\n};\n\n},{}],94:[function(require,module,exports){\narguments[4][24][0].apply(exports,arguments)\n},{\"dup\":24}],95:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar Promise = global.Promise || require('promise-polyfill');\n\nmodule.exports = Promise;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"promise-polyfill\":121}],96:[function(require,module,exports){\n(function (global){\n'use strict';\n\nfunction _notEmpty(obj) {\n  var key;\n\n  for (key in obj) {\n    if (obj.hasOwnProperty(key)) { return true; }\n  }\n\n  return false;\n}\n\n/* eslint-disable no-mixed-operators */\nfunction _isArray(value) {\n  return value && typeof value === 'object' && typeof value.length === 'number' &&\n    Object.prototype.toString.call(value) === '[object Array]' || false;\n}\n/* eslint-enable no-mixed-operators */\n\nfunction parse(url) {\n  var query, params;\n\n  url = url || global.location.href;\n\n  if (!/\\?/.test(url)) {\n    return {};\n  }\n\n  query = url.replace(/#.*$/, '').replace(/^.*\\?/, '').split('&');\n\n  params = query.reduce(function (toReturn, keyValue) {\n    var parts = keyValue.split('=');\n    var key = decodeURIComponent(parts[0]);\n    var value = decodeURIComponent(parts[1]);\n\n    toReturn[key] = value;\n\n    return toReturn;\n  }, {});\n\n  return params;\n}\n\nfunction stringify(params, namespace) {\n  var k, v, p;\n  var query = [];\n\n  for (p in params) {\n    if (!params.hasOwnProperty(p)) {\n      continue;\n    }\n\n    v = params[p];\n\n    if (namespace) {\n      if (_isArray(params)) {\n        k = namespace + '[]';\n      } else {\n        k = namespace + '[' + p + ']';\n      }\n    } else {\n      k = p;\n    }\n    if (typeof v === 'object') {\n      query.push(stringify(v, k));\n    } else {\n      query.push(encodeURIComponent(k) + '=' + encodeURIComponent(v));\n    }\n  }\n\n  return query.join('&');\n}\n\nfunction queryify(url, params) {\n  url = url || '';\n\n  if (params != null && typeof params === 'object' && _notEmpty(params)) {\n    url += url.indexOf('?') === -1 ? '?' : '';\n    url += url.indexOf('=') !== -1 ? '&' : '';\n    url += stringify(params);\n  }\n\n  return url;\n}\n\nmodule.exports = {\n  parse: parse,\n  stringify: stringify,\n  queryify: queryify\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],97:[function(require,module,exports){\n'use strict';\n\nfunction useMin(isDebug) {\n  return isDebug ? '' : '.min';\n}\n\nmodule.exports = useMin;\n\n},{}],98:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar atobNormalized = typeof global.atob === 'function' ? global.atob : atob;\n\nfunction atob(base64String) {\n  var a, b, c, b1, b2, b3, b4, i;\n  var base64Matcher = new RegExp('^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$');\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  var result = '';\n\n  if (!base64Matcher.test(base64String)) {\n    throw new Error('Non base64 encoded input passed to window.atob polyfill');\n  }\n\n  i = 0;\n  do {\n    b1 = characters.indexOf(base64String.charAt(i++));\n    b2 = characters.indexOf(base64String.charAt(i++));\n    b3 = characters.indexOf(base64String.charAt(i++));\n    b4 = characters.indexOf(base64String.charAt(i++));\n\n    a = (b1 & 0x3F) << 2 | b2 >> 4 & 0x3;\n    b = (b2 & 0xF) << 4 | b3 >> 2 & 0xF;\n    c = (b3 & 0x3) << 6 | b4 & 0x3F;\n\n    result += String.fromCharCode(a) + (b ? String.fromCharCode(b) : '') + (c ? String.fromCharCode(c) : '');\n  } while (i < base64String.length);\n\n  return result;\n}\n\nmodule.exports = {\n  atob: function (base64String) {\n    return atobNormalized.call(global, base64String);\n  },\n  _atob: atob\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],99:[function(require,module,exports){\n'use strict';\n\nfunction uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n\n    return v.toString(16);\n  });\n}\n\nmodule.exports = uuid;\n\n},{}],100:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.PayPal Checkout - Creation Error Codes\n * @description Errors that occur when [creating the PayPal Checkout component](/current/module-braintree-web_paypal-checkout.html#.create).\n * @property {MERCHANT} PAYPAL_NOT_ENABLED Occurs when PayPal is not enabled on the Braintree control panel.\n * @property {MERCHANT} PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED Occurs only when testing in Sandbox, when a PayPal sandbox account is not linked to the merchant account in the Braintree control panel.\n */\n\n/**\n * @name BraintreeError.PayPal Checkout - createPayment Error Codes\n * @description Errors that occur when using the [`createPayment` method](/current/PayPalCheckout.html#createPayment).\n * @property {MERCHANT} PAYPAL_FLOW_OPTION_REQUIRED Occurs when a required option is missing.\n * @property {MERCHANT} PAYPAL_INVALID_PAYMENT_OPTION Occurs when an option contains an invalid value.\n * @property {NETWORK} PAYPAL_FLOW_FAILED Occurs when something goes wrong when initializing the flow.\n */\n\n/**\n * @name BraintreeError.PayPal Checkout - tokenizePayment Error Codes\n * @description Errors that occur when using the [`tokenizePayment` method](/current/PayPalCheckout.html#tokenizePayment).\n * @property {NETWORK} PAYPAL_ACCOUNT_TOKENIZATION_FAILED Occurs when PayPal account could not be tokenized.\n */\n\nvar BraintreeError = require('../lib/braintree-error');\n\nmodule.exports = {\n  PAYPAL_NOT_ENABLED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'PAYPAL_NOT_ENABLED',\n    message: 'PayPal is not enabled for this merchant.'\n  },\n  PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED',\n    message: 'A linked PayPal Sandbox account is required to use PayPal Checkout in Sandbox. See https://developers.braintreepayments.com/guides/paypal/testing-go-live/#linked-paypal-testing for details on linking your PayPal sandbox with Braintree.'\n  },\n  PAYPAL_ACCOUNT_TOKENIZATION_FAILED: {\n    type: BraintreeError.types.NETWORK,\n    code: 'PAYPAL_ACCOUNT_TOKENIZATION_FAILED',\n    message: 'Could not tokenize user\\'s PayPal account.'\n  },\n  PAYPAL_FLOW_FAILED: {\n    type: BraintreeError.types.NETWORK,\n    code: 'PAYPAL_FLOW_FAILED',\n    message: 'Could not initialize PayPal flow.'\n  },\n  PAYPAL_FLOW_OPTION_REQUIRED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'PAYPAL_FLOW_OPTION_REQUIRED',\n    message: 'PayPal flow property is invalid or missing.'\n  },\n  PAYPAL_INVALID_PAYMENT_OPTION: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'PAYPAL_INVALID_PAYMENT_OPTION',\n    message: 'PayPal payment options are invalid.'\n  }\n};\n\n},{\"../lib/braintree-error\":72}],101:[function(require,module,exports){\n'use strict';\n/**\n * @module braintree-web/paypal-checkout\n * @description A component to integrate with the [PayPal Checkout.js library](https://github.com/paypal/paypal-checkout).\n */\n\nvar basicComponentVerification = require('../lib/basic-component-verification');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar PayPalCheckout = require('./paypal-checkout');\nvar VERSION = \"3.42.0\";\n\n/**\n * @static\n * @function create\n * @description There are two ways to integrate the PayPal Checkout component. See the [PayPal Checkout constructor documentation](PayPalCheckout.html#PayPalCheckout) for more information and examples.\n *\n * @param {object} options Creation options:\n * @param {Client} [options.client] A {@link Client} instance.\n * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.\n * @param {string} [options.merchantAccountId] A non-default merchant account ID to use for tokenization.\n * @param {callback} [callback] The second argument, `data`, is the {@link PayPalCheckout} instance.\n * @example\n * braintree.client.create({\n *   authorization: 'authorization'\n * }).then(function (clientInstance) {\n *   return braintree.paypalCheckout.create({\n *     client: clientInstance\n *   });\n * }).then(function (paypalCheckoutInstance) {\n *   // set up checkout.js\n * }).catch(function (err) {\n *   console.error('Error!', err);\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nfunction create(options) {\n  var name = 'PayPal Checkout';\n\n  return basicComponentVerification.verify({\n    name: name,\n    client: options.client,\n    authorization: options.authorization\n  }).then(function () {\n    var instance = new PayPalCheckout(options);\n\n    return instance._initialize(options);\n  });\n}\n\n/**\n * @static\n * @function isSupported\n * @description Returns true if PayPal Checkout [supports this browser](index.html#browser-support-webviews).\n * @deprecated Previously, this method checked for Popup support in the browser. Checkout.js now falls back to a modal if popups are not supported.\n * @returns {Boolean} Returns true if PayPal Checkout supports this browser.\n */\nfunction isSupported() {\n  return true;\n}\n\nmodule.exports = {\n  create: wrapPromise(create),\n  isSupported: isSupported,\n  /**\n   * @description The current version of the SDK, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"../lib/basic-component-verification\":70,\"./paypal-checkout\":102,\"@braintree/wrap-promise\":26}],102:[function(require,module,exports){\n'use strict';\n\nvar analytics = require('../lib/analytics');\nvar createDeferredClient = require('../lib/create-deferred-client');\nvar createAssetsUrl = require('../lib/create-assets-url');\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar BraintreeError = require('../lib/braintree-error');\nvar convertToBraintreeError = require('../lib/convert-to-braintree-error');\nvar errors = require('./errors');\nvar constants = require('../paypal/shared/constants');\nvar methods = require('../lib/methods');\nvar convertMethodsToError = require('../lib/convert-methods-to-error');\n\n/**\n * PayPal Checkout tokenized payload. Returned in {@link PayPalCheckout#tokenizePayment}'s callback as the second argument, `data`.\n * @typedef {object} PayPalCheckout~tokenizePayload\n * @property {string} nonce The payment method nonce.\n * @property {string} type The payment method type, always `PayPalAccount`.\n * @property {object} details Additional PayPal account details.\n * @property {string} details.email User's email address.\n * @property {string} details.payerId User's payer ID, the unique identifier for each PayPal account.\n * @property {string} details.firstName User's given name.\n * @property {string} details.lastName User's surname.\n * @property {?string} details.countryCode User's 2 character country code.\n * @property {?string} details.phone User's phone number (e.g. 555-867-5309).\n * @property {?object} details.shippingAddress User's shipping address details, only available if shipping address is enabled.\n * @property {string} details.shippingAddress.recipientName Recipient of postage.\n * @property {string} details.shippingAddress.line1 Street number and name.\n * @property {string} details.shippingAddress.line2 Extended address.\n * @property {string} details.shippingAddress.city City or locality.\n * @property {string} details.shippingAddress.state State or region.\n * @property {string} details.shippingAddress.postalCode Postal code.\n * @property {string} details.shippingAddress.countryCode 2 character country code (e.g. US).\n * @property {?object} details.billingAddress User's billing address details.\n * Not available to all merchants; [contact PayPal](https://developers.braintreepayments.com/support/guides/paypal/setup-guide#contacting-paypal-support) for details on eligibility and enabling this feature.\n * Alternatively, see `shippingAddress` above as an available client option.\n * @property {string} details.billingAddress.line1 Street number and name.\n * @property {string} details.billingAddress.line2 Extended address.\n * @property {string} details.billingAddress.city City or locality.\n * @property {string} details.billingAddress.state State or region.\n * @property {string} details.billingAddress.postalCode Postal code.\n * @property {string} details.billingAddress.countryCode 2 character country code (e.g. US).\n * @property {?object} creditFinancingOffered This property will only be present when the customer pays with PayPal Credit.\n * @property {object} creditFinancingOffered.totalCost This is the estimated total payment amount including interest and fees the user will pay during the lifetime of the loan.\n * @property {string} creditFinancingOffered.totalCost.value An amount defined by [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm) for the given currency.\n * @property {string} creditFinancingOffered.totalCost.currency 3 letter currency code as defined by [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm).\n * @property {number} creditFinancingOffered.term Length of financing terms in months.\n * @property {object} creditFinancingOffered.monthlyPayment This is the estimated amount per month that the customer will need to pay including fees and interest.\n * @property {string} creditFinancingOffered.monthlyPayment.value An amount defined by [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm) for the given currency.\n * @property {string} creditFinancingOffered.monthlyPayment.currency 3 letter currency code as defined by [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm).\n * @property {object} creditFinancingOffered.totalInterest Estimated interest or fees amount the payer will have to pay during the lifetime of the loan.\n * @property {string} creditFinancingOffered.totalInterest.value An amount defined by [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm) for the given currency.\n * @property {string} creditFinancingOffered.totalInterest.currency 3 letter currency code as defined by [ISO 4217](http://www.iso.org/iso/home/standards/currency_codes.htm).\n * @property {boolean} creditFinancingOffered.payerAcceptance Status of whether the customer ultimately was approved for and chose to make the payment using the approved installment credit.\n * @property {boolean} creditFinancingOffered.cartAmountImmutable Indicates whether the cart amount is editable after payer's acceptance on PayPal side.\n */\n\n/**\n * @class\n * @param {object} options see {@link module:braintree-web/paypal-checkout.create|paypal-checkout.create}\n * @classdesc This class represents a PayPal Checkout component that coordinates with the {@link https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4|PayPal checkout.js} library. Instances of this class can generate payment data and tokenize authorized payments.\n *\n * All UI (such as preventing actions on the parent page while authentication is in progress) is managed by {@link https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4|checkout.js}.\n * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/paypal-checkout.create|braintree-web.paypal-checkout.create} instead.</strong>\n *\n * You must have PayPal's checkout.js script loaded on your page to use PayPal Checkout. You can either use the [paypal-checkout package on npm](https://www.npmjs.com/package/paypal-checkout) with a build tool or use a script hosted by PayPal:\n *\n * ```html\n * <script src=\"https://www.paypalobjects.com/api/checkout.js\" data-version-4 log-level=\"warn\"></script>\n * ```\n *\n * Once you have the script loaded, there are two ways to integrate with the checkout.js library.\n *\n * #### Pass a Braintree object into checkout.js\n *\n * You can pass a `braintree` object into PayPal's checkout.js library. This will create the necessary Braintree {@link moudle:braintree-web/client.create|client} and {@link moudle:braintree-web/paypal-checkout.create|PayPal Checkout} components and automatically tokenize the authorized PayPal account. Use this integration option if you are not integrating with any other Braintree components.\n *\n * ```javascript\n * paypal.Button.render({\n *   braintree: braintree, // this object is available on the window by including the client and paypal-checkout component scripts on the page\n *   client: {\n *     production: 'production_authorization',\n *     sandbox: 'sandbox_authorization'\n *   },\n *\n *   env: 'production', // or 'sandbox'\n *\n *   payment: function (data, actions) {\n *     return actions.braintree.create({\n *       // your createPayment options here\n *     });\n *   },\n *\n *   onAuthorize: function (payload, actions) {\n *     // send payload.nonce to your server\n *\n *     // for more data about the user's PayPal account:\n *     // return actions.payment.get().then(function(data) { console.log(data); });\n *   }\n * }, '#paypal-button'); // the PayPal button will be rendered in an html element with the id `paypal-button`\n * ```\n *\n * If you are using `npm` to load braintree, simply pass in the invidual components:\n *\n * ```javascript\n * var btClient = require('braintree-web/client');\n * var btPayPal = require('braintree-web/paypal-checkout');\n *\n * paypal.Button.render({\n *   braintree: {\n *     client: btClient,\n *     paypalCheckout: btPayPal\n *   },\n *   client: {\n *     production: 'production_authorization',\n *     sandbox: 'sandbox_authorization'\n *   },\n *   // rest of checkout.js config\n * ```\n *\n * #### Create the Braintree components manually\n *\n * Alternatively, you can create the Braintree {@link moudle:braintree-web/client.create|client} and {@link moudle:braintree-web/paypal-checkout.create|PayPal Checkout} components manually. Use this integration style if you prefer to have some logic between receiving the authorized PayPal account and tokenizing it.\n *\n * ```javascript\n * braintree.client.create({\n *   authorization: 'authorization'\n * }).then(function (clientInstance) {\n *   return braintree.paypalCheckout.create({\n *     client: clientInstance\n *   });\n * }).then(function (paypalCheckoutInstance) {\n *   return paypal.Button.render({\n *     env: 'production', // or 'sandbox'\n *\n *     payment: function () {\n *       return paypalCheckoutInstance.createPayment({\n *         // your createPayment options here\n *       });\n *     },\n *\n *     onAuthorize: function (data, actions) {\n *       // some logic here before tokenization happens below\n *       return paypalCheckoutInstance.tokenizePayment(data).then(function (payload) {\n *         // Submit payload.nonce to your server\n *       });\n *     }\n *   }, '#paypal-button');\n * }).catch(function (err) {\n *  console.error('Error!', err);\n * });\n * ```\n */\nfunction PayPalCheckout(options) {\n  this._merchantAccountId = options.merchantAccountId;\n}\n\nPayPalCheckout.prototype._initialize = function (options) {\n  this._clientPromise = createDeferredClient.create({\n    authorization: options.authorization,\n    client: options.client,\n    debug: options.debug,\n    assetsUrl: createAssetsUrl.create(options.authorization),\n    name: 'PayPal Checkout'\n  }).then(function (client) {\n    this._configuration = client.getConfiguration();\n\n    // we skip these checks if a merchant account id is\n    // passed in, because the default merchant account\n    // may not have paypal enabled\n    if (!this._merchantAccountId) {\n      if (!this._configuration.gatewayConfiguration.paypalEnabled) {\n        this._setupError = new BraintreeError(errors.PAYPAL_NOT_ENABLED);\n      } else if (this._configuration.gatewayConfiguration.paypal.environmentNoNetwork === true) {\n        this._setupError = new BraintreeError(errors.PAYPAL_SANDBOX_ACCOUNT_NOT_LINKED);\n      }\n    }\n\n    if (this._setupError) {\n      return Promise.reject(this._setupError);\n    }\n\n    analytics.sendEvent(client, 'paypal-checkout.initialized');\n\n    return client;\n  }.bind(this));\n\n  // if client was passed in, let config checks happen before\n  // resolving the instance. Otherwise, just resolve the instance\n  if (options.client) {\n    return this._clientPromise.then(function () {\n      return this;\n    }.bind(this));\n  }\n\n  return Promise.resolve(this);\n};\n\n/**\n * @typedef {object} PayPalCheckout~lineItem\n * @property {string} quantity Number of units of the item purchased. This value must be a whole number and can't be negative or zero.\n * @property {string} unitAmount Per-unit price of the item. Can include up to 2 decimal places. This value can't be negative or zero.\n * @property {string} name Item name. Maximum 127 characters.\n * @property {string} kind Indicates whether the line item is a debit (sale) or credit (refund) to the customer. Accepted values: `debit` and `credit`.\n * @property {?string} unitTaxAmount Per-unit tax price of the item. Can include up to 2 decimal places. This value can't be negative or zero.\n * @property {?string} description Item description. Maximum 127 characters.\n * @property {?string} productCode Product or UPC code for the item. Maximum 127 characters.\n * @property {?string} url The URL to product information.\n */\n\n/**\n * Creates a PayPal payment ID or billing token using the given options. This is meant to be passed to PayPal's checkout.js library.\n * When a {@link callback} is defined, the function returns undefined and invokes the callback with the id to be used with the checkout.js library. Otherwise, it returns a Promise that resolves with the id.\n * @public\n * @param {object} options All options for the PayPalCheckout component.\n * @param {string} options.flow Set to 'checkout' for one-time payment flow, or 'vault' for Vault flow. If 'vault' is used with a client token generated with a customer ID, the PayPal account will be added to that customer as a saved payment method.\n * @param {string} [options.intent=authorize]\n * * `authorize` - Submits the transaction for authorization but not settlement.\n * * `order` - Validates the transaction without an authorization (i.e. without holding funds). Useful for authorizing and capturing funds up to 90 days after the order has been placed. Only available for Checkout flow.\n * * `sale` - Payment will be immediately submitted for settlement upon creating a transaction.\n * @param {boolean} [options.offerCredit=false] Offers PayPal Credit as the default funding instrument for the transaction. If the customer isn't pre-approved for PayPal Credit, they will be prompted to apply for it.\n * @param {string|number} [options.amount] The amount of the transaction. Required when using the Checkout flow.\n * @param {string} [options.currency] The currency code of the amount, such as 'USD'. Required when using the Checkout flow.\n * @param {string} [options.displayName] The merchant name displayed inside of the PayPal lightbox; defaults to the company name on your Braintree account\n * @param {string} [options.locale=en_US] Use this option to change the language, links, and terminology used in the PayPal flow. This locale will be used unless the buyer has set a preferred locale for their account. If an unsupported locale is supplied, a fallback locale (determined by buyer preference or browser data) will be used and no error will be thrown.\n *\n * Supported locales are:\n * `da_DK`,\n * `de_DE`,\n * `en_AU`,\n * `en_GB`,\n * `en_US`,\n * `es_ES`,\n * `fr_CA`,\n * `fr_FR`,\n * `id_ID`,\n * `it_IT`,\n * `ja_JP`,\n * `ko_KR`,\n * `nl_NL`,\n * `no_NO`,\n * `pl_PL`,\n * `pt_BR`,\n * `pt_PT`,\n * `ru_RU`,\n * `sv_SE`,\n * `th_TH`,\n * `zh_CN`,\n * `zh_HK`,\n * and `zh_TW`.\n *\n * @param {boolean} [options.enableShippingAddress=false] Returns a shipping address object in {@link PayPal#tokenize}.\n * @param {object} [options.shippingAddressOverride] Allows you to pass a shipping address you have already collected into the PayPal payment flow.\n * @param {string} options.shippingAddressOverride.line1 Street address.\n * @param {string} [options.shippingAddressOverride.line2] Street address (extended).\n * @param {string} options.shippingAddressOverride.city City.\n * @param {string} options.shippingAddressOverride.state State.\n * @param {string} options.shippingAddressOverride.postalCode Postal code.\n * @param {string} options.shippingAddressOverride.countryCode Country.\n * @param {string} [options.shippingAddressOverride.phone] Phone number.\n * @param {string} [options.shippingAddressOverride.recipientName] Recipient's name.\n * @param {boolean} [options.shippingAddressEditable=true] Set to false to disable user editing of the shipping address.\n * @param {string} [options.billingAgreementDescription] Use this option to set the description of the preapproved payment agreement visible to customers in their PayPal profile during Vault flows. Max 255 characters.\n * @param {string} [options.landingPageType] Use this option to specify the PayPal page to display when a user lands on the PayPal site to complete the payment.\n * * `login` - A PayPal account login page is used.\n * * `billing` - A non-PayPal account landing page is used.\n* @property {lineItem[]} [options.lineItems] The line items for this transaction. It can include up to 249 line items.\n * @param {callback} [callback] The second argument is a PayPal `paymentId` or `billingToken` string, depending on whether `options.flow` is `checkout` or `vault`. This is also what is resolved by the promise if no callback is provided.\n * @example\n * // this paypal object is created by checkout.js\n * // see https://github.com/paypal/paypal-checkout\n * paypal.Button.render({\n *   // when createPayment resolves, it is automatically passed to checkout.js\n *   payment: function () {\n *    return paypalCheckoutInstance.createPayment({\n *       flow: 'checkout',\n *       amount: '10.00',\n *       currency: 'USD',\n *       intent: 'sale'\n *     });\n *   },\n *   // Add other options, e.g. onAuthorize, env, locale\n * }, '#paypal-button');\n *\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nPayPalCheckout.prototype.createPayment = function (options) {\n  var self = this;\n  var endpoint;\n\n  if (!options || !constants.FLOW_ENDPOINTS.hasOwnProperty(options.flow)) {\n    return Promise.reject(new BraintreeError(errors.PAYPAL_FLOW_OPTION_REQUIRED));\n  }\n\n  endpoint = 'paypal_hermes/' + constants.FLOW_ENDPOINTS[options.flow];\n\n  analytics.sendEvent(this._clientPromise, 'paypal-checkout.createPayment');\n  if (options.offerCredit === true) {\n    analytics.sendEvent(this._clientPromise, 'paypal-checkout.credit.offered');\n  }\n\n  return this._clientPromise.then(function (client) {\n    return client.request({\n      endpoint: endpoint,\n      method: 'post',\n      data: self._formatPaymentResourceData(options)\n    });\n  }).then(function (response) {\n    var flowToken;\n\n    if (options.flow === 'checkout') {\n      flowToken = response.paymentResource.paymentToken;\n    } else {\n      flowToken = response.agreementSetup.tokenId;\n    }\n\n    return flowToken;\n  }).catch(function (err) {\n    var status;\n\n    if (self._setupError) {\n      return Promise.reject(self._setupError);\n    }\n\n    status = err.details && err.details.httpStatus;\n\n    if (status === 422) {\n      return Promise.reject(new BraintreeError({\n        type: errors.PAYPAL_INVALID_PAYMENT_OPTION.type,\n        code: errors.PAYPAL_INVALID_PAYMENT_OPTION.code,\n        message: errors.PAYPAL_INVALID_PAYMENT_OPTION.message,\n        details: {\n          originalError: err\n        }\n      }));\n    }\n\n    return Promise.reject(convertToBraintreeError(err, {\n      type: errors.PAYPAL_FLOW_FAILED.type,\n      code: errors.PAYPAL_FLOW_FAILED.code,\n      message: errors.PAYPAL_FLOW_FAILED.message\n    }));\n  });\n};\n\n/**\n * Tokenizes the authorize data from PayPal's checkout.js library when completing a buyer approval flow.\n * When a {@link callback} is defined, invokes the callback with {@link PayPalCheckout~tokenizePayload|tokenizePayload} and returns undefined. Otherwise, returns a Promise that resolves with a {@link PayPalCheckout~tokenizePayload|tokenizePayload}.\n * @public\n * @param {object} tokenizeOptions Tokens and IDs required to tokenize the payment.\n * @param {string} tokenizeOptions.payerId Payer ID returned by PayPal `onAuthorize` callback.\n * @param {string} [tokenizeOptions.paymentId] Payment ID returned by PayPal `onAuthorize` callback.\n * @param {string} [tokenizeOptions.billingToken] Billing Token returned by PayPal `onAuthorize` callback.\n * @param {callback} [callback] The second argument, <code>payload</code>, is a {@link PayPalCheckout~tokenizePayload|tokenizePayload}. If no callback is provided, the promise resolves with a {@link PayPalCheckout~tokenizePayload|tokenizePayload}.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nPayPalCheckout.prototype.tokenizePayment = function (tokenizeOptions) {\n  var self = this;\n  var payload;\n  var options = {\n    flow: tokenizeOptions.billingToken ? 'vault' : 'checkout',\n    intent: tokenizeOptions.intent\n  };\n  var params = {\n    // The paymentToken provided by Checkout.js v4 is the ECToken\n    ecToken: tokenizeOptions.paymentToken,\n    billingToken: tokenizeOptions.billingToken,\n    payerId: tokenizeOptions.payerID,\n    paymentId: tokenizeOptions.paymentID\n  };\n\n  analytics.sendEvent(this._clientPromise, 'paypal-checkout.tokenization.started');\n\n  return this._clientPromise.then(function (client) {\n    return client.request({\n      endpoint: 'payment_methods/paypal_accounts',\n      method: 'post',\n      data: self._formatTokenizeData(options, params)\n    });\n  }).then(function (response) {\n    payload = self._formatTokenizePayload(response);\n\n    analytics.sendEvent(self._clientPromise, 'paypal-checkout.tokenization.success');\n    if (payload.creditFinancingOffered) {\n      analytics.sendEvent(self._clientPromise, 'paypal-checkout.credit.accepted');\n    }\n\n    return payload;\n  }).catch(function (err) {\n    if (self._setupError) {\n      return Promise.reject(self._setupError);\n    }\n\n    analytics.sendEvent(self._clientPromise, 'paypal-checkout.tokenization.failed');\n\n    return Promise.reject(convertToBraintreeError(err, {\n      type: errors.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.type,\n      code: errors.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.code,\n      message: errors.PAYPAL_ACCOUNT_TOKENIZATION_FAILED.message\n    }));\n  });\n};\n\nPayPalCheckout.prototype._formatPaymentResourceData = function (options) {\n  var key;\n  var gatewayConfiguration = this._configuration.gatewayConfiguration;\n  var paymentResource = {\n    // returnUrl and cancelUrl are required in hermes create_payment_resource route\n    // but are not validated and are not actually used with checkout.js\n    returnUrl: 'x',\n    cancelUrl: 'x',\n    offerPaypalCredit: options.offerCredit === true,\n    merchantAccountId: this._merchantAccountId,\n    experienceProfile: {\n      brandName: options.displayName || gatewayConfiguration.paypal.displayName,\n      localeCode: options.locale,\n      noShipping: (!options.enableShippingAddress).toString(),\n      addressOverride: options.shippingAddressEditable === false,\n      landingPageType: options.landingPageType\n    }\n  };\n\n  if (options.flow === 'checkout') {\n    paymentResource.amount = options.amount;\n    paymentResource.currencyIsoCode = options.currency;\n\n    if (options.hasOwnProperty('intent')) {\n      paymentResource.intent = options.intent;\n    }\n\n    if (options.hasOwnProperty('lineItems')) {\n      paymentResource.lineItems = options.lineItems;\n    }\n\n    for (key in options.shippingAddressOverride) {\n      if (options.shippingAddressOverride.hasOwnProperty(key)) {\n        paymentResource[key] = options.shippingAddressOverride[key];\n      }\n    }\n  } else {\n    paymentResource.shippingAddress = options.shippingAddressOverride;\n\n    if (options.billingAgreementDescription) {\n      paymentResource.description = options.billingAgreementDescription;\n    }\n  }\n\n  return paymentResource;\n};\n\nPayPalCheckout.prototype._formatTokenizeData = function (options, params) {\n  var clientConfiguration = this._configuration;\n  var gatewayConfiguration = clientConfiguration.gatewayConfiguration;\n  var isTokenizationKey = clientConfiguration.authorizationType === 'TOKENIZATION_KEY';\n  var data = {\n    paypalAccount: {\n      correlationId: params.billingToken || params.ecToken,\n      options: {\n        validate: options.flow === 'vault' && !isTokenizationKey\n      }\n    }\n  };\n\n  if (params.billingToken) {\n    data.paypalAccount.billingAgreementToken = params.billingToken;\n  } else {\n    data.paypalAccount.paymentToken = params.paymentId;\n    data.paypalAccount.payerId = params.payerId;\n    data.paypalAccount.unilateral = gatewayConfiguration.paypal.unvettedMerchant;\n\n    if (options.intent) {\n      data.paypalAccount.intent = options.intent;\n    }\n    if (this._merchantAccountId) {\n      data.merchantAccountId = this._merchantAccountId;\n    }\n  }\n\n  return data;\n};\n\nPayPalCheckout.prototype._formatTokenizePayload = function (response) {\n  var payload;\n  var account = {};\n\n  if (response.paypalAccounts) {\n    account = response.paypalAccounts[0];\n  }\n\n  payload = {\n    nonce: account.nonce,\n    details: {},\n    type: account.type\n  };\n\n  if (account.details && account.details.payerInfo) {\n    payload.details = account.details.payerInfo;\n  }\n\n  if (account.details && account.details.creditFinancingOffered) {\n    payload.creditFinancingOffered = account.details.creditFinancingOffered;\n  }\n\n  return payload;\n};\n\n/**\n * Cleanly tear down anything set up by {@link module:braintree-web/paypal-checkout.create|create}.\n * @public\n * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.\n * @example\n * paypalCheckoutInstance.teardown();\n * @example <caption>With callback</caption>\n * paypalCheckoutInstance.teardown(function () {\n *   // teardown is complete\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nPayPalCheckout.prototype.teardown = function () {\n  convertMethodsToError(this, methods(PayPalCheckout.prototype));\n\n  return Promise.resolve();\n};\n\nmodule.exports = wrapPromise.wrapPrototype(PayPalCheckout);\n\n},{\"../lib/analytics\":67,\"../lib/braintree-error\":72,\"../lib/convert-methods-to-error\":77,\"../lib/convert-to-braintree-error\":78,\"../lib/create-assets-url\":79,\"../lib/create-deferred-client\":81,\"../lib/methods\":93,\"../lib/promise\":95,\"../paypal/shared/constants\":103,\"./errors\":100,\"@braintree/wrap-promise\":26}],103:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  LANDING_FRAME_NAME: 'braintreepaypallanding',\n  FLOW_ENDPOINTS: {\n    checkout: 'create_payment_resource',\n    vault: 'setup_billing_agreement'\n  }\n};\n\n},{}],104:[function(require,module,exports){\n'use strict';\n\nvar BraintreeError = require('../../lib/braintree-error');\nvar analytics = require('../../lib/analytics');\nvar assign = require('../../lib/assign').assign;\nvar methods = require('../../lib/methods');\nvar convertMethodsToError = require('../../lib/convert-methods-to-error');\nvar constants = require('../shared/constants');\nvar useMin = require('../../lib/use-min');\nvar Bus = require('../../lib/bus');\nvar uuid = require('../../lib/vendor/uuid');\nvar deferred = require('../../lib/deferred');\nvar errors = require('../shared/errors');\nvar events = require('../shared/events');\nvar VERSION = \"3.42.0\";\nvar iFramer = require('@braintree/iframer');\nvar Promise = require('../../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\n\nvar IFRAME_HEIGHT = 400;\nvar IFRAME_WIDTH = 400;\n\n/**\n * @typedef {object} ThreeDSecure~verifyPayload\n * @property {string} nonce The new payment method nonce produced by the 3D Secure lookup. The original nonce passed into {@link ThreeDSecure#verifyCard|verifyCard} was consumed. This new nonce should be used to transact on your server.\n * @property {object} details Additional account details.\n * @property {string} details.cardType Type of card, ex: Visa, MasterCard.\n * @property {string} details.lastFour Last four digits of card number.\n * @property {string} details.lastTwo Last two digits of card number.\n * @property {string} description A human-readable description.\n * @property {object} binData Information about the card based on the bin.\n * @property {string} binData.commercial Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.countryOfIssuance The country of issuance.\n * @property {string} binData.debit Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.healthcare Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.issuingBank The issuing bank.\n * @property {string} binData.payroll Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.prepaid Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} binData.productId The product id.\n * @property {boolean} liabilityShiftPossible Indicates whether the card was eligible for 3D Secure.\n * @property {boolean} liabilityShifted Indicates whether the liability for fraud has been shifted away from the merchant.\n */\n\n/**\n * @class\n * @param {object} options 3D Secure {@link module:braintree-web/three-d-secure.create create} options\n * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/three-d-secure.create|braintree.threeDSecure.create} instead.</strong>\n * @classdesc This class represents a ThreeDSecure component produced by {@link module:braintree-web/three-d-secure.create|braintree.threeDSecure.create}. Instances of this class have a method for launching a 3D Secure authentication flow.\n */\nfunction ThreeDSecure(options) {\n  this._options = options;\n  this._assetsUrl = options.client.getConfiguration().gatewayConfiguration.assetsUrl;\n  this._isDebug = options.client.getConfiguration().isDebug;\n  this._client = options.client;\n}\n\n/**\n * @callback ThreeDSecure~addFrameCallback\n * @param {?BraintreeError} [err] `null` or `undefined` if there was no error.\n * @param {HTMLIFrameElement} iframe An iframe element containing the bank's authentication page that you must put on your page.\n * @description The callback used for options.addFrame in {@link ThreeDSecure#verifyCard|verifyCard}.\n * @returns {void}\n */\n\n/**\n * @callback ThreeDSecure~removeFrameCallback\n * @description The callback used for options.removeFrame in {@link ThreeDSecure#verifyCard|verifyCard}.\n * @returns {void}\n */\n\n/**\n * Launch the 3D Secure login flow, returning a nonce payload.\n * @public\n * @param {object} options Options for card verification.\n * @param {string} options.nonce A nonce referencing the card to be verified. For example, this can be a nonce that was returned by Hosted Fields.\n * @param {number} options.amount The amount of the transaction in the current merchant account's currency. For example, if you are running a transaction of $123.45 US dollars, `amount` would be 123.45.\n * @param {callback} options.addFrame This {@link ThreeDSecure~addFrameCallback|addFrameCallback} will be called when the bank frame needs to be added to your page.\n * @param {callback} options.removeFrame This {@link ThreeDSecure~removeFrameCallback|removeFrameCallback} will be called when the bank frame needs to be removed from your page.\n * @param {string} [options.customer.mobilePhoneNumber] The mobile phone number used for verification. Only numbers; remove dashes, paranthesis and other characters.\n * @param {string} [options.customer.email] The email used for verification.\n * @param {string} [options.customer.shippingMethod] The 2-digit string indicating the shipping method chosen for the transaction.\n * @param {string} [options.customer.billingAddress.firstName] The first name associated with the address.\n * @param {string} [options.customer.billingAddress.lastName] The last name associated with the address.\n * @param {string} [options.customer.billingAddress.streetAddress] Line 1 of the Address (eg. number, street, etc).\n * @param {string} [options.customer.billingAddress.extendedAddress] Line 2 of the Address (eg. suite, apt #, etc.).\n * @param {string} [options.customer.billingAddress.locality] The locality (city) name associated with the address.\n * @param {string} [options.customer.billingAddress.region] The 2 letter code for US states, and the equivalent for other countries.\n * @param {string} [options.customer.billingAddress.postalCode] The zip code or equivalent for countries that have them.\n * @param {string} [options.customer.billingAddress.countryCodeAlpha2] The 2 character country code.\n * @param {string} [options.customer.billingAddress.phoneNumber] The phone number associated with the address. Only numbers; remove dashes, paranthesis and other characters.\n * @param {boolean} [options.showLoader=true] Whether to show the loader icon while the bank frame is loading.\n * @param {callback} [callback] The second argument, <code>data</code>, is a {@link ThreeDSecure~verifyPayload|verifyPayload}. If no callback is provided, it will return a promise that resolves {@link ThreeDSecure~verifyPayload|verifyPayload}.\n\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * <caption>Verifying an existing nonce with 3DS</caption>\n * var my3DSContainer;\n *\n * threeDSecure.verifyCard({\n *   nonce: existingNonce,\n *   amount: 123.45,\n *   addFrame: function (err, iframe) {\n *     // Set up your UI and add the iframe.\n *     my3DSContainer = document.createElement('div');\n *     my3DSContainer.appendChild(iframe);\n *     document.body.appendChild(my3DSContainer);\n *   },\n *   removeFrame: function () {\n *     // Remove UI that you added in addFrame.\n *     document.body.removeChild(my3DSContainer);\n *   }\n * }, function (err, payload) {\n *   if (err) {\n *     console.error(err);\n *     return;\n *   }\n *\n *   if (payload.liabilityShifted) {\n *     // Liablity has shifted\n *     submitNonceToServer(payload.nonce);\n *   } else if (payload.liabilityShiftPossible) {\n *     // Liablity may still be shifted\n *     // Decide if you want to submit the nonce\n *   } else {\n *     // Liablity has not shifted and will not shift\n *     // Decide if you want to submit the nonce\n *   }\n * });\n */\nThreeDSecure.prototype.verifyCard = function (options) {\n  var url, showLoader, addFrame, removeFrame, error, errorOption;\n  var self = this;\n\n  options = assign({}, options);\n\n  if (options.customer && options.customer.billingAddress) {\n    // map from public API to the API that the Gateway expects\n    options.customer.billingAddress.line1 = options.customer.billingAddress.streetAddress;\n    options.customer.billingAddress.line2 = options.customer.billingAddress.extendedAddress;\n    options.customer.billingAddress.city = options.customer.billingAddress.locality;\n    options.customer.billingAddress.state = options.customer.billingAddress.region;\n    options.customer.billingAddress.countryCode = options.customer.billingAddress.countryCodeAlpha2;\n    delete options.customer.billingAddress.streetAddress;\n    delete options.customer.billingAddress.extendedAddress;\n    delete options.customer.billingAddress.locality;\n    delete options.customer.billingAddress.region;\n    delete options.customer.billingAddress.countryCodeAlpha2;\n  }\n\n  if (this._verifyCardInProgress === true) {\n    error = errors.THREEDS_AUTHENTICATION_IN_PROGRESS;\n  } else if (!options.nonce) {\n    errorOption = 'a nonce';\n  } else if (!options.amount) {\n    errorOption = 'an amount';\n  } else if (typeof options.addFrame !== 'function') {\n    errorOption = 'an addFrame function';\n  } else if (typeof options.removeFrame !== 'function') {\n    errorOption = 'a removeFrame function';\n  }\n\n  if (errorOption) {\n    error = {\n      type: errors.THREEDS_MISSING_VERIFY_CARD_OPTION.type,\n      code: errors.THREEDS_MISSING_VERIFY_CARD_OPTION.code,\n      message: 'verifyCard options must include ' + errorOption + '.'\n    };\n  }\n\n  if (error) {\n    return Promise.reject(new BraintreeError(error));\n  }\n\n  showLoader = options.showLoader !== false;\n\n  this._verifyCardInProgress = true;\n\n  addFrame = deferred(options.addFrame);\n  removeFrame = deferred(options.removeFrame);\n\n  url = 'payment_methods/' + options.nonce + '/three_d_secure/lookup';\n\n  return this._client.request({\n    endpoint: url,\n    method: 'post',\n    data: {amount: options.amount, customer: options.customer}\n  }).then(function (response) {\n    self._lookupPaymentMethod = response.paymentMethod;\n\n    return new Promise(function (resolve, reject) {\n      self._verifyCardCallback = function (verifyErr, payload) {\n        self._verifyCardInProgress = false;\n\n        if (verifyErr) {\n          reject(verifyErr);\n        } else {\n          resolve(payload);\n        }\n      };\n\n      self._handleLookupResponse({\n        showLoader: showLoader,\n        lookupResponse: response,\n        addFrame: addFrame,\n        removeFrame: removeFrame\n      });\n    });\n  }).catch(function (err) {\n    self._verifyCardInProgress = false;\n\n    return Promise.reject(err);\n  });\n};\n\n/**\n * Cancel the 3DS flow and return the verification payload if available.\n * @public\n * @param {callback} [callback] The second argument is a {@link ThreeDSecure~verifyPayload|verifyPayload}. If there is no verifyPayload (the initial lookup did not complete), an error will be returned. If no callback is passed, `cancelVerifyCard` will return a promise.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * threeDSecure.cancelVerifyCard(function (err, verifyPayload) {\n *   if (err) {\n *     // Handle error\n *     console.log(err.message); // No verification payload available\n *     return;\n *   }\n *\n *   verifyPayload.nonce; // The nonce returned from the 3ds lookup call\n *   verifyPayload.liabilityShifted; // boolean\n *   verifyPayload.liabilityShiftPossible; // boolean\n * });\n */\nThreeDSecure.prototype.cancelVerifyCard = function () {\n  var response;\n\n  this._verifyCardInProgress = false;\n\n  if (!this._lookupPaymentMethod) {\n    return Promise.reject(new BraintreeError(errors.THREEDS_NO_VERIFICATION_PAYLOAD));\n  }\n\n  response = assign({}, this._lookupPaymentMethod, {\n    liabilityShiftPossible: this._lookupPaymentMethod.threeDSecureInfo.liabilityShiftPossible,\n    liabilityShifted: this._lookupPaymentMethod.threeDSecureInfo.liabilityShifted,\n    verificationDetails: this._lookupPaymentMethod.threeDSecureInfo.verificationDetails\n  });\n\n  return Promise.resolve(response);\n};\n\nThreeDSecure.prototype._handleLookupResponse = function (options) {\n  var details;\n  var lookupResponse = options.lookupResponse;\n\n  if (lookupResponse.lookup && lookupResponse.lookup.acsUrl && lookupResponse.lookup.acsUrl.length > 0) {\n    options.addFrame(null, this._createIframe({\n      showLoader: options.showLoader,\n      response: lookupResponse.lookup,\n      removeFrame: options.removeFrame\n    }));\n  } else {\n    details = this._formatAuthResponse(lookupResponse.paymentMethod, lookupResponse.threeDSecureInfo);\n    details.verificationDetails = lookupResponse.threeDSecureInfo;\n\n    this._verifyCardCallback(null, details);\n  }\n};\n\nThreeDSecure.prototype._createIframe = function (options) {\n  var url, authenticationCompleteBaseUrl;\n  var parentURL = window.location.href;\n  var response = options.response;\n\n  this._bus = new Bus({\n    channel: uuid(),\n    merchantUrl: location.href\n  });\n\n  authenticationCompleteBaseUrl = this._assetsUrl + '/web/' + VERSION + '/html/three-d-secure-authentication-complete-frame.html?channel=' + encodeURIComponent(this._bus.channel) + '&';\n\n  if (parentURL.indexOf('#') > -1) {\n    parentURL = parentURL.split('#')[0];\n  }\n\n  this._bus.on(Bus.events.CONFIGURATION_REQUEST, function (reply) {\n    reply({\n      acsUrl: response.acsUrl,\n      pareq: response.pareq,\n      termUrl: response.termUrl + '&three_d_secure_version=' + VERSION + '&authentication_complete_base_url=' + encodeURIComponent(authenticationCompleteBaseUrl),\n      md: response.md,\n      parentUrl: parentURL\n    });\n  });\n\n  this._bus.on(events.AUTHENTICATION_COMPLETE, function (data) {\n    this._handleAuthResponse(data, options);\n  }.bind(this));\n\n  url = this._assetsUrl + '/web/' + VERSION + '/html/three-d-secure-bank-frame' + useMin(this._isDebug) + '.html?showLoader=' + options.showLoader;\n\n  this._bankIframe = iFramer({\n    src: url,\n    height: IFRAME_HEIGHT,\n    width: IFRAME_WIDTH,\n    name: constants.LANDING_FRAME_NAME + '_' + this._bus.channel,\n    title: '3D Secure Authorization Frame'\n  });\n\n  return this._bankIframe;\n};\n\nThreeDSecure.prototype._handleAuthResponse = function (data, options) {\n  var authResponse = JSON.parse(data.auth_response);\n\n  this._bus.teardown();\n\n  options.removeFrame();\n\n  // This also has to be in a setTimeout so it executes after the `removeFrame`.\n  deferred(function () {\n    if (authResponse.success) {\n      this._verifyCardCallback(null, this._formatAuthResponse(authResponse.paymentMethod, authResponse.threeDSecureInfo));\n    } else if (authResponse.threeDSecureInfo && authResponse.threeDSecureInfo.liabilityShiftPossible) {\n      this._verifyCardCallback(null, this._formatAuthResponse(this._lookupPaymentMethod, authResponse.threeDSecureInfo));\n    } else {\n      this._verifyCardCallback(new BraintreeError({\n        type: BraintreeError.types.UNKNOWN,\n        code: 'UNKNOWN_AUTH_RESPONSE',\n        message: authResponse.error.message\n      }));\n    }\n  }.bind(this))();\n};\n\nThreeDSecure.prototype._formatAuthResponse = function (paymentMethod, threeDSecureInfo) {\n  return {\n    nonce: paymentMethod.nonce,\n    binData: paymentMethod.binData,\n    details: paymentMethod.details,\n    description: paymentMethod.description && paymentMethod.description.replace(/\\+/g, ' '),\n    liabilityShifted: threeDSecureInfo.liabilityShifted,\n    liabilityShiftPossible: threeDSecureInfo.liabilityShiftPossible\n  };\n};\n\n/**\n * Cleanly remove anything set up by {@link module:braintree-web/three-d-secure.create|create}.\n * @public\n * @param {callback} [callback] Called on completion. If no callback is passed, `teardown` will return a promise.\n * @example\n * threeDSecure.teardown();\n * @example <caption>With callback</caption>\n * threeDSecure.teardown(function () {\n *   // teardown is complete\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nThreeDSecure.prototype.teardown = function () {\n  var iframeParent;\n\n  convertMethodsToError(this, methods(ThreeDSecure.prototype));\n\n  analytics.sendEvent(this._options.client, 'threedsecure.teardown-completed');\n\n  if (this._bus) {\n    this._bus.teardown();\n  }\n\n  if (this._bankIframe) {\n    iframeParent = this._bankIframe.parentNode;\n\n    if (iframeParent) {\n      iframeParent.removeChild(this._bankIframe);\n    }\n  }\n\n  return Promise.resolve();\n};\n\nmodule.exports = wrapPromise.wrapPrototype(ThreeDSecure);\n\n},{\"../../lib/analytics\":67,\"../../lib/assign\":69,\"../../lib/braintree-error\":72,\"../../lib/bus\":75,\"../../lib/convert-methods-to-error\":77,\"../../lib/deferred\":82,\"../../lib/methods\":93,\"../../lib/promise\":95,\"../../lib/use-min\":97,\"../../lib/vendor/uuid\":99,\"../shared/constants\":106,\"../shared/errors\":107,\"../shared/events\":108,\"@braintree/iframer\":19,\"@braintree/wrap-promise\":26}],105:[function(require,module,exports){\n'use strict';\n/** @module braintree-web/three-d-secure */\n\nvar ThreeDSecure = require('./external/three-d-secure');\nvar isHTTPS = require('../lib/is-https').isHTTPS;\nvar basicComponentVerification = require('../lib/basic-component-verification');\nvar createDeferredClient = require('../lib/create-deferred-client');\nvar createAssetsUrl = require('../lib/create-assets-url');\nvar BraintreeError = require('../lib/braintree-error');\nvar analytics = require('../lib/analytics');\nvar errors = require('./shared/errors');\nvar VERSION = \"3.42.0\";\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\n\n/**\n * @static\n * @function create\n * @param {object} options Creation options:\n * @param {Client} [options.client] A {@link Client} instance.\n * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.\n * @param {callback} [callback] The second argument, `data`, is the {@link ThreeDSecure} instance. If no callback is provided, it returns a promise that resolves the {@link ThreeDSecure} instance.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nfunction create(options) {\n  var name = '3D Secure';\n\n  return basicComponentVerification.verify({\n    name: name,\n    client: options.client,\n    authorization: options.authorization\n  }).then(function () {\n    return createDeferredClient.create({\n      authorization: options.authorization,\n      client: options.client,\n      debug: options.debug,\n      assetsUrl: createAssetsUrl.create(options.authorization),\n      name: name\n    });\n  }).then(function (client) {\n    var error, isProduction;\n    var config = client.getConfiguration();\n\n    options.client = client;\n\n    if (!config.gatewayConfiguration.threeDSecureEnabled) {\n      error = errors.THREEDS_NOT_ENABLED;\n    }\n\n    if (config.authorizationType === 'TOKENIZATION_KEY') {\n      error = errors.THREEDS_CAN_NOT_USE_TOKENIZATION_KEY;\n    }\n\n    isProduction = config.gatewayConfiguration.environment === 'production';\n\n    if (isProduction && !isHTTPS()) {\n      error = errors.THREEDS_HTTPS_REQUIRED;\n    }\n\n    if (error) {\n      return Promise.reject(new BraintreeError(error));\n    }\n\n    analytics.sendEvent(options.client, 'threedsecure.initialized');\n\n    return new ThreeDSecure(options);\n  });\n}\n\nmodule.exports = {\n  create: wrapPromise(create),\n  /**\n   * @description The current version of the SDK, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"../lib/analytics\":67,\"../lib/basic-component-verification\":70,\"../lib/braintree-error\":72,\"../lib/create-assets-url\":79,\"../lib/create-deferred-client\":81,\"../lib/is-https\":90,\"../lib/promise\":95,\"./external/three-d-secure\":104,\"./shared/errors\":107,\"@braintree/wrap-promise\":26}],106:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  LANDING_FRAME_NAME: 'braintreethreedsecurelanding'\n};\n\n},{}],107:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.3D Secure - Creation Error Codes\n * @description Errors that occur when [creating the 3D Secure component](/current/module-braintree-web_three-d-secure.html#.create).\n * @property {MERCHANT} THREEDS_NOT_ENABLED Occurs when 3D Secure is not enabled in the Braintree control panel.\n * @property {MERCHANT} THREEDS_CAN_NOT_USE_TOKENIZATION_KEY Occurs when 3D Secure component is created without a Client Token.\n * @property {MERCHANT} THREEDS_HTTPS_REQUIRED Occurs when 3D Secure component is created in production over HTTPS.\n */\n\n/**\n * @name BraintreeError.3D Secure - verifyCard Error Codes\n * @description Errors that occur when using the [`verifyCard` method](/current/ThreeDSecure.html#verifyCard).\n * @property {MERCHANT} THREEDS_AUTHENTICATION_IN_PROGRESS Occurs when another verification is already in progress.\n * @property {MERCHANT} THREEDS_MISSING_VERIFY_CARD_OPTION Occurs when a required option is missing.\n */\n\n/**\n * @name BraintreeError.3D Secure - cancelVerifyCard Error Codes\n * @description Errors that occur when using the [`cancelVerifyCard` method](/current/ThreeDSecure.html#cancelVerifyCard).\n * @property {MERCHANT} THREEDS_NO_VERIFICATION_PAYLOAD Occurs when the 3D Secure flow is cancelled, but there is no 3D Secure information available.\n */\n\n/**\n * @name BraintreeError.3D Secure - Internal Error Codes\n * @ignore\n * @description Errors that occur internally\n * @property {INTERNAL} THREEDS_TERM_URL_REQUIRES_BRAINTREE_DOMAIN Occurs when iframe is initialized on a non-verified domain.\n */\n\nvar BraintreeError = require('../../lib/braintree-error');\n\nmodule.exports = {\n  THREEDS_NOT_ENABLED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'THREEDS_NOT_ENABLED',\n    message: '3D Secure is not enabled for this merchant.'\n  },\n  THREEDS_CAN_NOT_USE_TOKENIZATION_KEY: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'THREEDS_CAN_NOT_USE_TOKENIZATION_KEY',\n    message: '3D Secure can not use a tokenization key for authorization.'\n  },\n  THREEDS_HTTPS_REQUIRED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'THREEDS_HTTPS_REQUIRED',\n    message: '3D Secure requires HTTPS.'\n  },\n  THREEDS_AUTHENTICATION_IN_PROGRESS: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'THREEDS_AUTHENTICATION_IN_PROGRESS',\n    message: 'Cannot call verifyCard while existing authentication is in progress.'\n  },\n  THREEDS_MISSING_VERIFY_CARD_OPTION: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'THREEDS_MISSING_VERIFY_CARD_OPTION'\n  },\n  THREEDS_NO_VERIFICATION_PAYLOAD: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'THREEDS_NO_VERIFICATION_PAYLOAD',\n    message: 'No verification payload available.'\n  },\n  THREEDS_TERM_URL_REQUIRES_BRAINTREE_DOMAIN: {\n    type: BraintreeError.types.INTERNAL,\n    code: 'THREEDS_TERM_URL_REQUIRES_BRAINTREE_DOMAIN',\n    message: 'Term Url must be on a Braintree domain.'\n  }\n};\n\n},{\"../../lib/braintree-error\":72}],108:[function(require,module,exports){\n'use strict';\n\nvar enumerate = require('../../lib/enumerate');\n\nmodule.exports = enumerate([\n  'AUTHENTICATION_COMPLETE'\n], 'threedsecure:');\n\n},{\"../../lib/enumerate\":84}],109:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.Vault Manager - deletePaymentMethod Error Codes\n * @description Errors that occur when using the [`deletePaymentMethod` method](/current/VaultManager.html#deletePaymentMethod).\n * @property {MERCHANT} VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN Occurs when vault manager is initalized with a tokenization key instead of a Client Token.\n * @property {MERCHANT} VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND Occurs when the specified payment method can not be found.\n * @property {UNKNOWN} VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR Occurs when there is an error attempting to delete the payment method.\n */\n\nvar BraintreeError = require('../lib/braintree-error');\n\nmodule.exports = {\n  VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN',\n    message: 'A client token with a customer id must be used to delete a payment method nonce.'\n  },\n  VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND'\n  },\n  VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR: {\n    type: BraintreeError.types.UNKNOWN,\n    code: 'VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR'\n  }\n};\n\n},{\"../lib/braintree-error\":72}],110:[function(require,module,exports){\n'use strict';\n/**\n * @module braintree-web/vault-manager\n * @description Manages customer's payment methods.\n */\n\nvar basicComponentVerification = require('../lib/basic-component-verification');\nvar createDeferredClient = require('../lib/create-deferred-client');\nvar createAssetsUrl = require('../lib/create-assets-url');\nvar VaultManager = require('./vault-manager');\nvar VERSION = \"3.42.0\";\nvar wrapPromise = require('@braintree/wrap-promise');\n\n/**\n * @static\n * @function create\n * @param {object} options Creation options:\n * @param {Client} [options.client] A {@link Client} instance.\n * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.\n * @param {callback} callback The second argument, `data`, is the {@link VaultManager} instance.\n * @returns {void}\n */\nfunction create(options) {\n  var name = 'Vault Manager';\n\n  return basicComponentVerification.verify({\n    name: name,\n    client: options.client,\n    authorization: options.authorization\n  }).then(function () {\n    return createDeferredClient.create({\n      authorization: options.authorization,\n      client: options.client,\n      debug: options.debug,\n      assetsUrl: createAssetsUrl.create(options.authorization),\n      name: name\n    });\n  }).then(function (client) {\n    options.client = client;\n\n    return new VaultManager(options);\n  });\n}\n\nmodule.exports = {\n  create: wrapPromise(create),\n  /**\n   * @description The current version of the SDK, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"../lib/basic-component-verification\":70,\"../lib/create-assets-url\":79,\"../lib/create-deferred-client\":81,\"./vault-manager\":111,\"@braintree/wrap-promise\":26}],111:[function(require,module,exports){\n'use strict';\n\nvar analytics = require('../lib/analytics');\nvar BraintreeError = require('../lib/braintree-error');\nvar errors = require('./errors');\nvar convertMethodsToError = require('../lib/convert-methods-to-error');\nvar methods = require('../lib/methods');\nvar Promise = require('../lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\n\nvar DELETE_PAYMENT_METHOD_MUTATION = 'mutation DeletePaymentMethodFromSingleUseToken($input: DeletePaymentMethodFromSingleUseTokenInput!) {' +\n'  deletePaymentMethodFromSingleUseToken(input: $input) {' +\n'    clientMutationId' +\n'  }' +\n'}';\n\n/**\n * @typedef {array} VaultManager~fetchPaymentMethodsPayload The customer's payment methods.\n * @property {object} paymentMethod The payment method object.\n * @property {string} paymentMethod.nonce A nonce that can be sent to your server to transact on the payment method.\n * @property {boolean} paymentMethod.default Whether or not this is the default payment method for the customer.\n * @property {object} paymentMethod.details Any additional details about the payment method. Varies depending on the type of payment method.\n * @property {string} paymentMethod.type A constant indicating the type of payment method.\n * @property {?string} paymentMethod.description Additional description about the payment method.\n * @property {?object} paymentMethod.binData Bin data about the payment method.\n *\n */\n\n/**\n * @class\n * @param {object} options Options\n * @description <strong>You cannot use this constructor directly. Use {@link module:braintree-web/vault-manager.create|braintree.vault-manager.create} instead.</strong>\n * @classdesc This class allows you to manage a customer's payment methods on the client.\n */\nfunction VaultManager(options) {\n  this._client = options.client;\n}\n\n/**\n * Fetches payment methods owned by the customer whose id was used to generate the client token used to create the {@link module:braintree-web/client|client}.\n * @public\n * @param {object} [options] Options for fetching payment methods.\n * @param {boolean} [options.defaultFirst = false] If `true`, the payment methods will be returned with the default payment method for the customer first. Otherwise, the payment methods will be returned with the most recently used payment method first.\n * @param {callback} [callback] The second argument is a {@link VaultManager~fetchPaymentMethodsPayload|fetchPaymentMehodsPayload}. This is also what is resolved by the promise if no callback is provided.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * vaultManagerInstance.fetchPaymentMethods(function (err, paymentMethods) {\n *   paymentMethods.forEach(function (paymentMethod) {\n *     // add payment method to UI\n *     // paymentMethod.nonce <- transactable nonce associated with payment method\n *     // paymentMethod.details <- object with additional information about payment method\n *     // paymentMethod.type <- a constant signifying the type\n *   });\n * });\n */\nVaultManager.prototype.fetchPaymentMethods = function (options) {\n  var defaultFirst;\n\n  options = options || {};\n\n  defaultFirst = options.defaultFirst === true ? 1 : 0;\n\n  return this._client.request({\n    endpoint: 'payment_methods',\n    method: 'get',\n    data: {\n      defaultFirst: defaultFirst\n    }\n  }).then(function (paymentMethodsPayload) {\n    analytics.sendEvent(this._client, 'vault-manager.fetch-payment-methods.succeeded');\n\n    return paymentMethodsPayload.paymentMethods.map(formatPaymentMethodPayload);\n  }.bind(this));\n};\n\n// TODO hide from jsdoc for now until the GraphQL API is on for all merchants by default\n/**\n * Deletes a payment method owned by the customer whose id was used to generate the client token used to create the {@link module:braintree-web/client|client}.\n * @public\n * @ignore\n * @param {string} paymentMethodNonce The payment method nonce that references a vaulted payment method.\n * @param {callback} [callback] No data is returned if the operation is successful.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * vaultManagerInstance.deletePaymentMethod('nonce-to-delete', function (err) {\n *   // handle err if it exists\n * });\n */\nVaultManager.prototype.deletePaymentMethod = function (paymentMethodNonce) {\n  var client = this._client;\n  var usesClientToken = this._client.getConfiguration().authorizationType === 'CLIENT_TOKEN';\n\n  if (!usesClientToken) {\n    return Promise.reject(new BraintreeError(errors.VAULT_MANAGER_DELETE_PAYMENT_METHOD_NONCE_REQUIRES_CLIENT_TOKEN));\n  }\n\n  return this._client.request({\n    api: 'graphQLApi',\n    data: {\n      query: DELETE_PAYMENT_METHOD_MUTATION,\n      variables: {\n        input: {\n          singleUseTokenId: paymentMethodNonce\n        }\n      },\n      operationName: 'DeletePaymentMethodFromSingleUseToken'\n    }\n  }).then(function () {\n    analytics.sendEvent(client, 'vault-manager.delete-payment-method.succeeded');\n\n    // noop to prevent sending back the raw graphql data\n  }).catch(function (error) {\n    var originalError = error.details.originalError;\n    var formattedError;\n\n    analytics.sendEvent(client, 'vault-manager.delete-payment-method.failed');\n\n    if (originalError[0] && originalError[0].extensions.errorClass === 'NOT_FOUND') {\n      formattedError = new BraintreeError({\n        type: errors.VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND.type,\n        code: errors.VAULT_MANAGER_PAYMENT_METHOD_NONCE_NOT_FOUND.code,\n        message: 'A payment method for payment method nonce `' + paymentMethodNonce + '` could not be found.',\n        details: {\n          originalError: originalError\n        }\n      });\n    }\n\n    if (!formattedError) {\n      formattedError = new BraintreeError({\n        type: errors.VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR.type,\n        code: errors.VAULT_MANAGER_DELETE_PAYMENT_METHOD_UNKNOWN_ERROR.code,\n        message: 'An unknown error occured when attempting to delete the payment method assocaited with the payment method nonce `' + paymentMethodNonce + '`.',\n        details: {\n          originalError: originalError\n        }\n      });\n    }\n\n    return Promise.reject(formattedError);\n  });\n};\n\nfunction formatPaymentMethodPayload(paymentMethod) {\n  var formattedPaymentMethod = {\n    nonce: paymentMethod.nonce,\n    'default': paymentMethod.default,\n    details: paymentMethod.details,\n    hasSubscription: paymentMethod.hasSubscription,\n    type: paymentMethod.type\n  };\n\n  if (paymentMethod.description) {\n    formattedPaymentMethod.description = paymentMethod.description;\n  }\n\n  if (paymentMethod.binData) {\n    formattedPaymentMethod.binData = paymentMethod.binData;\n  }\n\n  return formattedPaymentMethod;\n}\n\n/**\n * Cleanly tear down anything set up by {@link module:braintree-web/vault-manager.create|create}.\n * @public\n * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.\n * @example\n * vaultManagerInstance.teardown();\n * @example <caption>With callback</caption>\n * vaultManagerInstance.teardown(function () {\n *   // teardown is complete\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nVaultManager.prototype.teardown = function () {\n  convertMethodsToError(this, methods(VaultManager.prototype));\n\n  return Promise.resolve();\n};\n\nmodule.exports = wrapPromise.wrapPrototype(VaultManager);\n\n},{\"../lib/analytics\":67,\"../lib/braintree-error\":72,\"../lib/convert-methods-to-error\":77,\"../lib/methods\":93,\"../lib/promise\":95,\"./errors\":109,\"@braintree/wrap-promise\":26}],112:[function(require,module,exports){\n'use strict';\n/** @module braintree-web/venmo */\n\nvar analytics = require('../lib/analytics');\nvar basicComponentVerification = require('../lib/basic-component-verification');\nvar createDeferredClient = require('../lib/create-deferred-client');\nvar createAssetsUrl = require('../lib/create-assets-url');\nvar errors = require('./shared/errors');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar BraintreeError = require('../lib/braintree-error');\nvar Venmo = require('./venmo');\nvar Promise = require('../lib/promise');\nvar supportsVenmo = require('./shared/supports-venmo');\nvar VERSION = \"3.42.0\";\n\n/**\n * @static\n * @function create\n * @param {object} options Creation options:\n * @param {Client} [options.client] A {@link Client} instance.\n * @param {string} [options.authorization] A tokenizationKey or clientToken. Can be used in place of `options.client`.\n * @param {boolean} [options.allowNewBrowserTab=true] This should be set to false if your payment flow requires returning to the same tab, e.g. single page applications. Doing so causes {@link Venmo#isBrowserSupported|isBrowserSupported} to return true only for mobile web browsers that support returning from the Venmo app to the same tab.\n * @param {string} [options.profileId] The Venmo profile ID to be used during payment authorization. Customers will see the business name and logo associated with this Venmo profile, and it will show up in the Venmo app as a \"Connected Merchant\". Venmo profile IDs can be found in the Braintree Control Panel. Omitting this value will use the default Venmo profile.\n * @param {string} [options.deepLinkReturnUrl] An override for the URL that the Venmo iOS app opens to return from an app switch.\n * @param {callback} [callback] The second argument, `data`, is the {@link Venmo} instance. If no callback is provided, `create` returns a promise that resolves with the {@link Venmo} instance.\n * @example\n * braintree.venmo.create({\n *   client: clientInstance\n * }).then(function (venmoInstance) {\n *   // venmoInstance is ready to be used.\n * }).catch(function (createErr) {\n *   console.error('Error creating Venmo instance', createErr);\n * });\n * @returns {Promise|void} Returns the Venmo instance.\n */\nfunction create(options) {\n  var name = 'Venmo';\n\n  return basicComponentVerification.verify({\n    name: name,\n    client: options.client,\n    authorization: options.authorization\n  }).then(function () {\n    return createDeferredClient.create({\n      authorization: options.authorization,\n      client: options.client,\n      debug: options.debug,\n      assetsUrl: createAssetsUrl.create(options.authorization),\n      name: name\n    });\n  }).then(function (client) {\n    var instance;\n    var configuration = client.getConfiguration();\n\n    options.client = client;\n\n    if (!configuration.gatewayConfiguration.payWithVenmo) {\n      return Promise.reject(new BraintreeError(errors.VENMO_NOT_ENABLED));\n    }\n\n    if (options.profileId && typeof options.profileId !== 'string') {\n      return Promise.reject(new BraintreeError(errors.VENMO_INVALID_PROFILE_ID));\n    }\n\n    if (options.deepLinkReturnUrl && typeof options.deepLinkReturnUrl !== 'string') {\n      return Promise.reject(new BraintreeError(errors.VENMO_INVALID_DEEP_LINK_RETURN_URL));\n    }\n\n    instance = new Venmo(options);\n\n    analytics.sendEvent(options.client, 'venmo.initialized');\n\n    return instance._initialize();\n  });\n}\n\n/**\n * @static\n * @function isBrowserSupported\n * @param {object} [options] browser support options:\n * @param {boolean} [options.allowNewBrowserTab=true] This should be set to false if your payment flow requires returning to the same tab, e.g. single page applications.\n * @example\n * if (braintree.venmo.isBrowserSupported()) {\n *   // set up Venmo\n * }\n * @example <caption>Explicitly require browser support returning to the same tab</caption>\n * if (braintree.venmo.isBrowserSupported({\n *   allowNewBrowserTab: false\n * })) {\n *   // set up Venmo\n * }\n * @returns {boolean} Whether or not the browser supports Venmo.\n */\nfunction isBrowserSupported(options) {\n  return supportsVenmo.isBrowserSupported(options);\n}\n\nmodule.exports = {\n  create: wrapPromise(create),\n  isBrowserSupported: isBrowserSupported,\n  /**\n   * @description The current version of the SDK, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"../lib/analytics\":67,\"../lib/basic-component-verification\":70,\"../lib/braintree-error\":72,\"../lib/create-assets-url\":79,\"../lib/create-deferred-client\":81,\"../lib/promise\":95,\"./shared/errors\":115,\"./shared/supports-venmo\":116,\"./venmo\":117,\"@braintree/wrap-promise\":26}],113:[function(require,module,exports){\n'use strict';\n\nvar isAndroid = require('@braintree/browser-detection/is-android');\nvar isChrome = require('@braintree/browser-detection/is-chrome');\nvar isIos = require('@braintree/browser-detection/is-ios');\nvar isIosSafari = require('@braintree/browser-detection/is-ios-safari');\nvar isSamsungBrowser = require('@braintree/browser-detection/is-samsung');\nvar isMobileFirefox = require('@braintree/browser-detection/is-mobile-firefox');\n\nmodule.exports = {\n  isAndroid: isAndroid,\n  isChrome: isChrome,\n  isIos: isIos,\n  isIosSafari: isIosSafari,\n  isSamsungBrowser: isSamsungBrowser,\n  isMobileFirefox: isMobileFirefox\n};\n\n},{\"@braintree/browser-detection/is-android\":5,\"@braintree/browser-detection/is-chrome\":6,\"@braintree/browser-detection/is-ios\":15,\"@braintree/browser-detection/is-ios-safari\":13,\"@braintree/browser-detection/is-mobile-firefox\":16,\"@braintree/browser-detection/is-samsung\":17}],114:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  DOCUMENT_VISIBILITY_CHANGE_EVENT_DELAY: 500,\n  PROCESS_RESULTS_DELAY: 1000,\n  VENMO_OPEN_URL: 'https://venmo.com/braintree/checkout'\n};\n\n},{}],115:[function(require,module,exports){\n'use strict';\n\n/**\n * @name BraintreeError.Venmo - Creation Error Codes\n * @description Errors that occur when [creating the Venmo component](/current/module-braintree-web_venmo.html#.create).\n * @property {MERCHANT} VENMO_NOT_ENABLED Occurs when Venmo is not enabled on the Braintree control panel.\n * @property {MERCHANT} VENMO_INVALID_PROFILE_ID Occurs when Venmo is intilaized with a profile id, but it is invalid.\n */\n\n/**\n * @name BraintreeError.Venmo - tokenize Error Codes\n * @description Errors that occur when using the [`tokenize` method](/current/Venmo.html#tokenize).\n * @property {MERCHANT} VENMO_TOKENIZATION_REQUEST_ACTIVE Occurs when `tokenize` is called when the flow is already in progress.\n * @property {UNKNOWN} VENMO_APP_FAILED Occurs when tokenization fails.\n * @property {CUSTOMER} VENMO_APP_CANCELED Occurs when customer cancels flow from the Venmo app.\n * @property {CUSTOMER} VENMO_CANCELED Occurs when customer cancels the flow or Venmo app is not available.\n */\n\nvar BraintreeError = require('../../lib/braintree-error');\n\nmodule.exports = {\n  VENMO_NOT_ENABLED: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'VENMO_NOT_ENABLED',\n    message: 'Venmo is not enabled for this merchant.'\n  },\n  VENMO_TOKENIZATION_REQUEST_ACTIVE: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'VENMO_TOKENIZATION_REQUEST_ACTIVE',\n    message: 'Another tokenization request is active.'\n  },\n  VENMO_APP_FAILED: {\n    type: BraintreeError.types.UNKNOWN,\n    code: 'VENMO_APP_FAILED',\n    message: 'Venmo app encountered a problem.'\n  },\n  VENMO_APP_CANCELED: {\n    type: BraintreeError.types.CUSTOMER,\n    code: 'VENMO_APP_CANCELED',\n    message: 'Venmo app authorization was canceled.'\n  },\n  VENMO_CANCELED: {\n    type: BraintreeError.types.CUSTOMER,\n    code: 'VENMO_CANCELED',\n    message: 'User canceled Venmo authorization, or Venmo app is not available.'\n  },\n  VENMO_INVALID_PROFILE_ID: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'VENMO_INVALID_PROFILE_ID',\n    message: 'Venmo profile ID is invalid.'\n  },\n  VENMO_INVALID_DEEP_LINK_RETURN_URL: {\n    type: BraintreeError.types.MERCHANT,\n    code: 'VENMO_INVALID_DEEP_LINK_RETURN_URL',\n    message: 'Venmo deep link return URL is invalid.'\n  }\n};\n\n},{\"../../lib/braintree-error\":72}],116:[function(require,module,exports){\n'use strict';\n\nvar browserDetection = require('./browser-detection');\n\nfunction isBrowserSupported(options) {\n  var isAndroidChrome = browserDetection.isAndroid() && browserDetection.isChrome();\n  var isIosChrome = browserDetection.isIos() && browserDetection.isChrome();\n  var supportsReturnToSameTab = browserDetection.isIosSafari() || isAndroidChrome;\n  var supportsReturnToNewTab = isIosChrome || browserDetection.isSamsungBrowser() || browserDetection.isMobileFirefox();\n\n  options = options || {\n    allowNewBrowserTab: true\n  };\n\n  return supportsReturnToSameTab || (options.allowNewBrowserTab && supportsReturnToNewTab);\n}\n\nmodule.exports = {\n  isBrowserSupported: isBrowserSupported\n};\n\n},{\"./browser-detection\":113}],117:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar analytics = require('../lib/analytics');\nvar isBrowserSupported = require('./shared/supports-venmo');\nvar constants = require('./shared/constants');\nvar errors = require('./shared/errors');\nvar querystring = require('../lib/querystring');\nvar methods = require('../lib/methods');\nvar convertMethodsToError = require('../lib/convert-methods-to-error');\nvar wrapPromise = require('@braintree/wrap-promise');\nvar BraintreeError = require('../lib/braintree-error');\nvar Promise = require('../lib/promise');\nvar VERSION = \"3.42.0\";\n\n/**\n * Venmo tokenize payload.\n * @typedef {object} Venmo~tokenizePayload\n * @property {string} nonce The payment method nonce.\n * @property {string} type The payment method type, always `VenmoAccount`.\n * @property {object} details Additional Venmo account details.\n * @property {string} details.username Username of the Venmo account.\n */\n\n/**\n * @class\n * @param {object} options The Venmo {@link module:braintree-web/venmo.create create} options.\n * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web/venmo.create|braintree-web.venmo.create} instead.</strong>\n * @classdesc This class represents a Venmo component produced by {@link module:braintree-web/venmo.create|braintree-web/venmo.create}. Instances of this class have methods for tokenizing Venmo payments.\n */\nfunction Venmo(options) {\n  var configuration;\n\n  this._client = options.client;\n  configuration = this._client.getConfiguration();\n  this._isDebug = configuration.isDebug;\n  this._assetsUrl = configuration.gatewayConfiguration.assetsUrl + '/web/' + VERSION;\n  this._allowNewBrowserTab = options.allowNewBrowserTab !== false;\n  this._profileId = options.profileId;\n  this._deepLinkReturnUrl = options.deepLinkReturnUrl;\n}\n\nVenmo.prototype._initialize = function () {\n  var params = {};\n  var currentUrl = this._deepLinkReturnUrl || global.location.href.replace(global.location.hash, '');\n  var configuration = this._client.getConfiguration();\n  var venmoConfiguration = configuration.gatewayConfiguration.payWithVenmo;\n  var analyticsMetadata = this._client.getConfiguration().analyticsMetadata;\n  var braintreeData = {\n    _meta: {\n      version: analyticsMetadata.sdkVersion,\n      integration: analyticsMetadata.integration,\n      platform: analyticsMetadata.platform,\n      sessionId: analyticsMetadata.sessionId\n    }\n  };\n\n  params['x-success'] = currentUrl + '#venmoSuccess=1';\n  params['x-cancel'] = currentUrl + '#venmoCancel=1';\n  params['x-error'] = currentUrl + '#venmoError=1';\n  params.ua = global.navigator.userAgent;\n  /* eslint-disable camelcase */\n  params.braintree_merchant_id = this._profileId || venmoConfiguration.merchantId;\n  params.braintree_access_token = venmoConfiguration.accessToken;\n  params.braintree_environment = venmoConfiguration.environment;\n  params.braintree_sdk_data = btoa(JSON.stringify(braintreeData));\n  /* eslint-enable camelcase */\n\n  this._url = constants.VENMO_OPEN_URL + '?' + querystring.stringify(params);\n\n  return Promise.resolve(this);\n};\n\n/**\n * Returns a boolean indicating whether the current browser supports Venmo as a payment method.\n *\n * If `options.allowNewBrowserTab` is false when calling {@link module:braintree-web/venmo.create|venmo.create}, this method will return true only for browsers known to support returning from the Venmo app to the same browser tab. Currently, this is limited to iOS Safari and Android Chrome.\n * @public\n * @returns {boolean} True if the current browser is supported, false if not.\n */\nVenmo.prototype.isBrowserSupported = function () {\n  return isBrowserSupported.isBrowserSupported({\n    allowNewBrowserTab: this._allowNewBrowserTab\n  });\n};\n\n/**\n * Returns a boolean indicating whether a Venmo tokenization result is ready to be processed immediately.\n *\n * This method should be called after initialization to see if the result of Venmo authorization is available. If it returns true, call {@link Venmo#tokenize|tokenize} immediately to process the results.\n *\n * @public\n * @returns {boolean} True if the results of Venmo payment authorization are available and ready to process.\n */\nVenmo.prototype.hasTokenizationResult = function () {\n  var params = getFragmentParameters();\n\n  return typeof (params.venmoSuccess || params.venmoError || params.venmoCancel) !== 'undefined';\n};\n\n/**\n * Launches the Venmo flow and returns a nonce payload.\n *\n * If {@link Venmo#hasTokenizationResult|hasTokenizationResult} returns true, calling tokenize will immediately process and return the results without initiating the Venmo payment authorization flow.\n *\n * Only one Venmo flow can be active at a time. One way to achieve this is to disable your Venmo button while the flow is open.\n * @public\n * @param {callback} [callback] The second argument, <code>data</code>, is a {@link Venmo~tokenizePayload|tokenizePayload}. If no callback is provided, the method will return a Promise that resolves with a {@link Venmo~tokenizePayload|tokenizePayload}.\n * @returns {Promise|void} Returns a promise if no callback is provided.\n * @example\n * button.addEventListener('click', function () {\n *   // Disable the button so that we don't attempt to open multiple popups.\n *   button.setAttribute('disabled', 'disabled');\n *\n *   // Because tokenize opens a new window, this must be called\n *   // as a result of a user action, such as a button click.\n *   venmoInstance.tokenize().then(function (payload) {\n *     // Submit payload.nonce to your server\n *     // Use payload.username to get the Venmo username and display any UI\n *   }).catch(function (tokenizeError) {\n *     // Handle flow errors or premature flow closure\n *     switch (tokenizeErr.code) {\n *       case 'VENMO_APP_CANCELED':\n *         console.log('User canceled Venmo flow.');\n *         break;\n *       case 'VENMO_CANCELED':\n *         console.log('User canceled Venmo, or Venmo app is not available.');\n *         break;\n *       default:\n *         console.error('Error!', tokenizeErr);\n *     }\n *   }).then(function () {\n *     button.removeAttribute('disabled');\n *   });\n * });\n */\nVenmo.prototype.tokenize = function () {\n  var self = this;\n\n  if (this._tokenizationInProgress === true) {\n    return Promise.reject(new BraintreeError(errors.VENMO_TOKENIZATION_REQUEST_ACTIVE));\n  }\n\n  if (this.hasTokenizationResult()) {\n    return this._processResults();\n  }\n\n  return new Promise(function (resolve, reject) {\n    self._tokenizationInProgress = true;\n    self._previousHash = global.location.hash;\n\n    // Deep link URLs do not launch iOS apps from a webview when using window.open or PopupBridge.open.\n    if (self._deepLinkReturnUrl) {\n      global.location = self._url;\n    } else {\n      global.open(self._url);\n    }\n\n    // Subscribe to document visibility change events to detect when app switch\n    // has returned.\n    self._visibilityChangeListener = function () {\n      if (!global.document.hidden) {\n        self._tokenizationInProgress = false;\n\n        setTimeout(function () {\n          self._processResults().then(resolve).catch(reject).then(function () {\n            global.location.hash = self._previousHash;\n            self._removeVisibilityEventListener();\n            delete self._visibilityChangeListener;\n          });\n        }, constants.PROCESS_RESULTS_DELAY);\n      }\n    };\n\n    // Add a brief delay to ignore visibility change events that occur right before app switch\n    setTimeout(function () {\n      global.document.addEventListener(documentVisibilityChangeEventName(), self._visibilityChangeListener);\n    }, constants.DOCUMENT_VISIBILITY_CHANGE_EVENT_DELAY);\n  });\n};\n\n/**\n * Cleanly tear down anything set up by {@link module:braintree-web/venmo.create|create}.\n * @public\n * @param {callback} [callback] Called once teardown is complete. No data is returned if teardown completes successfully.\n * @example\n * venmoInstance.teardown();\n * @example <caption>With callback</caption>\n * venmoInstance.teardown(function () {\n *   // teardown is complete\n * });\n * @returns {Promise|void} Returns a promise if no callback is provided.\n */\nVenmo.prototype.teardown = function () {\n  this._removeVisibilityEventListener();\n  convertMethodsToError(this, methods(Venmo.prototype));\n\n  return Promise.resolve();\n};\n\nVenmo.prototype._removeVisibilityEventListener = function () {\n  global.document.removeEventListener(documentVisibilityChangeEventName(), this._visibilityChangeListener);\n};\n\nVenmo.prototype._processResults = function () {\n  var self = this;\n  var params = getFragmentParameters();\n\n  return new Promise(function (resolve, reject) {\n    if (params.venmoSuccess) {\n      analytics.sendEvent(self._client, 'venmo.appswitch.handle.success');\n      resolve(formatTokenizePayload(params));\n    } else if (params.venmoError) {\n      analytics.sendEvent(self._client, 'venmo.appswitch.handle.error');\n      reject(new BraintreeError({\n        type: errors.VENMO_APP_FAILED.type,\n        code: errors.VENMO_APP_FAILED.code,\n        message: errors.VENMO_APP_FAILED.message,\n        details: {\n          originalError: {\n            message: decodeURIComponent(params.errorMessage),\n            code: params.errorCode\n          }\n        }\n      }));\n    } else if (params.venmoCancel) {\n      analytics.sendEvent(self._client, 'venmo.appswitch.handle.cancel');\n      reject(new BraintreeError(errors.VENMO_APP_CANCELED));\n    } else {\n      // User has either manually switched back to browser, or app is not available for app switch\n      analytics.sendEvent(self._client, 'venmo.appswitch.cancel-or-unavailable');\n      reject(new BraintreeError(errors.VENMO_CANCELED));\n    }\n\n    clearFragmentParameters();\n  });\n};\n\nfunction getFragmentParameters() {\n  var keyValuesArray = global.location.hash.substring(1).split('&');\n\n  return keyValuesArray.reduce(function (toReturn, keyValue) {\n    var parts = keyValue.split('=');\n    var key = decodeURIComponent(parts[0]);\n    var value = decodeURIComponent(parts[1]);\n\n    toReturn[key] = value;\n\n    return toReturn;\n  }, {});\n}\n\nfunction clearFragmentParameters() {\n  if (typeof global.history.replaceState === 'function' && global.location.hash) {\n    history.pushState({}, '', global.location.href.slice(0, global.location.href.indexOf('#')));\n  }\n}\n\nfunction formatTokenizePayload(fragmentParams) {\n  return {\n    nonce: fragmentParams.paymentMethodNonce,\n    type: 'VenmoAccount',\n    details: {\n      username: fragmentParams.username\n    }\n  };\n}\n\n// From https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API\nfunction documentVisibilityChangeEventName() {\n  var visibilityChange;\n\n  if (typeof global.document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n    visibilityChange = 'visibilitychange';\n  } else if (typeof global.document.msHidden !== 'undefined') {\n    visibilityChange = 'msvisibilitychange';\n  } else if (typeof global.document.webkitHidden !== 'undefined') {\n    visibilityChange = 'webkitvisibilitychange';\n  }\n\n  return visibilityChange;\n}\n\nmodule.exports = wrapPromise.wrapPrototype(Venmo);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../lib/analytics\":67,\"../lib/braintree-error\":72,\"../lib/convert-methods-to-error\":77,\"../lib/methods\":93,\"../lib/promise\":95,\"../lib/querystring\":96,\"./shared/constants\":114,\"./shared/errors\":115,\"./shared/supports-venmo\":116,\"@braintree/wrap-promise\":26}],118:[function(require,module,exports){\n'use strict';\n\nvar testOrder;\nvar types = {};\nvar customCards = {};\nvar VISA = 'visa';\nvar MASTERCARD = 'mastercard';\nvar AMERICAN_EXPRESS = 'american-express';\nvar DINERS_CLUB = 'diners-club';\nvar DISCOVER = 'discover';\nvar ELO = 'elo';\nvar JCB = 'jcb';\nvar UNIONPAY = 'unionpay';\nvar MAESTRO = 'maestro';\nvar MIR = 'mir';\nvar CVV = 'CVV';\nvar CID = 'CID';\nvar CVC = 'CVC';\nvar CVN = 'CVN';\nvar CVP2 = 'CVP2';\nvar CVE = 'CVE';\nvar ORIGINAL_TEST_ORDER = [\n  VISA,\n  MASTERCARD,\n  AMERICAN_EXPRESS,\n  DINERS_CLUB,\n  DISCOVER,\n  JCB,\n  UNIONPAY,\n  MAESTRO,\n  ELO,\n  MIR\n];\n\nfunction clone(originalObject) {\n  var dupe;\n\n  if (!originalObject) { return null; }\n\n  dupe = JSON.parse(JSON.stringify(originalObject));\n\n  return dupe;\n}\n\ntestOrder = clone(ORIGINAL_TEST_ORDER);\n\ntypes[VISA] = {\n  niceType: 'Visa',\n  type: VISA,\n  patterns: [\n    4\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[MASTERCARD] = {\n  niceType: 'Mastercard',\n  type: MASTERCARD,\n  patterns: [\n    [51, 55],\n    [2221, 2229],\n    [223, 229],\n    [23, 26],\n    [270, 271],\n    2720\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\n\ntypes[AMERICAN_EXPRESS] = {\n  niceType: 'American Express',\n  type: AMERICAN_EXPRESS,\n  patterns: [\n    34,\n    37\n  ],\n  gaps: [4, 10],\n  lengths: [15],\n  code: {\n    name: CID,\n    size: 4\n  }\n};\n\ntypes[DINERS_CLUB] = {\n  niceType: 'Diners Club',\n  type: DINERS_CLUB,\n  patterns: [\n    [300, 305],\n    36,\n    38,\n    39\n  ],\n  gaps: [4, 10],\n  lengths: [14, 16, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[DISCOVER] = {\n  niceType: 'Discover',\n  type: DISCOVER,\n  patterns: [\n    6011,\n    [644, 649],\n    65\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 19],\n  code: {\n    name: CID,\n    size: 3\n  }\n};\n\ntypes[JCB] = {\n  niceType: 'JCB',\n  type: JCB,\n  patterns: [\n    2131,\n    1800,\n    [3528, 3589]\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVV,\n    size: 3\n  }\n};\n\ntypes[UNIONPAY] = {\n  niceType: 'UnionPay',\n  type: UNIONPAY,\n  patterns: [\n    620,\n    [624, 626],\n    [62100, 62182],\n    [62184, 62187],\n    [62185, 62197],\n    [62200, 62205],\n    [622010, 622999],\n    622018,\n    [622019, 622999],\n    [62207, 62209],\n    [622126, 622925],\n    [623, 626],\n    6270,\n    6272,\n    6276,\n    [627700, 627779],\n    [627781, 627799],\n    [6282, 6289],\n    6291,\n    6292\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVN,\n    size: 3\n  }\n};\n\ntypes[MAESTRO] = {\n  niceType: 'Maestro',\n  type: MAESTRO,\n  patterns: [\n    493698,\n    [500000, 506698],\n    [506779, 508999],\n    [56, 59],\n    63,\n    67,\n    6\n  ],\n  gaps: [4, 8, 12],\n  lengths: [12, 13, 14, 15, 16, 17, 18, 19],\n  code: {\n    name: CVC,\n    size: 3\n  }\n};\n\ntypes[ELO] = {\n  niceType: 'Elo',\n  type: ELO,\n  patterns: [\n    401178,\n    401179,\n    438935,\n    457631,\n    457632,\n    431274,\n    451416,\n    457393,\n    504175,\n    [506699, 506778],\n    [509000, 509999],\n    627780,\n    636297,\n    636368,\n    [650031, 650033],\n    [650035, 650051],\n    [650405, 650439],\n    [650485, 650538],\n    [650541, 650598],\n    [650700, 650718],\n    [650720, 650727],\n    [650901, 650978],\n    [651652, 651679],\n    [655000, 655019],\n    [655021, 655058]\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    name: CVE,\n    size: 3\n  }\n};\n\ntypes[MIR] = {\n  niceType: 'Mir',\n  type: MIR,\n  patterns: [\n    [2200, 2204]\n  ],\n  gaps: [4, 8, 12],\n  lengths: [16, 17, 18, 19],\n  code: {\n    name: CVP2,\n    size: 3\n  }\n};\n\nfunction findType(type) {\n  return customCards[type] || types[type];\n}\n\nfunction isValidInputType(cardNumber) {\n  return typeof cardNumber === 'string' || cardNumber instanceof String;\n}\n\nfunction hasEnoughResultsToDetermineBestMatch(results) {\n  var numberOfResultsWithMaxStrengthProperty = results.filter(function (result) {\n    return result.matchStrength;\n  }).length;\n\n  // if all possible results have a maxStrength property\n  // that means the card number is sufficiently long\n  // enough to determine conclusively what the type is\n  return numberOfResultsWithMaxStrengthProperty > 0 &&\n    numberOfResultsWithMaxStrengthProperty === results.length;\n}\n\nfunction findBestMatch(results) {\n  if (!hasEnoughResultsToDetermineBestMatch(results)) {\n    return;\n  }\n\n  return results.reduce(function (bestMatch, result) { // eslint-disable-line consistent-return\n    if (!bestMatch) {\n      return result;\n    }\n\n    // if the current best match pattern is less specific\n    // than this result, set the result as the new best match\n    if (bestMatch.matchStrength < result.matchStrength) {\n      return result;\n    }\n\n    return bestMatch;\n  });\n}\n\nfunction getAllCardTypes() {\n  return testOrder.map(function (type) {\n    return clone(findType(type));\n  });\n}\n\nfunction creditCardType(cardNumber) {\n  var bestMatch;\n  var results = [];\n\n  if (!isValidInputType(cardNumber)) {\n    return [];\n  }\n\n  if (cardNumber.length === 0) {\n    return getAllCardTypes();\n  }\n\n  testOrder.forEach(function (type) {\n    var cardConfiguration = findType(type);\n\n    loopOverCardPatterns(cardNumber, cardConfiguration, results);\n  });\n\n  bestMatch = findBestMatch(results);\n\n  if (bestMatch) {\n    return [bestMatch];\n  }\n\n  return results;\n}\n\nfunction loopOverCardPatterns(cardNumber, cardConfiguration, results) {\n  var i, pattern, patternLength, clonedCardConfiguration;\n\n  for (i = 0; i < cardConfiguration.patterns.length; i++) {\n    pattern = cardConfiguration.patterns[i];\n\n    if (!matches(cardNumber, pattern)) {\n      continue;\n    }\n\n    clonedCardConfiguration = clone(cardConfiguration);\n\n    if (Array.isArray(pattern)) {\n      patternLength = String(pattern[0]).length;\n    } else {\n      patternLength = String(pattern).length;\n    }\n\n    if (cardNumber.length >= patternLength) {\n      clonedCardConfiguration.matchStrength = patternLength;\n    }\n\n    results.push(clonedCardConfiguration);\n    break;\n  }\n}\n\nfunction matches(cardNumber, pattern) {\n  if (Array.isArray(pattern)) {\n    return matchesRange(cardNumber, pattern[0], pattern[1]);\n  }\n\n  return matchesPattern(cardNumber, pattern);\n}\n\nfunction matchesPattern(cardNumber, pattern) {\n  pattern = String(pattern);\n\n  return pattern.substring(0, cardNumber.length) === cardNumber.substring(0, pattern.length);\n}\n\n// Adapted from https://github.com/polvo-labs/card-type/blob/aaab11f80fa1939bccc8f24905a06ae3cd864356/src/cardType.js#L37-L42\nfunction matchesRange(cardNumber, min, max) {\n  var maxLengthToCheck = String(min).length;\n  var substr = cardNumber.substr(0, maxLengthToCheck);\n  var integerRepresentationOfCardNumber = parseInt(substr, 10);\n\n  min = parseInt(String(min).substr(0, substr.length), 10);\n  max = parseInt(String(max).substr(0, substr.length), 10);\n\n  return integerRepresentationOfCardNumber >= min && integerRepresentationOfCardNumber <= max;\n}\n\ncreditCardType.getTypeInfo = function (type) {\n  return clone(findType(type));\n};\n\nfunction getCardPosition(name, ignoreErrorForNotExisting) {\n  var position = testOrder.indexOf(name);\n\n  if (!ignoreErrorForNotExisting && position === -1) {\n    throw new Error('\"' + name + '\" is not a supported card type.');\n  }\n\n  return position;\n}\n\ncreditCardType.removeCard = function (name) {\n  var position = getCardPosition(name);\n\n  testOrder.splice(position, 1);\n};\n\ncreditCardType.addCard = function (config) {\n  var existingCardPosition = getCardPosition(config.type, true);\n\n  customCards[config.type] = config;\n\n  if (existingCardPosition === -1) {\n    testOrder.push(config.type);\n  }\n};\n\ncreditCardType.updateCard = function (cardType, updates) {\n  var clonedCard;\n  var originalObject = customCards[cardType] || types[cardType];\n\n  if (!originalObject) {\n    throw new Error('\"' + cardType + '\" is not a recognized type. Use `addCard` instead.');\n  }\n\n  if (updates.type && originalObject.type !== updates.type) {\n    throw new Error('Cannot overwrite type parameter.');\n  }\n\n  clonedCard = clone(originalObject, true);\n\n  Object.keys(clonedCard).forEach(function (key) {\n    if (updates[key]) {\n      clonedCard[key] = updates[key];\n    }\n  });\n\n  customCards[clonedCard.type] = clonedCard;\n};\n\ncreditCardType.changeOrder = function (name, position) {\n  var currentPosition = getCardPosition(name);\n\n  testOrder.splice(currentPosition, 1);\n  testOrder.splice(position, 0, name);\n};\n\ncreditCardType.resetModifications = function () {\n  testOrder = clone(ORIGINAL_TEST_ORDER);\n  customCards = {};\n};\n\ncreditCardType.types = {\n  VISA: VISA,\n  MASTERCARD: MASTERCARD,\n  AMERICAN_EXPRESS: AMERICAN_EXPRESS,\n  DINERS_CLUB: DINERS_CLUB,\n  DISCOVER: DISCOVER,\n  JCB: JCB,\n  UNIONPAY: UNIONPAY,\n  MAESTRO: MAESTRO,\n  ELO: ELO,\n  MIR: MIR\n};\n\nmodule.exports = creditCardType;\n\n},{}],119:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar win, framebus;\nvar popups = [];\nvar subscribers = {};\nvar prefix = '/*framebus*/';\n\nfunction include(popup) {\n  if (popup == null) { return false; }\n  if (popup.Window == null) { return false; }\n  if (popup.constructor !== popup.Window) { return false; }\n\n  popups.push(popup);\n  return true;\n}\n\nfunction target(origin) {\n  var key;\n  var targetedFramebus = {};\n\n  for (key in framebus) {\n    if (!framebus.hasOwnProperty(key)) { continue; }\n\n    targetedFramebus[key] = framebus[key];\n  }\n\n  targetedFramebus._origin = origin || '*';\n\n  return targetedFramebus;\n}\n\nfunction publish(event) {\n  var payload, args;\n  var origin = _getOrigin(this); // eslint-disable-line no-invalid-this\n\n  if (_isntString(event)) { return false; }\n  if (_isntString(origin)) { return false; }\n\n  args = Array.prototype.slice.call(arguments, 1);\n\n  payload = _packagePayload(event, args, origin);\n  if (payload === false) { return false; }\n\n  _broadcast(win.top || win.self, payload, origin);\n\n  return true;\n}\n\nfunction subscribe(event, fn) {\n  var origin = _getOrigin(this); // eslint-disable-line no-invalid-this\n\n  if (_subscriptionArgsInvalid(event, fn, origin)) { return false; }\n\n  subscribers[origin] = subscribers[origin] || {};\n  subscribers[origin][event] = subscribers[origin][event] || [];\n  subscribers[origin][event].push(fn);\n\n  return true;\n}\n\nfunction unsubscribe(event, fn) {\n  var i, subscriberList;\n  var origin = _getOrigin(this); // eslint-disable-line no-invalid-this\n\n  if (_subscriptionArgsInvalid(event, fn, origin)) { return false; }\n\n  subscriberList = subscribers[origin] && subscribers[origin][event];\n  if (!subscriberList) { return false; }\n\n  for (i = 0; i < subscriberList.length; i++) {\n    if (subscriberList[i] === fn) {\n      subscriberList.splice(i, 1);\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction _getOrigin(scope) {\n  return scope && scope._origin || '*';\n}\n\nfunction _isntString(string) {\n  return typeof string !== 'string';\n}\n\nfunction _packagePayload(event, args, origin) {\n  var packaged = false;\n  var payload = {\n    event: event,\n    origin: origin\n  };\n  var reply = args[args.length - 1];\n\n  if (typeof reply === 'function') {\n    payload.reply = _subscribeReplier(reply, origin);\n    args = args.slice(0, -1);\n  }\n\n  payload.args = args;\n\n  try {\n    packaged = prefix + JSON.stringify(payload);\n  } catch (e) {\n    throw new Error('Could not stringify event: ' + e.message);\n  }\n  return packaged;\n}\n\nfunction _unpackPayload(e) {\n  var payload, replyOrigin, replySource, replyEvent;\n\n  if (e.data.slice(0, prefix.length) !== prefix) { return false; }\n\n  try {\n    payload = JSON.parse(e.data.slice(prefix.length));\n  } catch (err) {\n    return false;\n  }\n\n  if (payload.reply != null) {\n    replyOrigin = e.origin;\n    replySource = e.source;\n    replyEvent = payload.reply;\n\n    payload.reply = function reply(data) { // eslint-disable-line consistent-return\n      var replyPayload;\n\n      if (!replySource) { return false; }\n\n      replyPayload = _packagePayload(replyEvent, [data], replyOrigin);\n\n      if (replyPayload === false) { return false; }\n\n      replySource.postMessage(replyPayload, replyOrigin);\n    };\n\n    payload.args.push(payload.reply);\n  }\n\n  return payload;\n}\n\nfunction _attach(w) {\n  if (win) { return; }\n  win = w || global;\n\n  if (win.addEventListener) {\n    win.addEventListener('message', _onmessage, false);\n  } else if (win.attachEvent) {\n    win.attachEvent('onmessage', _onmessage);\n  } else if (win.onmessage === null) {\n    win.onmessage = _onmessage;\n  } else {\n    win = null;\n  }\n}\n\n// removeIf(production)\nfunction _detach() {\n  if (win == null) { return; }\n\n  if (win.removeEventListener) {\n    win.removeEventListener('message', _onmessage, false);\n  } else if (win.detachEvent) {\n    win.detachEvent('onmessage', _onmessage);\n  } else if (win.onmessage === _onmessage) {\n    win.onmessage = null;\n  }\n\n  win = null;\n  popups = [];\n  subscribers = {};\n}\n// endRemoveIf(production)\n\nfunction _uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n\n    return v.toString(16);\n  });\n}\n\nfunction _onmessage(e) {\n  var payload;\n\n  if (_isntString(e.data)) { return; }\n\n  payload = _unpackPayload(e);\n  if (!payload) { return; }\n\n  _dispatch('*', payload.event, payload.args, e);\n  _dispatch(e.origin, payload.event, payload.args, e);\n  _broadcastPopups(e.data, payload.origin, e.source);\n}\n\nfunction _dispatch(origin, event, args, e) {\n  var i;\n\n  if (!subscribers[origin]) { return; }\n  if (!subscribers[origin][event]) { return; }\n\n  for (i = 0; i < subscribers[origin][event].length; i++) {\n    subscribers[origin][event][i].apply(e, args);\n  }\n}\n\nfunction _hasOpener(frame) {\n  if (frame.top !== frame) { return false; }\n  if (frame.opener == null) { return false; }\n  if (frame.opener === frame) { return false; }\n  if (frame.opener.closed === true) { return false; }\n\n  return true;\n}\n\nfunction _broadcast(frame, payload, origin) {\n  var i = 0;\n  var frameToBroadcastTo;\n\n  try {\n    frame.postMessage(payload, origin);\n\n    if (_hasOpener(frame)) {\n      _broadcast(frame.opener.top, payload, origin);\n    }\n\n    // previously, our max value was frame.frames.length\n    // but frames.length inherits from window.length\n    // which can be overwritten if a developer does\n    // `var length = value;` outside of a function\n    // scope, it'll prevent us from looping through\n    // all the frames. With this, we loop through\n    // until there are no longer any frames\n    while (frameToBroadcastTo = frame.frames[i]) { // eslint-disable-line no-cond-assign\n      _broadcast(frameToBroadcastTo, payload, origin);\n      i++;\n    }\n  } catch (_) { /* ignored */ }\n}\n\nfunction _broadcastPopups(payload, origin, source) {\n  var i, popup;\n\n  for (i = popups.length - 1; i >= 0; i--) {\n    popup = popups[i];\n\n    if (popup.closed === true) {\n      popups = popups.slice(i, 1);\n    } else if (source !== popup) {\n      _broadcast(popup.top, payload, origin);\n    }\n  }\n}\n\nfunction _subscribeReplier(fn, origin) {\n  var uuid = _uuid();\n\n  function replier(d, o) {\n    fn(d, o);\n    framebus.target(origin).unsubscribe(uuid, replier);\n  }\n\n  framebus.target(origin).subscribe(uuid, replier);\n  return uuid;\n}\n\nfunction _subscriptionArgsInvalid(event, fn, origin) {\n  if (_isntString(event)) { return true; }\n  if (typeof fn !== 'function') { return true; }\n  if (_isntString(origin)) { return true; }\n\n  return false;\n}\n\n_attach();\n\nframebus = {\n  target: target,\n  // removeIf(production)\n  _packagePayload: _packagePayload,\n  _unpackPayload: _unpackPayload,\n  _attach: _attach,\n  _detach: _detach,\n  _dispatch: _dispatch,\n  _broadcast: _broadcast,\n  _subscribeReplier: _subscribeReplier,\n  _subscriptionArgsInvalid: _subscriptionArgsInvalid,\n  _onmessage: _onmessage,\n  _uuid: _uuid,\n  _getSubscribers: function () { return subscribers; },\n  _win: function () { return win; },\n  // endRemoveIf(production)\n  include: include,\n  publish: publish,\n  pub: publish,\n  trigger: publish,\n  emit: publish,\n  subscribe: subscribe,\n  sub: subscribe,\n  on: subscribe,\n  unsubscribe: unsubscribe,\n  unsub: unsubscribe,\n  off: unsubscribe\n};\n\nmodule.exports = framebus;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],120:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],121:[function(require,module,exports){\n(function (setImmediate){\n'use strict';\n\n/**\n * @this {Promise}\n */\nfunction finallyConstructor(callback) {\n  var constructor = this.constructor;\n  return this.then(\n    function(value) {\n      return constructor.resolve(callback()).then(function() {\n        return value;\n      });\n    },\n    function(reason) {\n      return constructor.resolve(callback()).then(function() {\n        return constructor.reject(reason);\n      });\n    }\n  );\n}\n\n// Store setTimeout reference so promise-polyfill will be unaffected by\n// other code modifying setTimeout (like sinon.useFakeTimers())\nvar setTimeoutFunc = setTimeout;\n\nfunction noop() {}\n\n// Polyfill for Function.prototype.bind\nfunction bind(fn, thisArg) {\n  return function() {\n    fn.apply(thisArg, arguments);\n  };\n}\n\n/**\n * @constructor\n * @param {Function} fn\n */\nfunction Promise(fn) {\n  if (!(this instanceof Promise))\n    throw new TypeError('Promises must be constructed via new');\n  if (typeof fn !== 'function') throw new TypeError('not a function');\n  /** @type {!number} */\n  this._state = 0;\n  /** @type {!boolean} */\n  this._handled = false;\n  /** @type {Promise|undefined} */\n  this._value = undefined;\n  /** @type {!Array<!Function>} */\n  this._deferreds = [];\n\n  doResolve(fn, this);\n}\n\nfunction handle(self, deferred) {\n  while (self._state === 3) {\n    self = self._value;\n  }\n  if (self._state === 0) {\n    self._deferreds.push(deferred);\n    return;\n  }\n  self._handled = true;\n  Promise._immediateFn(function() {\n    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;\n    if (cb === null) {\n      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);\n      return;\n    }\n    var ret;\n    try {\n      ret = cb(self._value);\n    } catch (e) {\n      reject(deferred.promise, e);\n      return;\n    }\n    resolve(deferred.promise, ret);\n  });\n}\n\nfunction resolve(self, newValue) {\n  try {\n    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n    if (newValue === self)\n      throw new TypeError('A promise cannot be resolved with itself.');\n    if (\n      newValue &&\n      (typeof newValue === 'object' || typeof newValue === 'function')\n    ) {\n      var then = newValue.then;\n      if (newValue instanceof Promise) {\n        self._state = 3;\n        self._value = newValue;\n        finale(self);\n        return;\n      } else if (typeof then === 'function') {\n        doResolve(bind(then, newValue), self);\n        return;\n      }\n    }\n    self._state = 1;\n    self._value = newValue;\n    finale(self);\n  } catch (e) {\n    reject(self, e);\n  }\n}\n\nfunction reject(self, newValue) {\n  self._state = 2;\n  self._value = newValue;\n  finale(self);\n}\n\nfunction finale(self) {\n  if (self._state === 2 && self._deferreds.length === 0) {\n    Promise._immediateFn(function() {\n      if (!self._handled) {\n        Promise._unhandledRejectionFn(self._value);\n      }\n    });\n  }\n\n  for (var i = 0, len = self._deferreds.length; i < len; i++) {\n    handle(self, self._deferreds[i]);\n  }\n  self._deferreds = null;\n}\n\n/**\n * @constructor\n */\nfunction Handler(onFulfilled, onRejected, promise) {\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;\n  this.promise = promise;\n}\n\n/**\n * Take a potentially misbehaving resolver function and make sure\n * onFulfilled and onRejected are only called once.\n *\n * Makes no guarantees about asynchrony.\n */\nfunction doResolve(fn, self) {\n  var done = false;\n  try {\n    fn(\n      function(value) {\n        if (done) return;\n        done = true;\n        resolve(self, value);\n      },\n      function(reason) {\n        if (done) return;\n        done = true;\n        reject(self, reason);\n      }\n    );\n  } catch (ex) {\n    if (done) return;\n    done = true;\n    reject(self, ex);\n  }\n}\n\nPromise.prototype['catch'] = function(onRejected) {\n  return this.then(null, onRejected);\n};\n\nPromise.prototype.then = function(onFulfilled, onRejected) {\n  // @ts-ignore\n  var prom = new this.constructor(noop);\n\n  handle(this, new Handler(onFulfilled, onRejected, prom));\n  return prom;\n};\n\nPromise.prototype['finally'] = finallyConstructor;\n\nPromise.all = function(arr) {\n  return new Promise(function(resolve, reject) {\n    if (!arr || typeof arr.length === 'undefined')\n      throw new TypeError('Promise.all accepts an array');\n    var args = Array.prototype.slice.call(arr);\n    if (args.length === 0) return resolve([]);\n    var remaining = args.length;\n\n    function res(i, val) {\n      try {\n        if (val && (typeof val === 'object' || typeof val === 'function')) {\n          var then = val.then;\n          if (typeof then === 'function') {\n            then.call(\n              val,\n              function(val) {\n                res(i, val);\n              },\n              reject\n            );\n            return;\n          }\n        }\n        args[i] = val;\n        if (--remaining === 0) {\n          resolve(args);\n        }\n      } catch (ex) {\n        reject(ex);\n      }\n    }\n\n    for (var i = 0; i < args.length; i++) {\n      res(i, args[i]);\n    }\n  });\n};\n\nPromise.resolve = function(value) {\n  if (value && typeof value === 'object' && value.constructor === Promise) {\n    return value;\n  }\n\n  return new Promise(function(resolve) {\n    resolve(value);\n  });\n};\n\nPromise.reject = function(value) {\n  return new Promise(function(resolve, reject) {\n    reject(value);\n  });\n};\n\nPromise.race = function(values) {\n  return new Promise(function(resolve, reject) {\n    for (var i = 0, len = values.length; i < len; i++) {\n      values[i].then(resolve, reject);\n    }\n  });\n};\n\n// Use polyfill for setImmediate for performance gains\nPromise._immediateFn =\n  (typeof setImmediate === 'function' &&\n    function(fn) {\n      setImmediate(fn);\n    }) ||\n  function(fn) {\n    setTimeoutFunc(fn, 0);\n  };\n\nPromise._unhandledRejectionFn = function _unhandledRejectionFn(err) {\n  if (typeof console !== 'undefined' && console) {\n    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console\n  }\n};\n\nmodule.exports = Promise;\n\n}).call(this,require(\"timers\").setImmediate)\n},{\"timers\":124}],122:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar UA = global.navigator && global.navigator.userAgent;\n\nvar isAndroid = require('@braintree/browser-detection/is-android');\nvar isChrome = require('@braintree/browser-detection/is-chrome');\nvar isIos = require('@braintree/browser-detection/is-ios');\nvar isIE9 = require('@braintree/browser-detection/is-ie9');\n\n// Old Android Webviews used specific versions of Chrome with 0.0.0 as their version suffix\n// https://developer.chrome.com/multidevice/user-agent#webview_user_agent\nvar KITKAT_WEBVIEW_REGEX = /Version\\/\\d\\.\\d* Chrome\\/\\d*\\.0\\.0\\.0/;\n\nfunction _isOldSamsungBrowserOrSamsungWebview(ua) {\n  return !isChrome(ua) && ua.indexOf('Samsung') > -1;\n}\n\nfunction isKitKatWebview(uaArg) {\n  var ua = uaArg || UA;\n\n  return isAndroid(ua) && KITKAT_WEBVIEW_REGEX.test(ua);\n}\n\nfunction isAndroidChrome(uaArg) {\n  var ua = uaArg || UA;\n\n  return isAndroid(ua) && isChrome(ua);\n}\n\nfunction isSamsungBrowser(ua) {\n  ua = ua || UA;\n  return /SamsungBrowser/.test(ua) || _isOldSamsungBrowserOrSamsungWebview(ua);\n}\n\nmodule.exports = {\n  isIE9: isIE9,\n  isAndroidChrome: isAndroidChrome,\n  isIos: isIos,\n  isKitKatWebview: isKitKatWebview,\n  isSamsungBrowser: isSamsungBrowser\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"@braintree/browser-detection/is-android\":5,\"@braintree/browser-detection/is-chrome\":6,\"@braintree/browser-detection/is-ie9\":11,\"@braintree/browser-detection/is-ios\":15}],123:[function(require,module,exports){\n'use strict';\n\nvar device = require('./lib/device');\n\nmodule.exports = function () {\n  // Digits get dropped in samsung browser\n  return !device.isSamsungBrowser();\n};\n\n},{\"./lib/device\":122}],124:[function(require,module,exports){\n(function (setImmediate,clearImmediate){\nvar nextTick = require('process/browser.js').nextTick;\nvar apply = Function.prototype.apply;\nvar slice = Array.prototype.slice;\nvar immediateIds = {};\nvar nextImmediateId = 0;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) { timeout.close(); };\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// That's not how node.js implements it but the exposed api is the same.\nexports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function(fn) {\n  var id = nextImmediateId++;\n  var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n  immediateIds[id] = true;\n\n  nextTick(function onNextTick() {\n    if (immediateIds[id]) {\n      // fn.call() is faster so we optimize for the common use-case\n      // @see http://jsperf.com/call-apply-segu\n      if (args) {\n        fn.apply(null, args);\n      } else {\n        fn.call(null);\n      }\n      // Prevent ids from leaking\n      exports.clearImmediate(id);\n    }\n  });\n\n  return id;\n};\n\nexports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function(id) {\n  delete immediateIds[id];\n};\n}).call(this,require(\"timers\").setImmediate,require(\"timers\").clearImmediate)\n},{\"process/browser.js\":120,\"timers\":124}],125:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  paymentOptionIDs: {\n    card: 'card',\n    paypal: 'paypal',\n    paypalCredit: 'paypalCredit',\n    applePay: 'applePay',\n    venmo: 'venmo',\n    googlePay: 'googlePay'\n  },\n  paymentMethodTypes: {\n    card: 'CreditCard',\n    paypal: 'PayPalAccount',\n    paypalCredit: 'PayPalAccount',\n    applePay: 'ApplePayCard',\n    venmo: 'VenmoAccount',\n    googlePay: 'AndroidPayCard'\n  },\n  analyticsKinds: {\n    CreditCard: 'card',\n    PayPalAccount: 'paypal',\n    ApplePayCard: 'applepay',\n    VenmoAccount: 'venmo',\n    AndroidPayCard: 'googlepay'\n  },\n  paymentMethodCardTypes: {\n    Visa: 'visa',\n    MasterCard: 'master-card',\n    'American Express': 'american-express',\n    'Diners Club': 'diners-club',\n    Discover: 'discover',\n    JCB: 'jcb',\n    UnionPay: 'unionpay',\n    Maestro: 'maestro'\n  },\n  configurationCardTypes: {\n    visa: 'Visa',\n    'master-card': 'MasterCard',\n    'american-express': 'American Express',\n    'diners-club': 'Discover',\n    discover: 'Discover',\n    jcb: 'JCB',\n    unionpay: 'UnionPay',\n    maestro: 'Maestro'\n  },\n  errors: {\n    NO_PAYMENT_METHOD_ERROR: 'No payment method is available.',\n    DEVELOPER_MISCONFIGURATION_MESSAGE: 'Developer Error: Something went wrong. Check the console for details.'\n  },\n  ANALYTICS_REQUEST_TIMEOUT_MS: 2000,\n  ANALYTICS_PREFIX: 'web.dropin.',\n  CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT: 200,\n  CHECKOUT_JS_SOURCE: 'https://www.paypalobjects.com/api/checkout.min.js',\n  GOOGLE_PAYMENT_SOURCE: 'https://pay.google.com/gp/p/js/pay.js',\n  INTEGRATION: 'dropin2',\n  PAYPAL_CHECKOUT_SCRIPT_ID: 'braintree-dropin-paypal-checkout-script',\n  GOOGLE_PAYMENT_SCRIPT_ID: 'braintree-dropin-google-payment-script',\n  DATA_COLLECTOR_SCRIPT_ID: 'braintree-dropin-data-collector-script',\n  STYLESHEET_ID: 'braintree-dropin-stylesheet'\n};\n\n},{}],126:[function(require,module,exports){\n'use strict';\n\nvar analytics = require('./lib/analytics');\nvar DropinError = require('./lib/dropin-error');\nvar EventEmitter = require('./lib/event-emitter');\nvar constants = require('./constants');\nvar paymentMethodTypes = constants.paymentMethodTypes;\nvar paymentOptionIDs = constants.paymentOptionIDs;\nvar isGuestCheckout = require('./lib/is-guest-checkout');\nvar Promise = require('./lib/promise');\nvar paymentSheetViews = require('./views/payment-sheet-views');\nvar vaultManager = require('braintree-web/vault-manager');\n\nvar VAULTED_PAYMENT_METHOD_TYPES_THAT_SHOULD_BE_HIDDEN = [\n  paymentMethodTypes.applePay,\n  paymentMethodTypes.googlePay,\n  paymentMethodTypes.venmo\n];\nvar DEFAULT_PAYMENT_OPTION_PRIORITY = [\n  paymentOptionIDs.card,\n  paymentOptionIDs.paypal,\n  paymentOptionIDs.paypalCredit,\n  paymentOptionIDs.venmo,\n  paymentOptionIDs.applePay,\n  paymentOptionIDs.googlePay\n];\n\nfunction DropinModel(options) {\n  this.componentID = options.componentID;\n  this.merchantConfiguration = options.merchantConfiguration;\n\n  this.isGuestCheckout = isGuestCheckout(options.client);\n\n  this.dependenciesInitializing = 0;\n  this.dependencySuccessCount = 0;\n  this.failedDependencies = {};\n  this._options = options;\n\n  EventEmitter.call(this);\n}\n\nDropinModel.prototype = Object.create(EventEmitter.prototype, {\n  constructor: DropinModel\n});\n\nDropinModel.prototype.initialize = function () {\n  var self = this;\n\n  return vaultManager.create({\n    client: self._options.client\n  }).then(function (vaultManagerInstance) {\n    self._vaultManager = vaultManagerInstance;\n\n    return getSupportedPaymentOptions(self._options);\n  }).then(function (paymentOptions) {\n    self.supportedPaymentOptions = paymentOptions;\n\n    return self.getVaultedPaymentMethods();\n  }).then(function (paymentMethods) {\n    self._paymentMethods = paymentMethods;\n    self._paymentMethodIsRequestable = self._paymentMethods.length > 0;\n  });\n};\n\nDropinModel.prototype.isPaymentMethodRequestable = function () {\n  return Boolean(this._paymentMethodIsRequestable);\n};\n\nDropinModel.prototype.addPaymentMethod = function (paymentMethod) {\n  this._paymentMethods.push(paymentMethod);\n  this._emit('addPaymentMethod', paymentMethod);\n  this.changeActivePaymentMethod(paymentMethod);\n};\n\nDropinModel.prototype.removePaymentMethod = function (paymentMethod) {\n  var paymentMethodLocation = this._paymentMethods.indexOf(paymentMethod);\n\n  if (paymentMethodLocation === -1) {\n    return;\n  }\n\n  this._paymentMethods.splice(paymentMethodLocation, 1);\n  this._emit('removePaymentMethod', paymentMethod);\n};\n\nDropinModel.prototype.refreshPaymentMethods = function () {\n  var self = this;\n\n  return self.getVaultedPaymentMethods().then(function (paymentMethods) {\n    self._paymentMethods = paymentMethods;\n\n    self._emit('refreshPaymentMethods');\n  });\n};\n\nDropinModel.prototype.changeActivePaymentMethod = function (paymentMethod) {\n  this._activePaymentMethod = paymentMethod;\n  this._emit('changeActivePaymentMethod', paymentMethod);\n};\n\nDropinModel.prototype.changeActivePaymentView = function (paymentViewID) {\n  this._activePaymentView = paymentViewID;\n  this._emit('changeActivePaymentView', paymentViewID);\n};\n\nDropinModel.prototype.removeActivePaymentMethod = function () {\n  this._activePaymentMethod = null;\n  this._emit('removeActivePaymentMethod');\n  this.setPaymentMethodRequestable({\n    isRequestable: false\n  });\n};\n\nDropinModel.prototype.selectPaymentOption = function (paymentViewID) {\n  this._emit('paymentOptionSelected', {\n    paymentOption: paymentViewID\n  });\n};\n\nDropinModel.prototype.enableEditMode = function () {\n  analytics.sendEvent(this._options.client, 'manager.appeared');\n  this._isInEditMode = true;\n  this._emit('enableEditMode');\n};\n\nDropinModel.prototype.disableEditMode = function () {\n  this._isInEditMode = false;\n  this._emit('disableEditMode');\n};\n\nDropinModel.prototype.isInEditMode = function () {\n  return Boolean(this._isInEditMode);\n};\n\nDropinModel.prototype.confirmPaymentMethodDeletion = function (paymentMethod) {\n  this._paymentMethodWaitingToBeDeleted = paymentMethod;\n  this._emit('confirmPaymentMethodDeletion', paymentMethod);\n};\n\nDropinModel.prototype._shouldEmitRequestableEvent = function (options) {\n  var requestableStateHasNotChanged = this.isPaymentMethodRequestable() === options.isRequestable;\n  var typeHasNotChanged = options.type === this._paymentMethodRequestableType;\n\n  if (requestableStateHasNotChanged && (!options.isRequestable || typeHasNotChanged)) {\n    return false;\n  }\n\n  return true;\n};\n\nDropinModel.prototype.setPaymentMethodRequestable = function (options) {\n  var shouldEmitEvent = this._shouldEmitRequestableEvent(options);\n  var paymentMethodRequestableResponse = {\n    paymentMethodIsSelected: Boolean(options.selectedPaymentMethod),\n    type: options.type\n  };\n\n  this._paymentMethodIsRequestable = options.isRequestable;\n\n  if (options.isRequestable) {\n    this._paymentMethodRequestableType = options.type;\n  } else {\n    delete this._paymentMethodRequestableType;\n  }\n\n  if (!shouldEmitEvent) {\n    return;\n  }\n\n  if (options.isRequestable) {\n    this._emit('paymentMethodRequestable', paymentMethodRequestableResponse);\n  } else {\n    this._emit('noPaymentMethodRequestable');\n  }\n};\n\nDropinModel.prototype.getPaymentMethods = function () {\n  // we want to return a copy of the Array\n  // so we can loop through it in dropin.updateConfiguration\n  // while calling model.removePaymentMethod\n  // which updates the original array\n  return this._paymentMethods.slice();\n};\n\nDropinModel.prototype.getActivePaymentMethod = function () {\n  return this._activePaymentMethod;\n};\n\nDropinModel.prototype.getActivePaymentView = function () {\n  return this._activePaymentView;\n};\n\nDropinModel.prototype.reportAppSwitchPayload = function (payload) {\n  this.appSwitchPayload = payload;\n};\n\nDropinModel.prototype.reportAppSwitchError = function (sheetId, error) {\n  this.appSwitchError = {\n    id: sheetId,\n    error: error\n  };\n};\n\nDropinModel.prototype.asyncDependencyStarting = function () {\n  this.dependenciesInitializing++;\n};\n\nDropinModel.prototype.asyncDependencyReady = function () {\n  this.dependencySuccessCount++;\n  this.dependenciesInitializing--;\n  this._checkAsyncDependencyFinished();\n};\n\nDropinModel.prototype.asyncDependencyFailed = function (options) {\n  if (this.failedDependencies.hasOwnProperty(options.view)) {\n    return;\n  }\n  this.failedDependencies[options.view] = options.error;\n  this.dependenciesInitializing--;\n  this._checkAsyncDependencyFinished();\n};\n\nDropinModel.prototype._checkAsyncDependencyFinished = function () {\n  if (this.dependenciesInitializing === 0) {\n    this._emit('asyncDependenciesReady');\n  }\n};\n\nDropinModel.prototype.cancelInitialization = function (error) {\n  this._emit('cancelInitialization', error);\n};\n\nDropinModel.prototype.reportError = function (error) {\n  this._emit('errorOccurred', error);\n};\n\nDropinModel.prototype.clearError = function () {\n  this._emit('errorCleared');\n};\n\nDropinModel.prototype.preventUserAction = function () {\n  this._emit('preventUserAction');\n};\n\nDropinModel.prototype.allowUserAction = function () {\n  this._emit('allowUserAction');\n};\n\nDropinModel.prototype.deleteVaultedPaymentMethod = function () {\n  var self = this;\n  var promise = Promise.resolve();\n  var error;\n\n  this._emit('startVaultedPaymentMethodDeletion');\n\n  if (!self.isGuestCheckout) {\n    promise = this._vaultManager.deletePaymentMethod(this._paymentMethodWaitingToBeDeleted.nonce).catch(function (err) {\n      error = err;\n    });\n  }\n\n  return promise.then(function () {\n    delete self._paymentMethodWaitingToBeDeleted;\n\n    return self.refreshPaymentMethods();\n  }).then(function () {\n    self.disableEditMode();\n    self._emit('finishVaultedPaymentMethodDeletion', error);\n  });\n};\n\nDropinModel.prototype.cancelDeleteVaultedPaymentMethod = function () {\n  this._emit('cancelVaultedPaymentMethodDeletion');\n\n  delete this._paymentMethodWaitingToBeDeleted;\n};\n\nDropinModel.prototype.getVaultedPaymentMethods = function () {\n  var self = this;\n\n  if (self.isGuestCheckout) {\n    return Promise.resolve([]);\n  }\n\n  return self._vaultManager.fetchPaymentMethods({\n    defaultFirst: true\n  }).then(function (paymentMethods) {\n    return self._getSupportedPaymentMethods(paymentMethods).map(function (paymentMethod) {\n      paymentMethod.vaulted = true;\n\n      return paymentMethod;\n    });\n  }).catch(function () {\n    return Promise.resolve([]);\n  });\n};\n\nDropinModel.prototype._getSupportedPaymentMethods = function (paymentMethods) {\n  var supportedPaymentMethods = this.supportedPaymentOptions.reduce(function (array, key) {\n    var paymentMethodType = paymentMethodTypes[key];\n\n    if (canShowVaultedPaymentMethodType(paymentMethodType)) {\n      array.push(paymentMethodType);\n    }\n\n    return array;\n  }, []);\n\n  return paymentMethods.filter(function (paymentMethod) {\n    return supportedPaymentMethods.indexOf(paymentMethod.type) > -1;\n  });\n};\n\nfunction getSupportedPaymentOptions(options) {\n  var paymentOptionPriority = options.merchantConfiguration.paymentOptionPriority || DEFAULT_PAYMENT_OPTION_PRIORITY;\n  var promises;\n\n  if (!(paymentOptionPriority instanceof Array)) {\n    throw new DropinError('paymentOptionPriority must be an array.');\n  }\n\n  // Remove duplicates\n  paymentOptionPriority = paymentOptionPriority.filter(function (item, pos) { return paymentOptionPriority.indexOf(item) === pos; });\n\n  promises = paymentOptionPriority.map(function (paymentOption) {\n    return getPaymentOption(paymentOption, options);\n  });\n\n  return Promise.all(promises).then(function (result) {\n    result = result.filter(function (item) {\n      return item.success;\n    });\n\n    if (result.length === 0) {\n      return Promise.reject(new DropinError('No valid payment options available.'));\n    }\n\n    return result.map(function (item) { return item.id; });\n  });\n}\n\nfunction getPaymentOption(paymentOption, options) {\n  return isPaymentOptionEnabled(paymentOption, options).then(function (success) {\n    return {\n      success: success,\n      id: paymentOptionIDs[paymentOption]\n    };\n  });\n}\n\nfunction isPaymentOptionEnabled(paymentOption, options) {\n  var SheetView = paymentSheetViews[paymentOptionIDs[paymentOption]];\n\n  if (!SheetView) {\n    return Promise.reject(new DropinError('paymentOptionPriority: Invalid payment option specified.'));\n  }\n\n  return SheetView.isEnabled({\n    client: options.client,\n    merchantConfiguration: options.merchantConfiguration\n  }).catch(function (error) {\n    console.error(SheetView.ID + ' view errored when checking if it was supported.'); // eslint-disable-line no-console\n    console.error(error); // eslint-disable-line no-console\n\n    return Promise.resolve(false);\n  });\n}\n\nfunction canShowVaultedPaymentMethodType(paymentMethodType) {\n  return paymentMethodType && VAULTED_PAYMENT_METHOD_TYPES_THAT_SHOULD_BE_HIDDEN.indexOf(paymentMethodType) === -1;\n}\n\nmodule.exports = DropinModel;\n\n},{\"./constants\":125,\"./lib/analytics\":130,\"./lib/dropin-error\":135,\"./lib/event-emitter\":136,\"./lib/is-guest-checkout\":138,\"./lib/promise\":143,\"./views/payment-sheet-views\":183,\"braintree-web/vault-manager\":110}],127:[function(require,module,exports){\n'use strict';\n\nvar assign = require('./lib/assign').assign;\nvar analytics = require('./lib/analytics');\nvar classList = require('@braintree/class-list');\nvar constants = require('./constants');\nvar DropinError = require('./lib/dropin-error');\nvar DropinModel = require('./dropin-model');\nvar EventEmitter = require('./lib/event-emitter');\nvar assets = require('@braintree/asset-loader');\n\nvar MainView = require('./views/main-view');\nvar paymentMethodsViewID = require('./views/payment-methods-view').ID;\nvar paymentOptionsViewID = require('./views/payment-options-view').ID;\nvar paymentOptionIDs = constants.paymentOptionIDs;\nvar translations = require('./translations').translations;\nvar isUtf8 = require('./lib/is-utf-8');\nvar uuid = require('./lib/uuid');\nvar Promise = require('./lib/promise');\nvar sanitizeHtml = require('./lib/sanitize-html');\nvar DataCollector = require('./lib/data-collector');\nvar ThreeDSecure = require('./lib/three-d-secure');\nvar wrapPrototype = require('@braintree/wrap-promise').wrapPrototype;\n\nvar mainHTML = \"<div class=\\\"braintree-dropin\\\">\\n  <div data-braintree-id=\\\"methods-label\\\" class=\\\"braintree-heading\\\">&nbsp;</div>\\n  <div data-braintree-id=\\\"methods-edit\\\" class=\\\"braintree-hidden braintree-heading\\\">{{edit}}</div>\\n  <div data-braintree-id=\\\"choose-a-way-to-pay\\\" class=\\\"braintree-heading\\\">{{chooseAWayToPay}}</div>\\n  <div class=\\\"braintree-placeholder\\\">&nbsp;</div>\\n\\n  <div data-braintree-id=\\\"upper-container\\\" class=\\\"braintree-upper-container\\\">\\n    <div data-braintree-id=\\\"loading-container\\\" class=\\\"braintree-loader__container\\\">\\n      <div data-braintree-id=\\\"loading-indicator\\\" class=\\\"braintree-loader__indicator\\\">\\n        <svg width=\\\"14\\\" height=\\\"16\\\" class=\\\"braintree-loader__lock\\\">\\n          <use xlink:href=\\\"#iconLockLoader\\\"></use>\\n        </svg>\\n      </div>\\n    </div>\\n\\n    <div data-braintree-id=\\\"delete-confirmation\\\" class=\\\"braintree-delete-confirmation braintree-sheet\\\">\\n      <div data-braintree-id=\\\"delete-confirmation__message\\\"></div>\\n      <div class=\\\"braintree-delete-confirmation__button-container\\\">\\n        <div role=\\\"button\\\" data-braintree-id=\\\"delete-confirmation__no\\\" class=\\\"braintree-delete-confirmation__button\\\">{{deleteCancelButton}}</div>\\n        <div role=\\\"button\\\" data-braintree-id=\\\"delete-confirmation__yes\\\" class=\\\"braintree-delete-confirmation__button\\\">{{deleteConfirmationButton}}</div>\\n      </div>\\n    </div>\\n\\n    <div data-braintree-id=\\\"methods\\\" class=\\\"braintree-methods braintree-methods-initial\\\">\\n      <div data-braintree-id=\\\"methods-container\\\"></div>\\n    </div>\\n\\n    <div data-braintree-id=\\\"options\\\" class=\\\"braintree-test-class braintree-options braintree-options-initial\\\">\\n      <div data-braintree-id=\\\"payment-options-container\\\" class=\\\"braintree-options-list\\\"></div>\\n    </div>\\n\\n    <div data-braintree-id=\\\"sheet-container\\\" class=\\\"braintree-sheet__container\\\">\\n      <div data-braintree-id=\\\"paypal\\\" class=\\\"braintree-paypal braintree-sheet\\\">\\n        <div data-braintree-id=\\\"paypal-sheet-header\\\" class=\\\"braintree-sheet__header\\\">\\n          <div class=\\\"braintree-sheet__header-label\\\">\\n            <div class=\\\"braintree-sheet__logo--header\\\">\\n              <svg width=\\\"40\\\" height=\\\"24\\\">\\n                <use xlink:href=\\\"#logoPayPal\\\"></use>\\n              </svg>\\n            </div>\\n            <div class=\\\"braintree-sheet__label\\\">{{PayPal}}</div>\\n          </div>\\n        </div>\\n        <div class=\\\"braintree-sheet__content braintree-sheet__content--button\\\">\\n          <div data-braintree-id=\\\"paypal-button\\\" class=\\\"braintree-sheet__button--paypal\\\"></div>\\n        </div>\\n      </div>\\n      <div data-braintree-id=\\\"paypalCredit\\\" class=\\\"braintree-paypalCredit braintree-sheet\\\">\\n        <div data-braintree-id=\\\"paypal-credit-sheet-header\\\" class=\\\"braintree-sheet__header\\\">\\n          <div class=\\\"braintree-sheet__header-label\\\">\\n            <div class=\\\"braintree-sheet__logo--header\\\">\\n              <svg width=\\\"40\\\" height=\\\"24\\\">\\n                <use xlink:href=\\\"#logoPayPalCredit\\\"></use>\\n              </svg>\\n            </div>\\n            <div class=\\\"braintree-sheet__label\\\">{{PayPal Credit}}</div>\\n          </div>\\n        </div>\\n        <div class=\\\"braintree-sheet__content braintree-sheet__content--button\\\">\\n          <div data-braintree-id=\\\"paypal-credit-button\\\" class=\\\"braintree-sheet__button--paypal\\\"></div>\\n        </div>\\n      </div>\\n      <div data-braintree-id=\\\"applePay\\\" class=\\\"braintree-applePay braintree-sheet\\\">\\n        <div data-braintree-id=\\\"apple-pay-sheet-header\\\" class=\\\"braintree-sheet__header\\\">\\n          <div class=\\\"braintree-sheet__header-label\\\">\\n            <div class=\\\"braintree-sheet__logo--header\\\">\\n              <svg height=\\\"24\\\" width=\\\"40\\\">\\n              <use xlink:href=\\\"#logoApplePay\\\"></use>\\n              </svg>\\n            </div>\\n            <div class=\\\"braintree-sheet__label\\\">{{Apple Pay}}</div>\\n          </div>\\n        </div>\\n        <div class=\\\"braintree-sheet__content braintree-sheet__content--button\\\">\\n          <div data-braintree-id=\\\"apple-pay-button\\\" class=\\\"braintree-sheet__button--apple-pay apple-pay-button\\\"></div>\\n        </div>\\n      </div>\\n      <div data-braintree-id=\\\"googlePay\\\" class=\\\"braintree-googlePay braintree-sheet\\\">\\n        <div data-braintree-id=\\\"google-pay-sheet-header\\\" class=\\\"braintree-sheet__header\\\">\\n          <div class=\\\"braintree-sheet__header-label\\\">\\n            <div class=\\\"braintree-sheet__logo--header\\\">\\n              <svg height=\\\"24\\\" width=\\\"40\\\">\\n              <use xlink:href=\\\"#logoGooglePay\\\"></use>\\n              </svg>\\n            </div>\\n            <div class=\\\"braintree-sheet__label\\\">{{Google Pay}}</div>\\n          </div>\\n        </div>\\n        <div class=\\\"braintree-sheet__content braintree-sheet__content--button\\\">\\n          <div data-braintree-id=\\\"google-pay-button\\\"></div>\\n        </div>\\n      </div>\\n      <div data-braintree-id=\\\"venmo\\\" class=\\\"braintree-venmo braintree-sheet\\\">\\n        <div data-braintree-id=\\\"venmo-sheet-header\\\" class=\\\"braintree-sheet__header\\\">\\n          <div class=\\\"braintree-sheet__header-label\\\">\\n            <div class=\\\"braintree-sheet__logo--header\\\">\\n              <svg height=\\\"24\\\" width=\\\"40\\\">\\n              <use xlink:href=\\\"#logoVenmo\\\"></use>\\n              </svg>\\n            </div>\\n            <div class=\\\"braintree-sheet__label\\\">{{Venmo}}</div>\\n          </div>\\n        </div>\\n        <div class=\\\"braintree-sheet__content braintree-sheet__content--button\\\">\\n          <svg data-braintree-id=\\\"venmo-button\\\" class=\\\"braintree-sheet__button--venmo\\\">\\n            <use xlink:href=\\\"#buttonVenmo\\\"></use>\\n          </svg>\\n        </div>\\n      </div>\\n      <div data-braintree-id=\\\"card\\\" class=\\\"braintree-card braintree-form braintree-sheet\\\">\\n        <div data-braintree-id=\\\"card-sheet-header\\\" class=\\\"braintree-sheet__header\\\">\\n          <div class=\\\"braintree-sheet__header-label\\\">\\n            <div class=\\\"braintree-sheet__logo--header\\\">\\n              <svg width=\\\"40\\\" height=\\\"24\\\" class=\\\"braintree-icon--bordered\\\">\\n                <use xlink:href=\\\"#iconCardFront\\\"></use>\\n              </svg>\\n            </div>\\n            <div class=\\\"braintree-sheet__text\\\">{{payWithCard}}</div>\\n          </div>\\n          <div data-braintree-id=\\\"card-view-icons\\\" class=\\\"braintree-sheet__icons\\\"></div>\\n        </div>\\n        <div class=\\\"braintree-sheet__content braintree-sheet__content--form\\\">\\n          <div data-braintree-id=\\\"cardholder-name-field-group\\\" class=\\\"braintree-form__field-group\\\">\\n            <label for=\\\"braintree__card-view-input__cardholder-name\\\">\\n              <div class=\\\"braintree-form__label\\\">{{cardholderNameLabel}}</div>\\n              <div class=\\\"braintree-form__field\\\">\\n                <div class=\\\"braintree-form-cardholder-name braintree-form__hosted-field\\\">\\n                  <input class=\\\"braintree-form__raw-input\\\" id=\\\"braintree__card-view-input__cardholder-name\\\" type=\\\"text\\\" placeholder=\\\"{{cardholderNamePlaceholder}}\\\"/>\\n                </div>\\n                <div class=\\\"braintree-form__icon-container\\\">\\n                  <div class=\\\"braintree-form__icon braintree-form__field-error-icon\\\">\\n                    <svg width=\\\"24\\\" height=\\\"24\\\">\\n                      <use xlink:href=\\\"#iconError\\\"></use>\\n                    </svg>\\n                  </div>\\n                </div>\\n              </div>\\n            </label>\\n            <div data-braintree-id=\\\"cardholder-name-field-error\\\" class=\\\"braintree-form__field-error\\\"></div>\\n          </div>\\n          <div data-braintree-id=\\\"number-field-group\\\" class=\\\"braintree-form__field-group\\\">\\n            <label>\\n              <div class=\\\"braintree-form__label\\\">{{cardNumberLabel}}</div>\\n              <div class=\\\"braintree-form__field\\\">\\n                <div class=\\\"braintree-form-number braintree-form__hosted-field\\\"></div>\\n                <div class=\\\"braintree-form__icon-container\\\">\\n                  <div data-braintree-id=\\\"card-number-icon\\\" class=\\\"braintree-form__icon braintree-form__field-secondary-icon\\\">\\n                    <svg width=\\\"40\\\" height=\\\"24\\\" class=\\\"braintree-icon--bordered\\\">\\n                    <use data-braintree-id=\\\"card-number-icon-svg\\\" xlink:href=\\\"#iconCardFront\\\"></use>\\n                    </svg>\\n                  </div>\\n                  <div class=\\\"braintree-form__icon braintree-form__field-error-icon\\\">\\n                    <svg width=\\\"24\\\" height=\\\"24\\\">\\n                      <use xlink:href=\\\"#iconError\\\"></use>\\n                    </svg>\\n                  </div>\\n                </div>\\n              </div>\\n            </label>\\n            <div data-braintree-id=\\\"number-field-error\\\" class=\\\"braintree-form__field-error\\\"></div>\\n          </div>\\n\\n          <div class=\\\"braintree-form__flexible-fields\\\">\\n            <div data-braintree-id=\\\"expiration-date-field-group\\\" class=\\\"braintree-form__field-group\\\">\\n              <label>\\n                <div class=\\\"braintree-form__label\\\">{{expirationDateLabel}}\\n                  <span class=\\\"braintree-form__descriptor\\\">{{expirationDateLabelSubheading}}</span>\\n                </div>\\n                <div class=\\\"braintree-form__field\\\">\\n                  <div class=\\\"braintree-form__hosted-field braintree-form-expiration\\\"></div>\\n                  <div class=\\\"braintree-form__icon-container\\\">\\n                    <div class=\\\"braintree-form__icon braintree-form__field-error-icon\\\">\\n                      <svg width=\\\"24\\\" height=\\\"24\\\">\\n                        <use xlink:href=\\\"#iconError\\\"></use>\\n                      </svg>\\n                    </div>\\n                  </div>\\n                </div>\\n              </label>\\n              <div data-braintree-id=\\\"expiration-date-field-error\\\" class=\\\"braintree-form__field-error\\\"></div>\\n            </div>\\n            \\n\\n            <div data-braintree-id=\\\"cvv-field-group\\\" class=\\\"braintree-form__field-group\\\">\\n              <label>\\n                <div class=\\\"braintree-form__label\\\">{{cvvLabel}}\\n                  <span data-braintree-id=\\\"cvv-label-descriptor\\\" class=\\\"braintree-form__descriptor\\\">{{cvvThreeDigitLabelSubheading}}</span>\\n                </div>\\n                <div class=\\\"braintree-form__field\\\">\\n                  <div class=\\\"braintree-form__hosted-field braintree-form-cvv\\\"></div>\\n                  <div class=\\\"braintree-form__icon-container\\\">\\n                    <div data-braintree-id=\\\"cvv-icon\\\" class=\\\"braintree-form__icon braintree-form__field-secondary-icon\\\">\\n                      <svg width=\\\"40\\\" height=\\\"24\\\" class=\\\"braintree-icon--bordered\\\">\\n                      <use data-braintree-id=\\\"cvv-icon-svg\\\" xlink:href=\\\"#iconCVVBack\\\"></use>\\n                      </svg>\\n                    </div>\\n                    <div class=\\\"braintree-form__icon braintree-form__field-error-icon\\\">\\n                      <svg width=\\\"24\\\" height=\\\"24\\\">\\n                        <use xlink:href=\\\"#iconError\\\"></use>\\n                      </svg>\\n                    </div>\\n                  </div>\\n                </div>\\n              </label>\\n              <div data-braintree-id=\\\"cvv-field-error\\\" class=\\\"braintree-form__field-error\\\"></div>\\n            </div>\\n\\n            <div data-braintree-id=\\\"postal-code-field-group\\\" class=\\\"braintree-form__field-group\\\">\\n              <label>\\n                <div class=\\\"braintree-form__label\\\">{{postalCodeLabel}}</div>\\n                <div class=\\\"braintree-form__field\\\">\\n                  <div class=\\\"braintree-form__hosted-field braintree-form-postal-code\\\"></div>\\n                  <div class=\\\"braintree-form__icon-container\\\">\\n                    <div class=\\\"braintree-form__icon braintree-form__field-error-icon\\\">\\n                      <svg width=\\\"24\\\" height=\\\"24\\\">\\n                        <use xlink:href=\\\"#iconError\\\"></use>\\n                      </svg>\\n                    </div>\\n                  </div>\\n                </div>\\n              </label>\\n              <div data-braintree-id=\\\"postal-code-field-error\\\" class=\\\"braintree-form__field-error\\\"></div>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <div data-braintree-id=\\\"sheet-error\\\" class=\\\"braintree-sheet__error\\\">\\n        <div class=\\\"braintree-form__icon braintree-sheet__error-icon\\\">\\n          <svg width=\\\"24\\\" height=\\\"24\\\">\\n            <use xlink:href=\\\"#iconError\\\"></use>\\n          </svg>\\n        </div>\\n        <div data-braintree-id=\\\"sheet-error-text\\\" class=\\\"braintree-sheet__error-text\\\"></div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div data-braintree-id=\\\"lower-container\\\" class=\\\"braintree-test-class braintree-options braintree-hidden\\\">\\n    <div data-braintree-id=\\\"other-ways-to-pay\\\" class=\\\"braintree-heading\\\">{{otherWaysToPay}}</div>\\n  </div>\\n\\n  <div data-braintree-id=\\\"toggle\\\" class=\\\"braintree-large-button braintree-toggle braintree-hidden\\\" tabindex=\\\"0\\\">\\n    <span>{{chooseAnotherWayToPay}}</span>\\n  </div>\\n</div>\\n<div data-braintree-id=\\\"disable-wrapper\\\" class=\\\"braintree-dropin__disabled braintree-hidden\\\"></div>\\n\";\nvar svgHTML = \"<svg data-braintree-id=\\\"svgs\\\" style=\\\"display: none\\\">\\n  <defs>\\n    <symbol id=\\\"icon-visa\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>Visa</title>\\n      <path d=\\\"M0 1.927C0 .863.892 0 1.992 0h36.016C39.108 0 40 .863 40 1.927v20.146C40 23.137 39.108 24 38.008 24H1.992C.892 24 0 23.137 0 22.073V1.927z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M0 22.033C0 23.12.892 24 1.992 24h36.016c1.1 0 1.992-.88 1.992-1.967V20.08H0v1.953z\\\" style=\\\"fill: #F8B600\\\" />\\n      <path d=\\\"M0 3.92h40V1.967C40 .88 39.108 0 38.008 0H1.992C.892 0 0 .88 0 1.967V3.92zM19.596 7.885l-2.11 9.478H14.93l2.11-9.478h2.554zm10.743 6.12l1.343-3.56.773 3.56H30.34zm2.85 3.358h2.36l-2.063-9.478H31.31c-.492 0-.905.274-1.088.695l-3.832 8.783h2.682l.532-1.415h3.276l.31 1.415zm-6.667-3.094c.01-2.502-3.6-2.64-3.577-3.76.008-.338.345-.7 1.083-.793.365-.045 1.373-.08 2.517.425l.448-2.01c-.615-.214-1.405-.42-2.39-.42-2.523 0-4.3 1.288-4.313 3.133-.016 1.364 1.268 2.125 2.234 2.58.996.464 1.33.762 1.325 1.177-.006.636-.793.918-1.526.928-1.285.02-2.03-.333-2.623-.6l-.462 2.08c.598.262 1.7.49 2.84.502 2.682 0 4.437-1.273 4.445-3.243zM15.948 7.884l-4.138 9.478h-2.7L7.076 9.8c-.123-.466-.23-.637-.606-.834-.615-.32-1.63-.62-2.52-.806l.06-.275h4.345c.554 0 1.052.354 1.178.966l1.076 5.486 2.655-6.45h2.683z\\\" style=\\\"fill: #1A1F71\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"icon-master-card\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>MasterCard</title>\\n      <path d=\\\"M0 1.927C0 .863.892 0 1.992 0h36.016C39.108 0 40 .863 40 1.927v20.146C40 23.137 39.108 24 38.008 24H1.992C.892 24 0 23.137 0 22.073V1.927z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M11.085 22.2v-1.36c0-.522-.318-.863-.864-.863-.272 0-.568.09-.773.386-.16-.25-.386-.386-.727-.386-.228 0-.455.068-.637.318v-.272h-.478V22.2h.478v-1.202c0-.386.204-.567.523-.567.318 0 .478.205.478.568V22.2h.477v-1.202c0-.386.23-.567.524-.567.32 0 .478.205.478.568V22.2h.523zm7.075-2.177h-.774v-.658h-.478v.658h-.432v.43h.432v.998c0 .5.205.795.75.795.206 0 .433-.068.592-.16l-.136-.407c-.136.09-.296.114-.41.114-.227 0-.318-.137-.318-.363v-.976h.774v-.43zm4.048-.046c-.273 0-.454.136-.568.318v-.272h-.478V22.2h.478v-1.225c0-.363.16-.567.455-.567.09 0 .204.023.295.046l.137-.454c-.09-.023-.228-.023-.32-.023zm-6.118.227c-.228-.16-.546-.227-.888-.227-.546 0-.91.272-.91.703 0 .363.274.567.75.635l.23.023c.25.045.385.113.385.227 0 .16-.182.272-.5.272-.32 0-.57-.113-.728-.227l-.228.363c.25.18.59.272.932.272.637 0 1-.295 1-.703 0-.385-.295-.59-.75-.658l-.227-.022c-.205-.023-.364-.068-.364-.204 0-.16.16-.25.41-.25.272 0 .545.114.682.182l.205-.386zm12.692-.227c-.273 0-.455.136-.568.318v-.272h-.478V22.2h.478v-1.225c0-.363.16-.567.455-.567.09 0 .203.023.294.046L29.1 20c-.09-.023-.227-.023-.318-.023zm-6.096 1.134c0 .66.455 1.135 1.16 1.135.32 0 .546-.068.774-.25l-.228-.385c-.182.136-.364.204-.57.204-.385 0-.658-.272-.658-.703 0-.407.273-.68.66-.702.204 0 .386.068.568.204l.228-.385c-.228-.182-.455-.25-.774-.25-.705 0-1.16.477-1.16 1.134zm4.413 0v-1.087h-.48v.272c-.158-.204-.385-.318-.68-.318-.615 0-1.093.477-1.093 1.134 0 .66.478 1.135 1.092 1.135.317 0 .545-.113.68-.317v.272h.48v-1.09zm-1.753 0c0-.384.25-.702.66-.702.387 0 .66.295.66.703 0 .387-.273.704-.66.704-.41-.022-.66-.317-.66-.703zm-5.71-1.133c-.636 0-1.09.454-1.09 1.134 0 .682.454 1.135 1.114 1.135.32 0 .638-.09.888-.295l-.228-.34c-.18.136-.41.227-.636.227-.296 0-.592-.136-.66-.522h1.615v-.18c.022-.704-.388-1.158-1.002-1.158zm0 .41c.297 0 .502.18.547.52h-1.137c.045-.295.25-.52.59-.52zm11.852.724v-1.95h-.48v1.135c-.158-.204-.385-.318-.68-.318-.615 0-1.093.477-1.093 1.134 0 .66.478 1.135 1.092 1.135.318 0 .545-.113.68-.317v.272h.48v-1.09zm-1.752 0c0-.384.25-.702.66-.702.386 0 .66.295.66.703 0 .387-.274.704-.66.704-.41-.022-.66-.317-.66-.703zm-15.97 0v-1.087h-.476v.272c-.16-.204-.387-.318-.683-.318-.615 0-1.093.477-1.093 1.134 0 .66.478 1.135 1.092 1.135.318 0 .545-.113.682-.317v.272h.477v-1.09zm-1.773 0c0-.384.25-.702.66-.702.386 0 .66.295.66.703 0 .387-.274.704-.66.704-.41-.022-.66-.317-.66-.703z\\\" style=\\\"fill: #000\\\" />\\n      <path style=\\\"fill: #FF5F00\\\" d=\\\"M23.095 3.49H15.93v12.836h7.165\\\" />\\n      <path d=\\\"M16.382 9.91c0-2.61 1.23-4.922 3.117-6.42-1.39-1.087-3.14-1.745-5.05-1.745-4.528 0-8.19 3.65-8.19 8.164 0 4.51 3.662 8.162 8.19 8.162 1.91 0 3.66-.657 5.05-1.746-1.89-1.474-3.118-3.81-3.118-6.417z\\\" style=\\\"fill: #EB001B\\\" />\\n      <path d=\\\"M32.76 9.91c0 4.51-3.664 8.162-8.19 8.162-1.91 0-3.662-.657-5.05-1.746 1.91-1.496 3.116-3.81 3.116-6.417 0-2.61-1.228-4.922-3.116-6.42 1.388-1.087 3.14-1.745 5.05-1.745 4.526 0 8.19 3.674 8.19 8.164z\\\" style=\\\"fill: #F79E1B\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"icon-unionpay\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>Union Pay</title>\\n      <path d=\\\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M9.877 2h8.126c1.135 0 1.84.93 1.575 2.077l-3.783 16.35c-.267 1.142-1.403 2.073-2.538 2.073H5.13c-1.134 0-1.84-.93-1.574-2.073L7.34 4.076C7.607 2.93 8.74 2 9.878 2z\\\" style=\\\"fill: #E21836\\\" />\\n      <path d=\\\"M17.325 2h9.345c1.134 0 .623.93.356 2.077l-3.783 16.35c-.265 1.142-.182 2.073-1.32 2.073H12.58c-1.137 0-1.84-.93-1.574-2.073l3.783-16.35C15.056 2.93 16.19 2 17.324 2z\\\" style=\\\"fill: #00447B\\\" />\\n      <path d=\\\"M26.3 2h8.126c1.136 0 1.84.93 1.575 2.077l-3.782 16.35c-.266 1.142-1.402 2.073-2.54 2.073h-8.122c-1.137 0-1.842-.93-1.574-2.073l3.78-16.35C24.03 2.93 25.166 2 26.303 2z\\\" style=\\\"fill: #007B84\\\" />\\n      <path d=\\\"M27.633 14.072l-.99 3.3h.266l-.208.68h-.266l-.062.212h-.942l.064-.21H23.58l.193-.632h.194l1.005-3.35.2-.676h.962l-.1.34s.255-.184.498-.248c.242-.064 1.636-.088 1.636-.088l-.206.672h-.33zm-1.695 0l-.254.843s.285-.13.44-.172c.16-.04.395-.057.395-.057l.182-.614h-.764zm-.38 1.262l-.263.877s.29-.15.447-.196c.157-.037.396-.066.396-.066l.185-.614h-.766zm-.614 2.046h.767l.222-.74h-.765l-.223.74z\\\" style=\\\"fill: #FEFEFE\\\" />\\n      <path d=\\\"M28.055 13.4h1.027l.01.385c-.005.065.05.096.17.096h.208l-.19.637h-.555c-.48.035-.662-.172-.65-.406l-.02-.71zM28.193 16.415h-.978l.167-.566H28.5l.16-.517h-1.104l.19-.638h3.072l-.193.638h-1.03l-.16.516h1.032l-.17.565H29.18l-.2.24h.454l.11.712c.013.07.014.116.036.147.023.026.158.038.238.038h.137l-.21.694h-.348c-.054 0-.133-.004-.243-.01-.105-.008-.18-.07-.25-.105-.064-.03-.16-.11-.182-.24l-.11-.712-.507.7c-.162.222-.38.39-.748.39h-.712l.186-.62h.273c.078 0 .15-.03.2-.056.052-.023.098-.05.15-.126l.74-1.05zM17.478 14.867h2.59l-.19.622H18.84l-.16.53h1.06l-.194.64h-1.06l-.256.863c-.03.095.25.108.353.108l.53-.072-.212.71h-1.193c-.096 0-.168-.013-.272-.037-.1-.023-.145-.07-.19-.138-.043-.07-.11-.128-.064-.278l.343-1.143h-.588l.195-.65h.592l.156-.53h-.588l.188-.623zM19.223 13.75h1.063l-.194.65H18.64l-.157.136c-.067.066-.09.038-.18.087-.08.04-.254.123-.477.123h-.466l.19-.625h.14c.118 0 .198-.01.238-.036.046-.03.098-.096.157-.203l.267-.487h1.057l-.187.356zM20.74 13.4h.905l-.132.46s.286-.23.487-.313c.2-.075.65-.143.65-.143l1.464-.007-.498 1.672c-.085.286-.183.472-.244.555-.055.087-.12.16-.248.23-.124.066-.236.104-.34.115-.096.007-.244.01-.45.012h-1.41l-.4 1.324c-.037.13-.055.194-.03.23.02.03.068.066.135.066l.62-.06-.21.726h-.698c-.22 0-.383-.004-.495-.013-.108-.01-.22 0-.295-.058-.065-.058-.164-.133-.162-.21.007-.073.037-.192.082-.356l1.268-4.23zm1.922 1.69h-1.484l-.09.3h1.283c.152-.018.184.004.196-.003l.096-.297zm-1.402-.272s.29-.266.786-.353c.112-.022.82-.015.82-.015l.106-.357h-1.496l-.216.725z\\\" style=\\\"fill: #FEFEFE\\\" />\\n      <path d=\\\"M23.382 16.1l-.084.402c-.036.125-.067.22-.16.302-.1.084-.216.172-.488.172l-.502.02-.004.455c-.006.13.028.117.048.138.024.022.045.032.067.04l.157-.008.48-.028-.198.663h-.552c-.385 0-.67-.008-.765-.084-.092-.057-.105-.132-.103-.26l.035-1.77h.88l-.013.362h.212c.072 0 .12-.007.15-.026.027-.02.047-.048.06-.093l.087-.282h.692zM10.84 7.222c-.032.143-.596 2.763-.598 2.764-.12.53-.21.91-.508 1.152-.172.14-.37.21-.6.21-.37 0-.587-.185-.624-.537l-.007-.12.113-.712s.593-2.388.7-2.703c.002-.017.005-.026.007-.035-1.152.01-1.357 0-1.37-.018-.007.024-.037.173-.037.173l-.605 2.688-.05.23-.1.746c0 .22.042.4.13.553.275.485 1.06.557 1.504.557.573 0 1.11-.123 1.47-.345.63-.375.797-.962.944-1.48l.067-.267s.61-2.48.716-2.803c.003-.017.006-.026.01-.035-.835.01-1.08 0-1.16-.018zM14.21 12.144c-.407-.006-.55-.006-1.03.018l-.018-.036c.042-.182.087-.363.127-.548l.06-.25c.086-.39.173-.843.184-.98.007-.084.036-.29-.2-.29-.1 0-.203.048-.307.096-.058.207-.174.79-.23 1.055-.118.558-.126.62-.178.897l-.036.037c-.42-.006-.566-.006-1.05.018l-.024-.04c.08-.332.162-.668.24-.998.203-.9.25-1.245.307-1.702l.04-.028c.47-.067.585-.08 1.097-.185l.043.047-.077.287c.086-.052.168-.104.257-.15.242-.12.51-.155.658-.155.223 0 .468.062.57.323.098.232.034.52-.094 1.084l-.066.287c-.13.627-.152.743-.225 1.174l-.05.036zM15.87 12.144c-.245 0-.405-.006-.56 0-.153 0-.303.008-.532.018l-.013-.02-.015-.02c.062-.238.097-.322.128-.406.03-.084.06-.17.115-.41.072-.315.116-.535.147-.728.033-.187.052-.346.075-.53l.02-.014.02-.018c.244-.036.4-.057.56-.082.16-.024.32-.055.574-.103l.008.023.008.022c-.047.195-.094.39-.14.588-.047.197-.094.392-.137.587-.093.414-.13.57-.152.68-.02.105-.026.163-.063.377l-.022.02-.023.017zM19.542 10.728c.143-.633.033-.928-.108-1.11-.213-.273-.59-.36-.978-.36-.235 0-.793.023-1.23.43-.312.29-.458.687-.546 1.066-.088.387-.19 1.086.447 1.344.198.085.48.108.662.108.466 0 .945-.13 1.304-.513.278-.312.405-.775.448-.965zm-1.07-.046c-.02.106-.113.503-.24.673-.086.123-.19.198-.305.198-.033 0-.235 0-.238-.3-.003-.15.027-.304.063-.47.108-.478.236-.88.56-.88.255 0 .27.298.16.78zM29.536 12.187c-.493-.004-.635-.004-1.09.015l-.03-.037c.124-.472.248-.943.358-1.42.142-.62.175-.882.223-1.244l.037-.03c.49-.07.625-.09 1.135-.186l.015.044c-.093.388-.186.777-.275 1.166-.19.816-.258 1.23-.33 1.658l-.044.035z\\\" style=\\\"fill: #FEFEFE\\\" />\\n      <path d=\\\"M29.77 10.784c.144-.63-.432-.056-.525-.264-.14-.323-.052-.98-.62-1.2-.22-.085-.732.025-1.17.428-.31.29-.458.683-.544 1.062-.088.38-.19 1.078.444 1.328.2.085.384.11.567.103.638-.034 1.124-1.002 1.483-1.386.277-.303.326.115.368-.07zm-.974-.047c-.024.1-.117.503-.244.67-.083.117-.283.192-.397.192-.032 0-.232 0-.24-.3 0-.146.03-.3.067-.467.11-.47.235-.87.56-.87.254 0 .363.293.254.774zM22.332 12.144c-.41-.006-.55-.006-1.03.018l-.018-.036c.04-.182.087-.363.13-.548l.057-.25c.09-.39.176-.843.186-.98.008-.084.036-.29-.198-.29-.1 0-.203.048-.308.096-.057.207-.175.79-.232 1.055-.115.558-.124.62-.176.897l-.035.037c-.42-.006-.566-.006-1.05.018l-.022-.04.238-.998c.203-.9.25-1.245.307-1.702l.038-.028c.472-.067.587-.08 1.098-.185l.04.047-.073.287c.084-.052.17-.104.257-.15.24-.12.51-.155.655-.155.224 0 .47.062.575.323.095.232.03.52-.098 1.084l-.065.287c-.133.627-.154.743-.225 1.174l-.05.036zM26.32 8.756c-.07.326-.282.603-.554.736-.225.114-.498.123-.78.123h-.183l.013-.074.336-1.468.01-.076.007-.058.132.015.71.062c.275.105.388.38.31.74zM25.88 7.22l-.34.003c-.883.01-1.238.006-1.383-.012l-.037.182-.315 1.478-.793 3.288c.77-.01 1.088-.01 1.22.004l.21-1.024s.153-.644.163-.667c0 0 .047-.066.096-.092h.07c.665 0 1.417 0 2.005-.437.4-.298.675-.74.797-1.274.03-.132.054-.29.054-.446 0-.205-.04-.41-.16-.568-.3-.423-.896-.43-1.588-.433zM33.572 9.28l-.04-.043c-.502.1-.594.118-1.058.18l-.034.034-.005.023-.003-.007c-.345.803-.334.63-.615 1.26-.003-.03-.003-.048-.004-.077l-.07-1.37-.044-.043c-.53.1-.542.118-1.03.18l-.04.034-.006.056.003.007c.06.315.047.244.108.738.03.244.065.49.093.73.05.4.077.6.134 1.21-.328.55-.408.757-.722 1.238l.017.044c.478-.018.587-.018.94-.018l.08-.088c.265-.578 2.295-4.085 2.295-4.085zM16.318 9.62c.27-.19.304-.45.076-.586-.23-.137-.634-.094-.906.095-.273.186-.304.45-.075.586.228.134.633.094.905-.096z\\\" style=\\\"fill: #FEFEFE\\\" />\\n      <path d=\\\"M31.238 13.415l-.397.684c-.124.232-.357.407-.728.41l-.632-.01.184-.618h.124c.064 0 .11-.004.148-.022.03-.01.054-.035.08-.072l.233-.373h.988z\\\" style=\\\"fill: #FEFEFE\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"icon-american-express\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>American Express</title>\\n      <path d=\\\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\\\" style=\\\"fill: #FFF\\\" />\\n      <path style=\\\"fill: #1478BE\\\" d=\\\"M6.26 12.32h2.313L7.415 9.66M27.353 9.977h-3.738v1.23h3.666v1.384h-3.675v1.385h3.821v1.005c.623-.77 1.33-1.466 2.025-2.235l.707-.77c-.934-1.004-1.87-2.08-2.804-3.075v1.077z\\\" />\\n      <path d=\\\"M38.25 7h-5.605l-1.328 1.4L30.072 7H16.984l-1.017 2.416L14.877 7h-9.58L1.25 16.5h4.826l.623-1.556h1.4l.623 1.556H29.99l1.327-1.483 1.328 1.483h5.605l-4.36-4.667L38.25 7zm-17.685 8.1h-1.557V9.883L16.673 15.1h-1.33L13.01 9.883l-.084 5.217H9.73l-.623-1.556h-3.27L5.132 15.1H3.42l2.884-6.772h2.42l2.645 6.233V8.33h2.646l2.107 4.51 1.868-4.51h2.575V15.1zm14.727 0h-2.024l-2.024-2.26-2.023 2.26H22.06V8.328H29.53l1.795 2.177 2.024-2.177h2.025L32.26 11.75l3.032 3.35z\\\" style=\\\"fill: #1478BE\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"icon-jcb\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>JCB</title>\\n      <path d=\\\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M33.273 2.01h.013v17.062c-.004 1.078-.513 2.103-1.372 2.746-.63.47-1.366.67-2.14.67-.437 0-4.833.026-4.855 0-.01-.01 0-.07 0-.082v-6.82c0-.04.004-.064.033-.064h5.253c.867 0 1.344-.257 1.692-.61.44-.448.574-1.162.294-1.732-.24-.488-.736-.78-1.244-.913-.158-.04-.32-.068-.483-.083-.01 0-.064 0-.07-.006-.03-.034.023-.04.038-.046.102-.033.215-.042.32-.073.532-.164.993-.547 1.137-1.105.15-.577-.05-1.194-.524-1.552-.34-.257-.768-.376-1.187-.413-.43-.038-4.774-.022-5.21-.022-.072 0-.05-.02-.05-.09V5.63c0-.31.01-.616.073-.92.126-.592.41-1.144.815-1.59.558-.615 1.337-1.01 2.16-1.093.478-.048 4.89-.017 5.305-.017zm-4.06 8.616c.06.272-.01.567-.204.77-.173.176-.407.25-.648.253-.195.003-1.725 0-1.788 0l.003-1.645c.012-.027.02-.018.06-.018.097 0 1.713-.004 1.823.005.232.02.45.12.598.306.076.096.128.208.155.328zm-2.636 2.038h1.944c.242.002.47.063.652.228.226.204.327.515.283.815-.04.263-.194.5-.422.634-.187.112-.39.125-.6.125h-1.857v-1.8z\\\" style=\\\"fill: #53B230\\\" />\\n      <path d=\\\"M6.574 13.89c-.06-.03-.06-.018-.07-.06-.006-.026-.005-8.365.003-8.558.04-.95.487-1.857 1.21-2.47.517-.434 1.16-.71 1.83-.778.396-.04.803-.018 1.2-.018.69 0 4.11-.013 4.12 0 .008.008.002 16.758 0 17.074-.003.956-.403 1.878-1.105 2.523-.506.465-1.15.77-1.83.86-.41.056-5.02.032-5.363.032-.066 0-.054.013-.066-.024-.01-.025 0-7 0-7.17.66.178 1.35.28 2.03.348.662.067 1.33.093 1.993.062.93-.044 1.947-.192 2.712-.762.32-.238.574-.553.73-.922.148-.353.2-.736.2-1.117 0-.348.006-3.93-.016-3.942-.023-.014-2.885-.015-2.9.012-.012.022 0 3.87 0 3.95-.003.47-.16.933-.514 1.252-.468.42-1.11.47-1.707.423-.687-.055-1.357-.245-1.993-.508-.157-.065-.312-.135-.466-.208z\\\" style=\\\"fill: #006CB9\\\" />\\n      <path d=\\\"M15.95 9.835c-.025.02-.05.04-.072.06V6.05c0-.295-.012-.594.01-.888.12-1.593 1.373-2.923 2.944-3.126.382-.05 5.397-.042 5.41-.026.01.01 0 .062 0 .074v16.957c0 1.304-.725 2.52-1.89 3.1-.504.25-1.045.35-1.605.35-.322 0-4.757.015-4.834 0-.05-.01-.023.01-.035-.02-.007-.022 0-6.548 0-7.44v-.422c.554.48 1.256.75 1.96.908.536.12 1.084.176 1.63.196.537.02 1.076.01 1.61-.037.546-.05 1.088-.136 1.625-.244.137-.028.274-.057.41-.09.033-.006.17-.017.187-.044.013-.02 0-.097 0-.12v-1.324c-.582.292-1.19.525-1.83.652-.778.155-1.64.198-2.385-.123-.752-.326-1.2-1.024-1.274-1.837-.076-.837.173-1.716.883-2.212.736-.513 1.7-.517 2.553-.38.634.1 1.245.305 1.825.58.078.037.154.075.23.113V9.322c0-.02.013-.1 0-.118-.02-.028-.152-.038-.188-.046-.066-.016-.133-.03-.2-.045C22.38 9 21.84 8.908 21.3 8.85c-.533-.06-1.068-.077-1.603-.066-.542.01-1.086.054-1.62.154-.662.125-1.32.337-1.883.716-.085.056-.167.117-.245.18z\\\" style=\\\"fill: #E20138\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"icon-discover\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>Discover</title>\\n      <path d=\\\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M38.995 11.75S27.522 20.1 6.5 23.5h31.495c.552 0 1-.448 1-1V11.75z\\\" style=\\\"fill: #F48024\\\" />\\n      <path d=\\\"M5.332 11.758c-.338.305-.776.438-1.47.438h-.29V8.55h.29c.694 0 1.115.124 1.47.446.37.33.595.844.595 1.372 0 .53-.224 1.06-.595 1.39zM4.077 7.615H2.5v5.515h1.57c.833 0 1.435-.197 1.963-.637.63-.52 1-1.305 1-2.116 0-1.628-1.214-2.762-2.956-2.762zM7.53 13.13h1.074V7.616H7.53M11.227 9.732c-.645-.24-.834-.397-.834-.695 0-.347.338-.61.8-.61.322 0 .587.132.867.446l.562-.737c-.462-.405-1.015-.612-1.618-.612-.975 0-1.718.678-1.718 1.58 0 .76.346 1.15 1.355 1.513.42.148.635.247.743.314.215.14.322.34.322.57 0 .448-.354.78-.834.78-.51 0-.924-.258-1.17-.736l-.695.67c.495.726 1.09 1.05 1.907 1.05 1.116 0 1.9-.745 1.9-1.812 0-.876-.363-1.273-1.585-1.72zM13.15 10.377c0 1.62 1.27 2.877 2.907 2.877.462 0 .858-.09 1.347-.32v-1.267c-.43.43-.81.604-1.297.604-1.082 0-1.85-.785-1.85-1.9 0-1.06.792-1.895 1.8-1.895.512 0 .9.183 1.347.62V7.83c-.472-.24-.86-.34-1.322-.34-1.627 0-2.932 1.283-2.932 2.887zM25.922 11.32l-1.468-3.705H23.28l2.337 5.656h.578l2.38-5.655H27.41M29.06 13.13h3.046v-.934h-1.973v-1.488h1.9v-.934h-1.9V8.55h1.973v-.935H29.06M34.207 10.154h-.314v-1.67h.33c.67 0 1.034.28 1.034.818 0 .554-.364.852-1.05.852zm2.155-.91c0-1.033-.71-1.628-1.95-1.628H32.82v5.514h1.073v-2.215h.14l1.487 2.215h1.32l-1.733-2.323c.81-.165 1.255-.72 1.255-1.563z\\\" style=\\\"fill: #221F20\\\" />\\n      <path d=\\\"M23.6 10.377c0 1.62-1.31 2.93-2.927 2.93-1.617.002-2.928-1.31-2.928-2.93s1.31-2.932 2.928-2.932c1.618 0 2.928 1.312 2.928 2.932z\\\" style=\\\"fill: #F48024\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"icon-diners-club\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>Diners Club</title>\\n      <path d=\\\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M9.02 11.83c0-5.456 4.54-9.88 10.14-9.88 5.6 0 10.139 4.424 10.139 9.88-.002 5.456-4.54 9.88-10.14 9.88-5.6 0-10.14-4.424-10.14-9.88z\\\" style=\\\"fill: #FEFEFE\\\" />\\n      <path style=\\\"fill: #FFF\\\" d=\\\"M32.522 22H8.5V1.5h24.022\\\" />\\n      <path d=\\\"M25.02 11.732c-.003-2.534-1.607-4.695-3.868-5.55v11.102c2.26-.857 3.865-3.017 3.87-5.552zm-8.182 5.55V6.18c-2.26.86-3.86 3.017-3.867 5.55.007 2.533 1.61 4.69 3.868 5.55zm2.158-14.934c-5.25.002-9.503 4.202-9.504 9.384 0 5.182 4.254 9.38 9.504 9.382 5.25 0 9.504-4.2 9.505-9.382 0-5.182-4.254-9.382-9.504-9.384zM18.973 22C13.228 22.027 8.5 17.432 8.5 11.84 8.5 5.726 13.228 1.5 18.973 1.5h2.692c5.677 0 10.857 4.225 10.857 10.34 0 5.59-5.18 10.16-10.857 10.16h-2.692z\\\" style=\\\"fill: #004A97\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"icon-maestro\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>Maestro</title>\\n      <path d=\\\"M38.333 24H1.667C.75 24 0 23.28 0 22.4V1.6C0 .72.75 0 1.667 0h36.666C39.25 0 40 .72 40 1.6v20.8c0 .88-.75 1.6-1.667 1.6z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M14.67 22.39V21c.022-.465-.303-.86-.767-.882h-.116c-.3-.023-.603.14-.788.394-.164-.255-.442-.417-.743-.394-.256-.023-.51.116-.65.324v-.278h-.487v2.203h.487v-1.183c-.046-.278.162-.533.44-.58h.094c.325 0 .488.21.488.58v1.23h.487v-1.23c-.047-.278.162-.556.44-.58h.093c.325 0 .487.21.487.58v1.23l.534-.024zm2.712-1.09v-1.113h-.487v.28c-.162-.21-.417-.326-.695-.326-.65 0-1.16.51-1.16 1.16 0 .65.51 1.16 1.16 1.16.278 0 .533-.117.695-.325v.278h.487V21.3zm-1.786 0c.024-.37.348-.65.72-.626.37.023.65.348.626.72-.023.347-.302.625-.673.625-.372 0-.674-.28-.674-.65-.023-.047-.023-.047 0-.07zm12.085-1.16c.163 0 .325.024.465.094.14.046.278.14.37.255.117.115.186.23.256.37.117.3.117.626 0 .927-.046.14-.138.255-.254.37-.116.117-.232.186-.37.256-.303.116-.65.116-.952 0-.14-.046-.28-.14-.37-.255-.118-.116-.187-.232-.257-.37-.116-.302-.116-.627 0-.928.047-.14.14-.255.256-.37.115-.117.23-.187.37-.256.163-.07.325-.116.488-.093zm0 .465c-.092 0-.185.023-.278.046-.092.024-.162.094-.232.14-.07.07-.116.14-.14.232-.068.185-.068.394 0 .58.024.092.094.162.14.23.07.07.14.117.232.14.186.07.37.07.557 0 .092-.023.16-.092.23-.14.07-.068.117-.138.14-.23.07-.186.07-.395 0-.58-.023-.093-.093-.162-.14-.232-.07-.07-.138-.116-.23-.14-.094-.045-.187-.07-.28-.045zm-7.677.695c0-.695-.44-1.16-1.043-1.16-.65 0-1.16.534-1.137 1.183.023.65.534 1.16 1.183 1.136.325 0 .65-.093.905-.302l-.23-.348c-.187.14-.42.232-.65.232-.326.023-.627-.21-.673-.533h1.646v-.21zm-1.646-.21c.023-.3.278-.532.58-.532.3 0 .556.232.556.533h-1.136zm3.664-.346c-.207-.116-.44-.186-.695-.186-.255 0-.417.093-.417.255 0 .163.162.186.37.21l.233.022c.488.07.766.278.766.672 0 .395-.37.72-1.02.72-.348 0-.673-.094-.95-.28l.23-.37c.21.162.465.232.743.232.324 0 .51-.094.51-.28 0-.115-.117-.185-.395-.23l-.232-.024c-.487-.07-.765-.302-.765-.65 0-.44.37-.718.927-.718.325 0 .627.07.905.232l-.21.394zm2.32-.116h-.788v.997c0 .23.07.37.325.37.14 0 .3-.046.417-.115l.14.417c-.186.116-.395.162-.604.162-.58 0-.765-.302-.765-.812v-1.02h-.44v-.44h.44v-.673h.487v.672h.79v.44zm1.67-.51c.117 0 .233.023.35.07l-.14.463c-.093-.045-.21-.045-.302-.045-.325 0-.464.208-.464.58v1.25h-.487v-2.2h.487v.277c.116-.255.325-.37.557-.394z\\\" style=\\\"fill: #000\\\" />\\n      <path style=\\\"fill: #7673C0\\\" d=\\\"M23.64 3.287h-7.305V16.41h7.306\\\" />\\n      <path d=\\\"M16.8 9.848c0-2.55 1.183-4.985 3.2-6.56C16.384.435 11.12 1.06 8.29 4.7 5.435 8.32 6.06 13.58 9.703 16.41c3.038 2.387 7.283 2.387 10.32 0-2.04-1.578-3.223-3.99-3.223-6.562z\\\" style=\\\"fill: #EB001B\\\" />\\n      <path d=\\\"M33.5 9.848c0 4.613-3.735 8.346-8.35 8.346-1.88 0-3.69-.626-5.15-1.785 3.618-2.83 4.245-8.092 1.415-11.71-.418-.532-.882-.996-1.415-1.413C23.618.437 28.883 1.06 31.736 4.7 32.873 6.163 33.5 7.994 33.5 9.85z\\\" style=\\\"fill: #00A1DF\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"logoPayPal\\\" viewBox=\\\"0 0 48 29\\\">\\n      <title>PayPal Logo</title>\\n      <path d=\\\"M46 29H2c-1.1 0-2-.87-2-1.932V1.934C0 .87.9 0 2 0h44c1.1 0 2 .87 2 1.934v25.134C48 28.13 47.1 29 46 29z\\\" fill-opacity=\\\"0\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M31.216 16.4c.394-.7.69-1.5.886-2.4.196-.8.196-1.6.1-2.2-.1-.7-.396-1.2-.79-1.7-.195-.3-.59-.5-.885-.7.1-.8.1-1.5 0-2.1-.1-.6-.394-1.1-.886-1.6-.885-1-2.56-1.6-4.922-1.6h-6.4c-.492 0-.787.3-.886.8l-2.658 17.2c0 .2 0 .3.1.4.097.1.294.2.393.2h4.036l-.295 1.8c0 .1 0 .3.1.4.098.1.195.2.393.2h3.35c.393 0 .688-.3.786-.7v-.2l.59-4.1v-.2c.1-.4.395-.7.788-.7h.59c1.675 0 3.152-.4 4.137-1.1.59-.5 1.083-1 1.478-1.7h-.002z\\\" style=\\\"fill: #263B80\\\" />\\n      <path d=\\\"M21.364 9.4c0-.3.196-.5.492-.6.098-.1.196-.1.394-.1h5.02c.592 0 1.183 0 1.675.1.1 0 .295.1.394.1.098 0 .294.1.393.1.1 0 .1 0 .197.102.295.1.492.2.69.3.295-1.6 0-2.7-.887-3.8-.985-1.1-2.658-1.6-4.923-1.6h-6.4c-.49 0-.885.3-.885.8l-2.758 17.3c-.098.3.197.6.59.6h3.94l.985-6.4 1.083-6.9z\\\" style=\\\"fill: #263B80\\\" />\\n      <path d=\\\"M30.523 9.4c0 .1 0 .3-.098.4-.887 4.4-3.742 5.9-7.484 5.9h-1.87c-.492 0-.787.3-.886.8l-.985 6.2-.296 1.8c0 .3.196.6.492.6h3.348c.394 0 .69-.3.787-.7v-.2l.592-4.1v-.2c.1-.4.394-.7.787-.7h.69c3.248 0 5.808-1.3 6.497-5.2.296-1.6.197-3-.69-3.9-.196-.3-.49-.5-.885-.7z\\\" style=\\\"fill: #159BD7\\\" />\\n      <path d=\\\"M29.635 9c-.098 0-.295-.1-.394-.1-.098 0-.294-.1-.393-.1-.492-.102-1.083-.102-1.673-.102h-5.022c-.1 0-.197 0-.394.1-.198.1-.394.3-.492.6l-1.083 6.9v.2c.1-.5.492-.8.886-.8h1.87c3.742 0 6.598-1.5 7.484-5.9 0-.1 0-.3.098-.4-.196-.1-.492-.2-.69-.3 0-.1-.098-.1-.196-.1z\\\" style=\\\"fill: #232C65\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"logoPayPalCredit\\\" viewBox=\\\"0 0 48 29\\\">\\n      <title>PayPal Credit Logo</title>\\n      <path d=\\\"M46 29H2c-1.1 0-2-.87-2-1.932V1.934C0 .87.9 0 2 0h44c1.1 0 2 .87 2 1.934v25.134C48 28.13 47.1 29 46 29z\\\" fill-opacity=\\\"0\\\" style=\\\"fill: #FFF\\\" fill-rule=\\\"nonzero\\\" />\\n      <path d=\\\"M27.44 21.6h.518c1.377 0 2.67-.754 2.953-2.484.248-1.588-.658-2.482-2.14-2.482h-.38c-.093 0-.172.067-.187.16l-.763 4.805zm-1.254-6.646c.024-.158.16-.273.32-.273h2.993c2.47 0 4.2 1.942 3.81 4.436-.4 2.495-2.752 4.436-5.21 4.436h-3.05c-.116 0-.205-.104-.187-.218l1.323-8.38zM22.308 16.907l-.192 1.21h2.38c.116 0 .204.103.186.217l-.23 1.462c-.023.157-.16.273-.318.273h-2.048c-.16 0-.294.114-.32.27l-.203 1.26h2.52c.117 0 .205.102.187.217l-.228 1.46c-.025.16-.16.275-.32.275h-4.55c-.116 0-.204-.104-.186-.218l1.322-8.38c.025-.158.16-.273.32-.273h4.55c.116 0 .205.104.187.22l-.23 1.46c-.024.158-.16.274-.32.274H22.63c-.16 0-.295.115-.32.273M35.325 23.552h-1.81c-.115 0-.203-.104-.185-.218l1.322-8.38c.025-.158.16-.273.32-.273h1.81c.115 0 .203.104.185.22l-1.322 8.38c-.025.156-.16.272-.32.272M14.397 18.657h.224c.754 0 1.62-.14 1.777-1.106.158-.963-.345-1.102-1.15-1.104h-.326c-.097 0-.18.07-.197.168l-.326 2.043zm3.96 4.895h-2.37c-.102 0-.194-.058-.238-.15l-1.565-3.262h-.023l-.506 3.19c-.02.128-.13.222-.26.222h-1.86c-.116 0-.205-.104-.187-.218l1.33-8.432c.02-.128.13-.22.26-.22h3.222c1.753 0 2.953.834 2.66 2.728-.2 1.224-1.048 2.283-2.342 2.506l2.037 3.35c.076.125-.014.286-.16.286zM40.216 23.552h-1.808c-.116 0-.205-.104-.187-.218l1.06-6.7h-1.684c-.116 0-.205-.104-.187-.218l.228-1.462c.025-.157.16-.273.32-.273h5.62c.116 0 .205.104.186.22l-.228 1.46c-.025.158-.16.274-.32.274h-1.63l-1.05 6.645c-.025.156-.16.272-.32.272M11.467 17.202c-.027.164-.228.223-.345.104-.395-.405-.975-.62-1.6-.62-1.41 0-2.526 1.083-2.75 2.458-.21 1.4.588 2.41 2.022 2.41.592 0 1.22-.225 1.74-.6.144-.105.34.02.313.194l-.328 2.03c-.02.12-.108.22-.226.254-.702.207-1.24.355-1.9.355-3.823 0-4.435-3.266-4.238-4.655.553-3.894 3.712-4.786 5.65-4.678.623.034 1.182.117 1.73.323.177.067.282.25.252.436l-.32 1.99\\\" style=\\\"fill: #21306F\\\" />\\n      <path d=\\\"M23.184 7.67c-.11.717-.657.717-1.186.717h-.302l.212-1.34c.013-.08.082-.14.164-.14h.138c.36 0 .702 0 .877.206.105.123.137.305.097.557zm-.23-1.87h-1.998c-.137 0-.253.098-.274.233l-.808 5.123c-.016.1.062.192.165.192h1.024c.095 0 .177-.07.192-.164l.23-1.452c.02-.135.136-.235.273-.235h.63c1.317 0 2.076-.636 2.275-1.898.09-.553.003-.987-.255-1.29-.284-.334-.788-.51-1.456-.51z\\\" style=\\\"fill: #0093C7\\\" />\\n      <path d=\\\"M8.936 7.67c-.11.717-.656.717-1.186.717h-.302l.212-1.34c.013-.08.082-.14.164-.14h.138c.36 0 .702 0 .877.206.104.123.136.305.096.557zm-.23-1.87H6.708c-.136 0-.253.098-.274.233l-.808 5.123c-.016.1.062.192.165.192h.955c.136 0 .252-.1.274-.234l.217-1.382c.02-.135.137-.235.274-.235h.633c1.316 0 2.075-.636 2.274-1.898.09-.553.003-.987-.255-1.29-.284-.334-.788-.51-1.456-.51zM13.343 9.51c-.092.545-.526.912-1.08.912-.277 0-.5-.09-.642-.258-.14-.168-.193-.406-.148-.672.086-.542.527-.92 1.072-.92.27 0 .492.09.637.26.148.172.205.412.163.677zm1.334-1.863h-.957c-.082 0-.152.06-.164.14l-.042.268-.067-.097c-.208-.3-.67-.4-1.13-.4-1.057 0-1.96.8-2.135 1.923-.092.56.038 1.097.356 1.47.29.344.708.487 1.204.487.852 0 1.325-.548 1.325-.548l-.043.265c-.016.1.062.193.164.193h.862c.136 0 .253-.1.274-.234l.517-3.275c.017-.102-.06-.193-.163-.193z\\\" style=\\\"fill: #21306F\\\" />\\n      <path d=\\\"M27.59 9.51c-.09.545-.525.912-1.078.912-.278 0-.5-.09-.643-.258-.142-.168-.195-.406-.15-.672.086-.542.526-.92 1.07-.92.273 0 .494.09.64.26.146.172.203.412.16.677zm1.334-1.863h-.956c-.082 0-.152.06-.164.14l-.043.268-.065-.097c-.208-.3-.67-.4-1.13-.4-1.057 0-1.96.8-2.136 1.923-.092.56.038 1.097.355 1.47.292.344.71.487 1.205.487.852 0 1.325-.548 1.325-.548l-.043.265c-.016.1.062.193.164.193h.862c.136 0 .253-.1.274-.234l.517-3.275c.015-.102-.063-.193-.166-.193z\\\" style=\\\"fill: #0093C7\\\" />\\n      <path d=\\\"M19.77 7.647h-.96c-.092 0-.178.045-.23.122L17.254 9.72l-.562-1.877c-.035-.118-.143-.198-.266-.198h-.945c-.113 0-.194.112-.157.22l1.06 3.108-.997 1.404c-.078.11 0 .262.136.262h.96c.092 0 .177-.044.23-.12l3.196-4.614c.077-.11-.002-.26-.137-.26\\\" style=\\\"fill: #21306F\\\" />\\n      <path d=\\\"M30.052 5.94l-.82 5.216c-.016.1.062.192.165.192h.824c.138 0 .254-.1.275-.234l.81-5.122c.015-.1-.064-.193-.166-.193h-.924c-.082 0-.15.06-.164.14\\\" style=\\\"fill: #0093C7\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"iconCardFront\\\" viewBox=\\\"0 0 48 29\\\">\\n      <title>Generic Card</title>\\n      <path d=\\\"M46.177 29H1.823C.9 29 0 28.13 0 27.187V1.813C0 .87.9 0 1.823 0h44.354C47.1 0 48 .87 48 1.813v25.375C48 28.13 47.1 29 46.177 29z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M4.8 9.14c0-.427.57-.973 1.067-.973h7.466c.496 0 1.067.546 1.067.972v3.888c0 .425-.57.972-1.067.972H5.867c-.496 0-1.067-.547-1.067-.972v-3.89z\\\" style=\\\"fill: #828282\\\" />\\n      <rect style=\\\"fill: #828282\\\" x=\\\"10.8\\\" y=\\\"22.167\\\" width=\\\"3.6\\\" height=\\\"2.333\\\" rx=\\\"1.167\\\" />\\n      <rect style=\\\"fill: #828282\\\" x=\\\"4.8\\\" y=\\\"22.167\\\" width=\\\"3.6\\\" height=\\\"2.333\\\" rx=\\\"1.167\\\" />\\n      <path d=\\\"M6.55 16.333h34.9c.966 0 1.75.784 1.75 1.75 0 .967-.784 1.75-1.75 1.75H6.55c-.966 0-1.75-.783-1.75-1.75 0-.966.784-1.75 1.75-1.75z\\\" style=\\\"fill: #828282\\\" />\\n      <ellipse style=\\\"fill: #828282\\\" cx=\\\"40.2\\\" cy=\\\"6.417\\\" rx=\\\"3\\\" ry=\\\"2.917\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"iconCVVBack\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>CVV Back</title>\\n      <path d=\\\"M38.48 24H1.52C.75 24 0 23.28 0 22.5v-21C0 .72.75 0 1.52 0h36.96C39.25 0 40 .72 40 1.5v21c0 .78-.75 1.5-1.52 1.5z\\\" style=\\\"fill: #FFF\\\"/>\\n      <path style=\\\"fill: #828282\\\" d=\\\"M0 5h40v4H0z\\\" />\\n      <path d=\\\"M20 13.772v5.456c0 .423.37.772.82.772h13.36c.45 0 .82-.35.82-.772v-5.456c0-.423-.37-.772-.82-.772H20.82c-.45 0-.82.35-.82.772zm-1-.142c0-.9.76-1.63 1.68-1.63h13.64c.928 0 1.68.737 1.68 1.63v5.74c0 .9-.76 1.63-1.68 1.63H20.68c-.928 0-1.68-.737-1.68-1.63v-5.74z\\\" style=\\\"fill: #000\\\" fill-rule=\\\"nonzero\\\" />\\n      <circle style=\\\"fill: #828282\\\" cx=\\\"23.5\\\" cy=\\\"16.5\\\" r=\\\"1.5\\\" />\\n      <circle style=\\\"fill: #828282\\\" cx=\\\"27.5\\\" cy=\\\"16.5\\\" r=\\\"1.5\\\" />\\n      <circle style=\\\"fill: #828282\\\" cx=\\\"31.5\\\" cy=\\\"16.5\\\" r=\\\"1.5\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"iconCVVFront\\\" viewBox=\\\"0 0 40 24\\\">\\n      <title>CVV Front</title>\\n      <path d=\\\"M38.48 24H1.52C.75 24 0 23.28 0 22.5v-21C0 .72.75 0 1.52 0h36.96C39.25 0 40 .72 40 1.5v21c0 .78-.75 1.5-1.52 1.5z\\\" style=\\\"fill: #FFF\\\" />\\n      <path d=\\\"M16 5.772v5.456c0 .423.366.772.81.772h17.38c.444 0 .81-.348.81-.772V5.772C35 5.35 34.634 5 34.19 5H16.81c-.444 0-.81.348-.81.772zm-1-.142c0-.9.75-1.63 1.66-1.63h17.68c.917 0 1.66.737 1.66 1.63v5.74c0 .9-.75 1.63-1.66 1.63H16.66c-.917 0-1.66-.737-1.66-1.63V5.63z\\\" style=\\\"fill: #000\\\" fill-rule=\\\"nonzero\\\" />\\n      <circle style=\\\"fill: #828282\\\" cx=\\\"19.5\\\" cy=\\\"8.5\\\" r=\\\"1.5\\\" />\\n      <circle style=\\\"fill: #828282\\\" cx=\\\"27.5\\\" cy=\\\"8.5\\\" r=\\\"1.5\\\" />\\n      <circle style=\\\"fill: #828282\\\" cx=\\\"23.5\\\" cy=\\\"8.5\\\" r=\\\"1.5\\\" />\\n      <circle style=\\\"fill: #828282\\\" cx=\\\"31.5\\\" cy=\\\"8.5\\\" r=\\\"1.5\\\" />\\n      <path d=\\\"M4 7.833C4 7.47 4.476 7 4.89 7h6.22c.414 0 .89.47.89.833v3.334c0 .364-.476.833-.89.833H4.89c-.414 0-.89-.47-.89-.833V7.833zM4 18.5c0-.828.668-1.5 1.5-1.5h29c.828 0 1.5.666 1.5 1.5 0 .828-.668 1.5-1.5 1.5h-29c-.828 0-1.5-.666-1.5-1.5z\\\" style=\\\"fill: #828282\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"iconCheck\\\" viewBox=\\\"0 0 42 32\\\">\\n      <title>Check</title>\\n      <path class=\\\"path1\\\" d=\\\"M14.379 29.76L39.741 3.415 36.194.001l-21.815 22.79-10.86-11.17L0 15.064z\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"iconX\\\" viewBox=\\\"0 0 32 32\\\">\\n      <title>X</title>\\n      <path d=\\\"M29 3.54L25.46 0 14.5 10.97 3.54 0.01 0 3.54 10.96 14.5 0.01 25.46 3.54 28.99 14.5 18.04 25.46 29 28.99 25.46 18.03 14.5 29 3.54z\\\"/>\\n    </symbol>\\n\\n    <symbol id=\\\"iconLockLoader\\\" viewBox=\\\"0 0 28 32\\\">\\n      <title>Lock Loader</title>\\n      <path d=\\\"M6 10V8c0-4.422 3.582-8 8-8 4.41 0 8 3.582 8 8v2h-4V7.995C18 5.79 16.205 4 14 4c-2.21 0-4 1.792-4 3.995V10H6zM.997 14c-.55 0-.997.445-.997.993v16.014c0 .548.44.993.997.993h26.006c.55 0 .997-.445.997-.993V14.993c0-.548-.44-.993-.997-.993H.997z\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"iconError\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\">\\n      <path d=\\\"M0 0h24v24H0z\\\" style=\\\"fill: none\\\" />\\n      <path d=\\\"M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z\\\" />\\n    </symbol>\\n\\n    <symbol id=\\\"logoApplePay\\\" viewBox=\\\"0 0 165.52 105.97\\\" width=\\\"24\\\">\\n      <title>Apple Pay Logo</title>\\n      <defs>\\n      <style>\\n        .cls-1{fill:#231f20;}.cls-2{fill:#fff;}\\n      </style>\\n      </defs>\\n      <path id=\\\"_Path_\\\" data-name=\\\"&lt;Path&gt;\\\" class=\\\"cls-1\\\" d=\\\"M150.7 0h-139a20.78 20.78 0 0 0-3.12.3 10.51 10.51 0 0 0-3 1 9.94 9.94 0 0 0-4.31 4.32 10.46 10.46 0 0 0-1 3A20.65 20.65 0 0 0 0 11.7v82.57a20.64 20.64 0 0 0 .3 3.11 10.46 10.46 0 0 0 1 3 9.94 9.94 0 0 0 4.35 4.35 10.47 10.47 0 0 0 3 1 20.94 20.94 0 0 0 3.11.27h142.06a21 21 0 0 0 3.11-.27 10.48 10.48 0 0 0 3-1 9.94 9.94 0 0 0 4.35-4.35 10.4 10.4 0 0 0 1-3 20.63 20.63 0 0 0 .27-3.11V11.69a20.64 20.64 0 0 0-.27-3.11 10.4 10.4 0 0 0-1-3 9.94 9.94 0 0 0-4.35-4.35 10.52 10.52 0 0 0-3-1 20.84 20.84 0 0 0-3.1-.23h-1.43z\\\"/>\\n      <path id=\\\"_Path_2\\\" data-name=\\\"&lt;Path&gt;\\\" class=\\\"cls-2\\\" d=\\\"M150.7 3.53h3.03a17.66 17.66 0 0 1 2.58.22 7 7 0 0 1 2 .65 6.41 6.41 0 0 1 2.8 2.81 6.88 6.88 0 0 1 .64 2 17.56 17.56 0 0 1 .22 2.58v82.38a17.54 17.54 0 0 1-.22 2.59 6.85 6.85 0 0 1-.64 2 6.41 6.41 0 0 1-2.81 2.81 6.92 6.92 0 0 1-2 .65 18 18 0 0 1-2.57.22H11.79a18 18 0 0 1-2.58-.22 6.94 6.94 0 0 1-2-.65 6.41 6.41 0 0 1-2.8-2.8 6.93 6.93 0 0 1-.65-2 17.47 17.47 0 0 1-.22-2.58v-82.4a17.49 17.49 0 0 1 .22-2.59 6.92 6.92 0 0 1 .65-2 6.41 6.41 0 0 1 2.8-2.8 7 7 0 0 1 2-.65 17.63 17.63 0 0 1 2.58-.22H150.7\\\"/>\\n      <g id=\\\"_Group_\\\" data-name=\\\"&lt;Group&gt;\\\">\\n      <g id=\\\"_Group_2\\\" data-name=\\\"&lt;Group&gt;\\\">\\n      <path id=\\\"_Path_3\\\" data-name=\\\"&lt;Path&gt;\\\" class=\\\"cls-1\\\" d=\\\"M43.51 35.77a9.15 9.15 0 0 0 2.1-6.52 9.07 9.07 0 0 0-6 3.11 8.56 8.56 0 0 0-2.16 6.27 7.57 7.57 0 0 0 6.06-2.86\\\"/>\\n      <path id=\\\"_Path_4\\\" data-name=\\\"&lt;Path&gt;\\\" class=\\\"cls-1\\\" d=\\\"M45.59 39.08c-3.35-.2-6.2 1.9-7.79 1.9s-4-1.8-6.7-1.75a9.87 9.87 0 0 0-8.4 5.1c-3.6 6.2-.95 15.4 2.55 20.45 1.7 2.5 3.75 5.25 6.45 5.15s3.55-1.65 6.65-1.65 4 1.65 6.7 1.6 4.55-2.5 6.25-5a22.2 22.2 0 0 0 2.8-5.75 9.08 9.08 0 0 1-5.45-8.25A9.26 9.26 0 0 1 53 43.13a9.57 9.57 0 0 0-7.45-4\\\"/>\\n      </g>\\n      <g id=\\\"_Group_3\\\" data-name=\\\"&lt;Group&gt;\\\">\\n      <path id=\\\"_Compound_Path_\\\" data-name=\\\"&lt;Compound Path&gt;\\\" class=\\\"cls-1\\\" d=\\\"M79 32.11c7.28 0 12.35 5 12.35 12.32S86.15 56.8 78.79 56.8h-8.06v12.82h-5.82V32.11zm-8.27 19.81h6.68c5.07 0 8-2.73 8-7.46S82.48 37 77.44 37h-6.71z\\\"/>\\n      <path id=\\\"_Compound_Path_2\\\" data-name=\\\"&lt;Compound Path&gt;\\\" class=\\\"cls-1\\\" d=\\\"M92.76 61.85c0-4.81 3.67-7.56 10.42-8l7.25-.44v-2.06c0-3-2-4.7-5.56-4.7-2.94 0-5.07 1.51-5.51 3.82h-5.24c.16-4.86 4.73-8.4 10.92-8.4 6.65 0 11 3.48 11 8.89v18.66h-5.38v-4.5h-.13a9.59 9.59 0 0 1-8.58 4.78c-5.42 0-9.19-3.22-9.19-8.05zm17.68-2.42v-2.11l-6.47.42c-3.64.23-5.54 1.59-5.54 4s2 3.77 5.07 3.77c3.95-.05 6.94-2.57 6.94-6.08z\\\"/>\\n      <path id=\\\"_Compound_Path_3\\\" data-name=\\\"&lt;Compound Path&gt;\\\" class=\\\"cls-1\\\" d=\\\"M121 79.65v-4.5a17.14 17.14 0 0 0 1.72.1c2.57 0 4-1.09 4.91-3.9l.52-1.66-9.88-27.29h6.08l6.86 22.15h.13l6.86-22.15h5.93l-10.21 28.67c-2.34 6.58-5 8.73-10.68 8.73a15.93 15.93 0 0 1-2.24-.15z\\\"/>\\n      </g>\\n      </g>\\n    </symbol>\\n    <symbol id=\\\"logoGooglePay\\\" viewBox=\\\"0 0 60.51 24.04\\\">\\n      <title>GooglePay_AcceptanceMark_RGB_60x24pt</title>\\n      <path d=\\\"M28.67,11.76v7H26.43V1.42h5.92a5.39,5.39,0,0,1,3.84,1.51A5,5,0,0,1,36.44,10l-.25.26a5.35,5.35,0,0,1-3.84,1.48Zm0-8.2V9.62H32.4a2.93,2.93,0,0,0,2.21-.9A3,3,0,0,0,32.4,3.56Z\\\" fill=\\\"#5f6368\\\"/>\\n      <path d=\\\"M42.93,6.52a5.56,5.56,0,0,1,3.91,1.32,4.71,4.71,0,0,1,1.43,3.63v7.32H46.13V17.14H46a4.28,4.28,0,0,1-3.69,2A4.83,4.83,0,0,1,39.06,18a3.74,3.74,0,0,1-1.32-2.92,3.52,3.52,0,0,1,1.39-2.93,5.87,5.87,0,0,1,3.73-1.09,6.65,6.65,0,0,1,3.27.72v-.51a2.5,2.5,0,0,0-.92-2,3.17,3.17,0,0,0-2.16-.81,3.4,3.4,0,0,0-2.95,1.57l-2-1.23A5.45,5.45,0,0,1,42.93,6.52ZM40,15.15a1.82,1.82,0,0,0,.74,1.46,2.74,2.74,0,0,0,1.74.58,3.58,3.58,0,0,0,2.51-1,3.26,3.26,0,0,0,1.11-2.45,4.54,4.54,0,0,0-2.91-.83,3.74,3.74,0,0,0-2.27.66A2,2,0,0,0,40,15.15Z\\\" fill=\\\"#5f6368\\\"/>\\n      <path d=\\\"M60.52,6.9,53.07,24H50.76l2.77-6L48.63,6.91h2.43l3.54,8.54h0l3.44-8.54Z\\\" fill=\\\"#5f6368\\\"/>\\n      <path d=\\\"M19.65,10.24a12.54,12.54,0,0,0-.17-2H10.06v3.84h5.39a4.61,4.61,0,0,1-2,3v2.49h3.22A9.75,9.75,0,0,0,19.65,10.24Z\\\" fill=\\\"#4285f4\\\"/>\\n      <path d=\\\"M10.06,20a9.54,9.54,0,0,0,6.62-2.41l-3.22-2.49a6,6,0,0,1-3.4.95,6,6,0,0,1-5.6-4.12H1.15V14.5A10,10,0,0,0,10.06,20Z\\\" fill=\\\"#34a853\\\"/>\\n      <path d=\\\"M4.46,11.92a6,6,0,0,1,0-3.82V5.53H1.15a10,10,0,0,0,0,9Z\\\" fill=\\\"#fbbc04\\\"/>\\n      <path d=\\\"M10.06,4a5.44,5.44,0,0,1,3.83,1.5h0l2.85-2.85A9.58,9.58,0,0,0,10.06,0a10,10,0,0,0-8.91,5.5L4.46,8.1A6,6,0,0,1,10.06,4Z\\\" fill=\\\"#ea4335\\\"/>\\n    </symbol>\\n\\n    <symbol id=\\\"logoVenmo\\\" viewBox=\\\"0 0 48 32\\\">\\n      <title>Venmo</title>\\n      <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <rect fill=\\\"#3D95CE\\\" width=\\\"47.4074074\\\" height=\\\"31.6049383\\\" rx=\\\"3.16049383\\\"/>\\n        <path d=\\\"M33.1851852,10.1131555 C33.1851852,14.8373944 29.2425262,20.9745161 26.0425868,25.2839506 L18.7337285,25.2839506 L15.8024691,7.35534396 L22.202175,6.73384536 L23.7519727,19.4912014 C25.2000422,17.0781163 26.9870326,13.2859484 26.9870326,10.7005 C26.9870326,9.28531656 26.7500128,8.32139205 26.3796046,7.52770719 L32.207522,6.32098765 C32.8813847,7.45939896 33.1851852,8.63196439 33.1851852,10.1131555 Z\\\" fill=\\\"#FFF\\\"/>\\n      </g>\\n    </symbol>\\n    <symbol id=\\\"buttonVenmo\\\" viewBox=\\\"0 0 295 42\\\">\\n      <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\">\\n        <rect fill=\\\"#3D95CE\\\" width=\\\"295\\\" height=\\\"42\\\" rx=\\\"3\\\"/>\\n        <path d=\\\"M11.3250791 0C11.7902741.780434316 12 1.58428287 12 2.59970884 12 5.838396 9.27822123 10.0456806 7.06917212 13L2.02356829 13 0 .709099732 4.41797878.283033306 5.48786751 9.02879887C6.48752911 7.3745159 7.72116169 4.77480706 7.72116169 3.00236102 7.72116169 2.03218642 7.55753727 1.37137098 7.30182933.827262801L11.3250791 0 11.3250791 0zM17.5051689 5.68512193C18.333931 5.68512193 20.4203856 5.28483546 20.4203856 4.03281548 20.4203856 3.43161451 20.0177536 3.13172102 19.5432882 3.13172102 18.7131868 3.13172102 17.6238766 4.18269796 17.5051689 5.68512193L17.5051689 5.68512193zM17.4102028 8.1647385C17.4102028 9.69351403 18.2153451 10.293301 19.2827401 10.293301 20.4451012 10.293301 21.5580312 9.99340752 23.0045601 9.21725797L22.4597224 13.1234575C21.440541 13.649203 19.8521716 14 18.310433 14 14.3996547 14 13 11.49596 13 8.36552446 13 4.30815704 15.2767521 0 19.9706358 0 22.554932 0 24 1.52864698 24 3.65720949 24.0002435 7.08869546 19.8287953 8.13992948 17.4102028 8.1647385L17.4102028 8.1647385zM37 2.84753211C37 3.32189757 36.9261179 4.00994664 36.8526108 4.45959542L35.4649774 12.9998782 30.9621694 12.9998782 32.2279161 5.1711436C32.2519185 4.95879931 32.3256755 4.53131032 32.3256755 4.29412759 32.3256755 3.72466988 31.9603904 3.5825794 31.5212232 3.5825794 30.9379171 3.5825794 30.3532359 3.84326124 29.9638234 4.03356751L28.5281854 13 24 13 26.0686989.213683657 29.9878258.213683657 30.0374555 1.23425123C30.9620444.641294408 32.1795365 3.90379019e-8 33.9069526 3.90379019e-8 36.1955476-.000243475057 37 1.1387937 37 2.84753211L37 2.84753211zM51.2981937 1.39967969C52.6582977.49918987 53.9425913 0 55.7133897 0 58.1518468 0 59 1.13900518 59 2.84769558 59 3.32204771 58.9223438 4.01007745 58.8448195 4.4597136L57.3830637 12.9997565 52.6328518 12.9997565 53.9932194 5.00577861C54.0182698 4.792101 54.0708756 4.53142648 54.0708756 4.36608506 54.0708756 3.72493046 53.6854953 3.58272222 53.2224587 3.58272222 52.6325881 3.58272222 52.0429812 3.81989829 51.6052587 4.03369766L50.0914245 12.9998782 45.3423992 12.9998782 46.7027668 5.00590037C46.7278172 4.79222275 46.7788409 4.53154824 46.7788409 4.36620681 46.7788409 3.72505221 46.3933287 3.58284398 45.9318743 3.58284398 45.3153711 3.58284398 44.7000546 3.84351849 44.2893602 4.03381941L42.7740757 13 38 13 40.1814929.214042876 44.2643098.214042876 44.3925941 1.28145692C45.3423992.641763367 46.6253743.000487014507 48.3452809.000487014507 49.8344603 0 50.8094476.593061916 51.2981937 1.39967969L51.2981937 1.39967969zM67.5285327 5.39061542C67.5285327 4.29258876 67.2694573 3.54396333 66.4936812 3.54396333 64.7759775 3.54396333 64.4232531 6.76273249 64.4232531 8.4093242 64.4232531 9.65848482 64.7530184 10.4315735 65.5285529 10.4315735 67.1521242 10.4315735 67.5285327 7.03707905 67.5285327 5.39061542L67.5285327 5.39061542zM60 8.21054461C60 3.96893154 62.1170713 0 66.988027 0 70.6583423 0 72 2.29633967 72 5.46592624 72 9.65835674 69.905767 14 64.9173573 14 61.2233579 14 60 11.4294418 60 8.21054461L60 8.21054461z\\\" transform=\\\"translate(112 14)\\\" fill=\\\"#FFF\\\"/>\\n      </g>\\n    </symbol>\\n\\n    <symbol id=\\\"iconClose\\\" width=\\\"21\\\" height=\\\"21\\\" viewBox=\\\"0 0 21 21\\\" overflow=\\\"visible\\\">\\n      <path d=\\\"M16 5.414L14.586 4 10 8.586 5.414 4 4 5.414 8.586 10 4 14.586 5.414 16 10 11.414 14.586 16 16 14.586 11.414 10\\\"/>\\n    </symbol>\\n  </defs>\\n</svg>\\n\";\n\nvar UPDATABLE_CONFIGURATION_OPTIONS = [\n  paymentOptionIDs.paypal,\n  paymentOptionIDs.paypalCredit,\n  paymentOptionIDs.applePay,\n  paymentOptionIDs.googlePay,\n  'threeDSecure'\n];\nvar UPDATABLE_CONFIGURATION_OPTIONS_THAT_REQUIRE_UNVAULTED_PAYMENT_METHODS_TO_BE_REMOVED = [\n  paymentOptionIDs.paypal,\n  paymentOptionIDs.paypalCredit,\n  paymentOptionIDs.applePay,\n  paymentOptionIDs.googlePay\n];\nvar HAS_RAW_PAYMENT_DATA = {};\nvar VERSION = \"1.16.0\";\n\nHAS_RAW_PAYMENT_DATA[constants.paymentMethodTypes.googlePay] = true;\nHAS_RAW_PAYMENT_DATA[constants.paymentMethodTypes.applePay] = true;\n\n/**\n * @typedef {object} Dropin~cardPaymentMethodPayload\n * @property {string} nonce The payment method nonce, used by your server to charge the card.\n * @property {object} details Additional account details.\n * @property {string} details.cardType Type of card, e.g. Visa, Mastercard.\n * @property {string} details.lastTwo Last two digits of card number.\n * @property {string} description A human-readable description.\n * @property {string} type The payment method type, always `CreditCard` when the method requested is a card.\n * @property {object} binData Information about the card based on the bin. Documented {@link Dropin~binData|here}.\n * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.\n * @property {?boolean} liablityShifted If 3D Secure is configured, whether or not liability did shift.\n * @property {?boolean} liablityShiftPossible If 3D Secure is configured, whether or not liability shift is possible.\n */\n\n/**\n * @typedef {object} Dropin~paypalPaymentMethodPayload\n * @property {string} nonce The payment method nonce, used by your server to charge the PayPal account.\n * @property {object} details Additional PayPal account details. See a full list of details in the [PayPal client reference](http://braintree.github.io/braintree-web/{@pkg bt-web-version}/PayPalCheckout.html#~tokenizePayload).\n * @property {string} type The payment method type, always `PayPalAccount` when the method requested is a PayPal account.\n * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.\n */\n\n/**\n * @typedef {object} Dropin~applePayPaymentMethodPayload\n * @property {string} nonce The payment method nonce, used by your server to charge the Apple Pay provided card.\n * @property {string} details.cardType Type of card, ex: Visa, Mastercard.\n * @property {string} details.cardHolderName The name of the card holder.\n * @property {string} details.dpanLastTwo Last two digits of card number.\n * @property {external:ApplePayPayment} details.rawPaymentData The raw response back from the Apple Pay flow, which includes billing/shipping address, phone and email if passed in as required parameters.\n * @property {string} description A human-readable description.\n * @property {string} type The payment method type, always `ApplePayCard` when the method requested is an Apple Pay provided card.\n * @property {object} binData Information about the card based on the bin. Documented {@link Dropin~binData|here}.\n * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.\n */\n\n/**\n * @typedef {object} ApplePayPayment An [Apple Pay Payment object](https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment).\n * @external ApplePayPayment\n * @see {@link https://developer.apple.com/documentation/apple_pay_on_the_web/applepaypayment ApplePayPayment}\n */\n\n/**\n * @typedef {object} Dropin~venmoPaymentMethodPayload\n * @property {string} nonce The payment method nonce, used by your server to charge the Venmo account.\n * @property {string} details.username The Venmo username.\n * @property {string} type The payment method type, always `VenmoAccount` when the method requested is a Venmo account.\n * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.\n */\n\n/**\n * @typedef {object} Dropin~googlePayPaymentMethodPayload\n * @property {string} nonce The payment method nonce, used by your server to charge the Google Pay card.\n * @property {string} details.cardType Type of card, ex: Visa, Mastercard.\n * @property {string} details.lastFour The last 4 digits of the card.\n * @property {string} details.lastTwo The last 2 digits of the card.\n * @property {external:GooglePayPaymentData} details.rawPaymentData The raw response back from the Google Pay flow, which includes shipping address, phone and email if passed in as required parameters.\n * @property {string} type The payment method type, always `AndroidPayCard` when the method requested is a Google Pay Card.\n * @property {object} binData Information about the card based on the bin. Documented {@link Dropin~binData|here}.\n * @property {?string} deviceData If data collector is configured, the device data property to be used when making a transaction.\n */\n\n/**\n * @typedef {object} GooglePayPaymentData A [Google Pay Payment Data object](https://developers.google.com/pay/api/web/object-reference#PaymentData).\n * @external GooglePayPaymentData\n * @see {@link https://developers.google.com/pay/api/web/object-reference#PaymentData PaymentData}\n */\n\n/**\n * @typedef {object} Dropin~binData Information about the card based on the bin.\n * @property {string} commercial Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} countryOfIssuance The country of issuance.\n * @property {string} debit Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} durbinRegulated Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} healthcare Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} issuingBank The issuing bank.\n * @property {string} payroll Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} prepaid Possible values: 'Yes', 'No', 'Unknown'.\n * @property {string} productId The product id.\n */\n\n/**\n * @name Dropin#on\n * @function\n * @param {string} event The name of the event to which you are subscribing.\n * @param {function} handler A callback to handle the event.\n * @description Subscribes a handler function to a named event. `event` should be one of the following:\n *  * [`paymentMethodRequestable`](#event:paymentMethodRequestable)\n *  * [`noPaymentMethodRequestable`](#event:noPaymentMethodRequestable)\n *  * [`paymentOptionSelected`](#event:paymentOptionSelected)\n * @returns {void}\n * @example\n * <caption>Dynamically enable or disable your submit button based on whether or not the payment method is requestable</caption>\n * var submitButton = document.querySelector('#submit-button');\n *\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container'\n * }, function (err, dropinInstance) {\n *   submitButton.addEventListener('click', function () {\n *     dropinInstance.requestPaymentMethod(function (err, payload) {\n *       // Send payload.nonce to your server.\n *     });\n *   });\n *\n *   if (dropinInstance.isPaymentMethodRequestable()) {\n *     // This will be true if you generated the client token\n *     // with a customer ID and there is a saved payment method\n *     // available to tokenize with that customer.\n *     submitButton.removeAttribute('disabled');\n *   }\n *\n *   dropinInstance.on('paymentMethodRequestable', function (event) {\n *     console.log(event.type); // The type of Payment Method, e.g 'CreditCard', 'PayPalAccount'.\n *     console.log(event.paymentMethodIsSelected); // true if a customer has selected a payment method when paymentMethodRequestable fires\n *\n *     submitButton.removeAttribute('disabled');\n *   });\n *\n *   dropinInstance.on('noPaymentMethodRequestable', function () {\n *     submitButton.setAttribute('disabled', true);\n *   });\n * });\n * @example\n * <caption>Automatically submit nonce to server as soon as it becomes available</caption>\n * var submitButton = document.querySelector('#submit-button');\n *\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container'\n * }, function (err, dropinInstance) {\n *   function sendNonceToServer() {\n *     dropinInstance.requestPaymentMethod(function (err, payload) {\n *       if (err) {\n *         // handle errors\n *       }\n *\n *       // send payload.nonce to your server\n *     });\n *   }\n *\n *   // allows us to still request the payment method manually, such as\n *   // when filling out a credit card form\n *   submitButton.addEventListener('click', sendNonceToServer);\n *\n *   dropinInstance.on('paymentMethodRequestable', function (event) {\n *     // if the nonce is already available (via PayPal authentication\n *     // or by using a stored payment method), we can request the\n *     // nonce right away. Otherwise, we wait for the customer to\n *     // request the nonce by pressing the submit button once they\n *     // are finished entering their credit card details\n *     if (event.paymentMethodIsSelected) {\n *       sendNonceToServer();\n *     }\n *   });\n * });\n */\n\n/**\n * This event is emitted when the payment method available in Drop-in changes. This includes when the state of Drop-in transitions from having no payment method available to having a payment method available and when the payment method available changes. This event is not fired if there is no payment method available on initialization. To check if there is a payment method requestable on initialization, use {@link Dropin#isPaymentMethodRequestable|`isPaymentMethodRequestable`}.\n * @event Dropin#paymentMethodRequestable\n * @type {Dropin~paymentMethodRequestablePayload}\n */\n\n/**\n * @typedef {object} Dropin~paymentMethodRequestablePayload\n * @description The event payload sent from {@link Dropin#on|`on`} with the {@link Dropin#event:paymentMethodRequestable|`paymentMethodRequestable`} event.\n * @property {string} type The type of payment method that is requestable. Either `CreditCard` or `PayPalAccount`.\n * @property {boolean} paymentMethodIsSelected A property to determine if a payment method is currently selected when the payment method becomes requestable.\n *\n * This will be `true` any time a payment method is visably selected in the Drop-in UI, such as when PayPal authentication completes or a stored payment method is selected.\n *\n * This will be `false` when {@link Dropin#requestPaymentMethod|`requestPaymentMethod`} can be called, but a payment method is not currently selected. For instance, when a card form has been filled in with valid values, but has not been submitted to be converted into a payment method nonce.\n */\n\n/**\n * This event is emitted when there is no payment method available in Drop-in. This event is not fired if there is no payment method available on initialization. To check if there is a payment method requestable on initialization, use {@link Dropin#isPaymentMethodRequestable|`isPaymentMethodRequestable`}. No payload is available in the callback for this event.\n * @event Dropin#noPaymentMethodRequestable\n */\n\n/**\n * This event is emitted when the customer selects a new payment option type (e.g. PayPal, PayPal Credit, credit card). This event is not emitted when the user changes between existing saved payment methods. Only relevant when accepting multiple payment options.\n * @event Dropin#paymentOptionSelected\n * @type {Dropin~paymentOptionSelectedPayload}\n */\n\n/**\n * @typedef {object} Dropin~paymentOptionSelectedPayload\n * @description The event payload sent from {@link Dropin#on|`on`} with the {@link Dropin#event:paymentOptionSelected|`paymentOptionSelected`} event.\n * @property {string} paymentOption The payment option view selected. Either `card`, `paypal`, or `paypalCredit`.\n */\n\n/**\n * @class\n * @param {object} options For create options, see {@link module:braintree-web-drop-in|dropin.create}.\n * @description <strong>Do not use this constructor directly. Use {@link module:braintree-web-drop-in|dropin.create} instead.</strong>\n * @classdesc This class represents a Drop-in component, that will create a pre-made UI for accepting cards and PayPal on your page. Instances of this class have methods for requesting a payment method and subscribing to events. For more information, see the [Drop-in guide](https://developers.braintreepayments.com/guides/drop-in/javascript/v3) in the Braintree Developer Docs. To be used in conjunction with the [Braintree Server SDKs](https://developers.braintreepayments.com/start/hello-server/).\n */\nfunction Dropin(options) {\n  this._client = options.client;\n  this._componentID = uuid();\n  this._dropinWrapper = document.createElement('div');\n  this._dropinWrapper.id = 'braintree--dropin__' + this._componentID;\n  this._dropinWrapper.setAttribute('data-braintree-id', 'wrapper');\n  this._dropinWrapper.style.display = 'none';\n  this._dropinWrapper.className = 'braintree-loading';\n  this._merchantConfiguration = options.merchantConfiguration;\n\n  EventEmitter.call(this);\n}\n\nDropin.prototype = Object.create(EventEmitter.prototype, {\n  constructor: Dropin\n});\n\nDropin.prototype._initialize = function (callback) {\n  var localizedStrings, localizedHTML;\n  var self = this;\n  var container = self._merchantConfiguration.container || self._merchantConfiguration.selector;\n\n  self._injectStylesheet();\n\n  if (!container) {\n    analytics.sendEvent(self._client, 'configuration-error');\n    callback(new DropinError('options.container is required.'));\n\n    return;\n  } else if (self._merchantConfiguration.container && self._merchantConfiguration.selector) {\n    analytics.sendEvent(self._client, 'configuration-error');\n    callback(new DropinError('Must only have one options.selector or options.container.'));\n\n    return;\n  }\n\n  if (typeof container === 'string') {\n    container = document.querySelector(container);\n  }\n\n  if (!container || container.nodeType !== 1) {\n    analytics.sendEvent(self._client, 'configuration-error');\n    callback(new DropinError('options.selector or options.container must reference a valid DOM node.'));\n\n    return;\n  }\n\n  if (container.innerHTML.trim()) {\n    analytics.sendEvent(self._client, 'configuration-error');\n    callback(new DropinError('options.selector or options.container must reference an empty DOM node.'));\n\n    return;\n  }\n\n  // Backfill with `en`\n  self._strings = assign({}, translations.en);\n  if (self._merchantConfiguration.locale) {\n    localizedStrings = translations[self._merchantConfiguration.locale] || translations[self._merchantConfiguration.locale.split('_')[0]];\n    // Fill `strings` with `localizedStrings` that may exist\n    self._strings = assign(self._strings, localizedStrings);\n  }\n\n  if (!isUtf8()) {\n    // non-utf-8 encodings often don't support the bullet character\n    self._strings.endingIn = self._strings.endingIn.replace(/•/g, '*');\n  }\n\n  if (self._merchantConfiguration.translations) {\n    Object.keys(self._merchantConfiguration.translations).forEach(function (key) {\n      self._strings[key] = sanitizeHtml(self._merchantConfiguration.translations[key]);\n    });\n  }\n\n  localizedHTML = Object.keys(self._strings).reduce(function (result, stringKey) {\n    var stringValue = self._strings[stringKey];\n\n    return result.replace(RegExp('{{' + stringKey + '}}', 'g'), stringValue);\n  }, mainHTML);\n\n  self._dropinWrapper.innerHTML = svgHTML + localizedHTML;\n  container.appendChild(self._dropinWrapper);\n\n  self._model = new DropinModel({\n    client: self._client,\n    componentID: self._componentID,\n    merchantConfiguration: self._merchantConfiguration\n  });\n\n  self._model.initialize().then(function () {\n    self._model.on('cancelInitialization', function (err) {\n      self._dropinWrapper.innerHTML = '';\n      analytics.sendEvent(self._client, 'load-error');\n      callback(err);\n    });\n\n    self._model.on('asyncDependenciesReady', function () {\n      if (self._model.dependencySuccessCount >= 1) {\n        analytics.sendEvent(self._client, 'appeared');\n        self._disableErroredPaymentMethods();\n\n        self._handleAppSwitch();\n\n        callback(null, self);\n      } else {\n        self._model.cancelInitialization(new DropinError('All payment options failed to load.'));\n      }\n    });\n\n    self._model.on('paymentMethodRequestable', function (event) {\n      self._emit('paymentMethodRequestable', event);\n    });\n\n    self._model.on('noPaymentMethodRequestable', function () {\n      self._emit('noPaymentMethodRequestable');\n    });\n\n    self._model.on('paymentOptionSelected', function (event) {\n      self._emit('paymentOptionSelected', event);\n    });\n\n    return self._setUpDependenciesAndViews();\n  }).catch(function (err) {\n    self.teardown().then(function () {\n      callback(err);\n    });\n  });\n};\n\n/**\n * Modify your configuration intially set in {@link module:braintree-web-drop-in|`dropin.create`}.\n *\n * If `updateConfiguration` is called after a user completes the PayPal authorization flow, any PayPal accounts not stored in the Vault record will be removed.\n * @public\n * @param {string} property The top-level property to update. Either `paypal`, `paypalCredit`, `applePay`, or `googlePay`.\n * @param {string} key The key of the property to update, such as `amount` or `currency`.\n * @param {any} value The value of the property to update. Must be the type of the property specified in {@link module:braintree-web-drop-in|`dropin.create`}.\n * @returns {void}\n * @example\n * dropinInstance.updateConfiguration('paypal', 'amount', '10.00');\n */\nDropin.prototype.updateConfiguration = function (property, key, value) {\n  var view;\n\n  if (UPDATABLE_CONFIGURATION_OPTIONS.indexOf(property) === -1) {\n    return;\n  }\n\n  if (property === 'threeDSecure') {\n    if (this._threeDSecure) {\n      this._threeDSecure.updateConfiguration(key, value);\n    }\n\n    return;\n  }\n\n  view = this._mainView.getView(property);\n\n  if (!view) {\n    return;\n  }\n\n  view.updateConfiguration(key, value);\n\n  if (UPDATABLE_CONFIGURATION_OPTIONS_THAT_REQUIRE_UNVAULTED_PAYMENT_METHODS_TO_BE_REMOVED.indexOf(property) === -1) {\n    return;\n  }\n\n  this._removeUnvaultedPaymentMethods(function (paymentMethod) {\n    return paymentMethod.type === constants.paymentMethodTypes[property];\n  });\n  this._navigateToInitialView();\n};\n\n/**\n * Removes the currently selected payment method and returns the customer to the payment options view. Does not remove vaulted payment methods.\n * @public\n * @returns {void}\n * @example\n * dropinInstance.requestPaymentMethod(function (requestPaymentMethodError, payload) {\n *   if (requestPaymentMethodError) {\n *     // handle errors\n *     return;\n *   }\n *\n *   functionToSendNonceToServer(payload.nonce, function (transactionError, response) {\n *     if (transactionError) {\n *       // transaction sale with selected payment method failed\n *       // clear the selected payment method and add a message\n *       // to the checkout page about the failure\n *       dropinInstance.clearSelectedPaymentMethod();\n *       divForErrorMessages.textContent = 'my error message about entering a different payment method.';\n *     } else {\n *       // redirect to success page\n *     }\n *   });\n * });\n */\nDropin.prototype.clearSelectedPaymentMethod = function () {\n  this._removeUnvaultedPaymentMethods();\n  this._model.removeActivePaymentMethod();\n\n  if (this._model.getPaymentMethods().length === 0) {\n    this._navigateToInitialView();\n\n    return;\n  }\n\n  this._mainView.showLoadingIndicator();\n\n  this._model.refreshPaymentMethods().then(function () {\n    this._navigateToInitialView();\n    this._mainView.hideLoadingIndicator();\n  }.bind(this));\n};\n\nDropin.prototype._setUpDataCollector = function () {\n  var self = this;\n  var config = assign({}, self._merchantConfiguration.dataCollector, {client: self._client});\n\n  this._model.asyncDependencyStarting();\n  this._dataCollector = new DataCollector(config);\n\n  this._dataCollector.initialize().then(function () {\n    self._model.asyncDependencyReady();\n  }).catch(function (err) {\n    self._model.cancelInitialization(new DropinError({\n      message: 'Data Collector failed to set up.',\n      braintreeWebError: err\n    }));\n  });\n};\n\nDropin.prototype._setUpThreeDSecure = function () {\n  var self = this;\n  var config = assign({}, this._merchantConfiguration.threeDSecure);\n\n  this._model.asyncDependencyStarting();\n\n  this._threeDSecure = new ThreeDSecure(this._client, config, this._strings.cardVerification);\n\n  this._threeDSecure.initialize().then(function () {\n    self._model.asyncDependencyReady();\n  }).catch(function (err) {\n    self._model.cancelInitialization(new DropinError({\n      message: '3D Secure failed to set up.',\n      braintreeWebError: err\n    }));\n  });\n};\n\nDropin.prototype._setUpDependenciesAndViews = function () {\n  if (this._merchantConfiguration.dataCollector) {\n    this._setUpDataCollector();\n  }\n\n  if (this._merchantConfiguration.threeDSecure) {\n    this._setUpThreeDSecure();\n  }\n\n  this._mainView = new MainView({\n    client: this._client,\n    element: this._dropinWrapper,\n    model: this._model,\n    strings: this._strings\n  });\n};\n\nDropin.prototype._removeUnvaultedPaymentMethods = function (filter) {\n  filter = filter || function () { return true; };\n\n  this._model.getPaymentMethods().forEach(function (paymentMethod) {\n    if (filter(paymentMethod) && !paymentMethod.vaulted) {\n      this._model.removePaymentMethod(paymentMethod);\n    }\n  }.bind(this));\n};\n\nDropin.prototype._navigateToInitialView = function () {\n  var hasNoSavedPaymentMethods, hasOnlyOneSupportedPaymentOption;\n  var isOnMethodsView = this._mainView.primaryView.ID === paymentMethodsViewID;\n\n  if (isOnMethodsView) {\n    hasNoSavedPaymentMethods = this._model.getPaymentMethods().length === 0;\n\n    if (hasNoSavedPaymentMethods) {\n      hasOnlyOneSupportedPaymentOption = this._model.supportedPaymentOptions.length === 1;\n\n      if (hasOnlyOneSupportedPaymentOption) {\n        this._mainView.setPrimaryView(this._model.supportedPaymentOptions[0]);\n      } else {\n        this._mainView.setPrimaryView(paymentOptionsViewID);\n      }\n    }\n  }\n};\n\nDropin.prototype._supportsPaymentOption = function (paymentOption) {\n  return this._model.supportedPaymentOptions.indexOf(paymentOption) !== -1;\n};\n\nDropin.prototype._disableErroredPaymentMethods = function () {\n  var paymentMethodOptionsElements;\n  var failedDependencies = Object.keys(this._model.failedDependencies);\n\n  if (failedDependencies.length === 0) {\n    return;\n  }\n\n  paymentMethodOptionsElements = this._mainView.getOptionsElements();\n\n  failedDependencies.forEach(function (paymentMethodId) {\n    var element = paymentMethodOptionsElements[paymentMethodId];\n    var div = element.div;\n    var clickHandler = element.clickHandler;\n    var error = this._model.failedDependencies[paymentMethodId];\n    var errorMessageDiv = div.querySelector('.braintree-option__disabled-message');\n\n    classList.add(div, 'braintree-disabled');\n    div.removeEventListener('click', clickHandler);\n    errorMessageDiv.innerHTML = constants.errors.DEVELOPER_MISCONFIGURATION_MESSAGE;\n    console.error(error); // eslint-disable-line no-console\n  }.bind(this));\n};\n\nDropin.prototype._handleAppSwitch = function () {\n  if (this._model.appSwitchError) {\n    this._mainView.setPrimaryView(this._model.appSwitchError.id);\n    this._model.reportError(this._model.appSwitchError.error);\n  } else if (this._model.appSwitchPayload) {\n    this._model.addPaymentMethod(this._model.appSwitchPayload);\n  }\n};\n\n/**\n * Requests a payment method object which includes the payment method nonce used by by the [Braintree Server SDKs](https://developers.braintreepayments.com/start/hello-server/).\n *\n * If a payment method is not available, an error will appear in the UI. When a callback is used, an error will be passed to it. If no callback is used, the returned Promise will be rejected with an error.\n * @public\n * @param {callback} [callback] The first argument will be an error if no payment method is available and will otherwise be null. The second argument will be an object containing a payment method nonce; either a {@link Dropin~cardPaymentMethodPayload|cardPaymentMethodPayload}, a {@link Dropin~paypalPaymentMethodPayload|paypalPaymentMethodPayload}, a {@link Dropin~venmoPaymentMethodPayload|venmoPaymentMethodPayload}, a {@link Dropin~googlePayPaymentMethodPayload|googlePayPaymentMethodPayload} or an {@link Dropin~applePayPaymentMethodPayload|applePayPaymentMethodPayload}. If no callback is provided, `requestPaymentMethod` will return a promise.\n * @returns {void|Promise} Returns a promise if no callback is provided.\n * @example <caption>Requesting a payment method</caption>\n * var form = document.querySelector('#my-form');\n * var hiddenNonceInput = document.querySelector('#my-nonce-input');\n *\n * form.addEventListener('submit', function (event) {\n *  event.preventDefault();\n *\n *  dropinInstance.requestPaymentMethod(function (err, payload) {\n *    if (err) {\n *      // handle error\n *      return;\n *    }\n *    hiddenNonceInput.value = payload.nonce;\n *    form.submit();\n *  });\n * });\n * @example <caption>Requesting a payment method with data collector</caption>\n * var form = document.querySelector('#my-form');\n * var hiddenNonceInput = document.querySelector('#my-nonce-input');\n * var hiddenDeviceDataInput = document.querySelector('#my-device-data-input');\n *\n * form.addEventListener('submit', function (event) {\n *  event.preventDefault();\n *\n *  dropinInstance.requestPaymentMethod(function (err, payload) {\n *    if (err) {\n *      // handle error\n *      return;\n *    }\n *    hiddenNonceInput.value = payload.nonce;\n *    hiddenDeviceDataInput.value = payload.deviceData;\n *    form.submit();\n *  });\n * });\n *\n * @example <caption>Requesting a payment method with 3D Secure</caption>\n * var form = document.querySelector('#my-form');\n * var hiddenNonceInput = document.querySelector('#my-nonce-input');\n *\n * form.addEventListener('submit', function (event) {\n *  event.preventDefault();\n *\n *  dropinInstance.requestPaymentMethod(function (err, payload) {\n *    if (err) {\n *      // Handle error\n *      return;\n *    }\n *\n *    if (payload.liabilityShifted || payload.type !== 'CreditCard') {\n *      hiddenNonceInput.value = payload.nonce;\n *      form.submit();\n *    } else {\n *      // Decide if you will force the user to enter a different payment method\n *      // if liablity was not shifted\n *      dropinInstance.clearSelectedPaymentMethod();\n *    }\n *  });\n * });\n */\nDropin.prototype.requestPaymentMethod = function () {\n  return this._mainView.requestPaymentMethod().then(function (payload) {\n    if (this._threeDSecure && payload.type === constants.paymentMethodTypes.card && payload.liabilityShifted == null) {\n      return this._threeDSecure.verify(payload.nonce).then(function (newPayload) {\n        payload.nonce = newPayload.nonce;\n        payload.liabilityShifted = newPayload.liabilityShifted;\n        payload.liabilityShiftPossible = newPayload.liabilityShiftPossible;\n\n        return payload;\n      });\n    }\n\n    return payload;\n  }.bind(this)).then(function (payload) {\n    if (this._dataCollector) {\n      payload.deviceData = this._dataCollector.getDeviceData();\n    }\n\n    return payload;\n  }.bind(this)).then(function (payload) {\n    return formatPaymentMethodPayload(payload);\n  });\n};\n\nDropin.prototype._removeStylesheet = function () {\n  var stylesheet = document.getElementById(constants.STYLESHEET_ID);\n\n  if (stylesheet) {\n    stylesheet.parentNode.removeChild(stylesheet);\n  }\n};\n\nDropin.prototype._injectStylesheet = function () {\n  var stylesheetUrl, assetsUrl;\n\n  if (document.getElementById(constants.STYLESHEET_ID)) { return; }\n\n  assetsUrl = this._client.getConfiguration().gatewayConfiguration.assetsUrl;\n  stylesheetUrl = assetsUrl + '/web/dropin/' + VERSION + '/css/dropin.css';\n\n  assets.loadStylesheet({\n    href: stylesheetUrl,\n    id: constants.STYLESHEET_ID\n  });\n};\n\n/**\n * Cleanly remove anything set up by {@link module:braintree-web-drop-in|dropin.create}. This may be be useful in a single-page app.\n * @public\n * @param {callback} [callback] Called on completion, containing an error if one occurred. No data is returned if teardown completes successfully. If no callback is provided, `teardown` will return a promise.\n * @returns {void|Promise} Returns a promise if no callback is provided.\n */\nDropin.prototype.teardown = function () {\n  var teardownError;\n  var promise = Promise.resolve();\n  var self = this;\n\n  this._removeStylesheet();\n\n  if (this._mainView) {\n    promise.then(function () {\n      return self._mainView.teardown().catch(function (err) {\n        teardownError = err;\n      });\n    });\n  }\n\n  if (this._dataCollector) {\n    promise.then(function () {\n      return this._dataCollector.teardown().catch(function (error) {\n        teardownError = new DropinError({\n          message: 'Drop-in errored tearing down Data Collector.',\n          braintreeWebError: error\n        });\n      });\n    }.bind(this));\n  }\n\n  if (this._threeDSecure) {\n    promise.then(function () {\n      return this._threeDSecure.teardown().catch(function (error) {\n        teardownError = new DropinError({\n          message: 'Drop-in errored tearing down 3D Secure.',\n          braintreeWebError: error\n        });\n      });\n    }.bind(this));\n  }\n\n  return promise.then(function () {\n    return self._removeDropinWrapper();\n  }).then(function () {\n    if (teardownError) {\n      return Promise.reject(teardownError);\n    }\n\n    return Promise.resolve();\n  });\n};\n\n/**\n * Returns a boolean indicating if a payment method is available through {@link Dropin#requestPaymentMethod|requestPaymentMethod}. Particularly useful for detecting if using a client token with a customer ID to show vaulted payment methods.\n * @public\n * @returns {Boolean} True if a payment method is available, otherwise false.\n */\nDropin.prototype.isPaymentMethodRequestable = function () {\n  return this._model.isPaymentMethodRequestable();\n};\n\nDropin.prototype._removeDropinWrapper = function () {\n  this._dropinWrapper.parentNode.removeChild(this._dropinWrapper);\n\n  return Promise.resolve();\n};\n\nfunction formatPaymentMethodPayload(paymentMethod) {\n  var formattedPaymentMethod = {\n    nonce: paymentMethod.nonce,\n    details: paymentMethod.details,\n    type: paymentMethod.type\n  };\n\n  if (paymentMethod.vaulted != null) {\n    formattedPaymentMethod.vaulted = paymentMethod.vaulted;\n  }\n\n  if (paymentMethod.type === constants.paymentMethodTypes.card) {\n    formattedPaymentMethod.description = paymentMethod.description;\n  }\n\n  if (paymentMethod.type in HAS_RAW_PAYMENT_DATA) {\n    formattedPaymentMethod.details.rawPaymentData = paymentMethod.rawPaymentData;\n  }\n\n  if (typeof paymentMethod.liabilityShiftPossible === 'boolean') {\n    formattedPaymentMethod.liabilityShifted = paymentMethod.liabilityShifted;\n    formattedPaymentMethod.liabilityShiftPossible = paymentMethod.liabilityShiftPossible;\n  }\n\n  if (paymentMethod.deviceData) {\n    formattedPaymentMethod.deviceData = paymentMethod.deviceData;\n  }\n\n  if (paymentMethod.binData) {\n    formattedPaymentMethod.binData = paymentMethod.binData;\n  }\n\n  return formattedPaymentMethod;\n}\n\nmodule.exports = wrapPrototype(Dropin);\n\n},{\"./constants\":125,\"./dropin-model\":126,\"./lib/analytics\":130,\"./lib/assign\":131,\"./lib/data-collector\":134,\"./lib/dropin-error\":135,\"./lib/event-emitter\":136,\"./lib/is-utf-8\":140,\"./lib/promise\":143,\"./lib/sanitize-html\":144,\"./lib/three-d-secure\":146,\"./lib/uuid\":148,\"./translations\":158,\"./views/main-view\":175,\"./views/payment-methods-view\":177,\"./views/payment-options-view\":178,\"@braintree/asset-loader\":1,\"@braintree/class-list\":18,\"@braintree/wrap-promise\":26}],128:[function(require,module,exports){\n'use strict';\n/**\n * @module braintree-web-drop-in\n * @description There are two ways to integrate Drop-in into your page: a script tag integration and a JavaScript integration using [`dropin.create`](#.create).\n *\n * The script tag integration is the fastest way to integrate. All you need to do is add the Drop-in script inside your form element where you want Drop-in to appear and include a `data-braintree-dropin-authorization` property with your [tokenization key](https://developers.braintreepayments.com/guides/authorization/tokenization-key/javascript/v3) or [client token](https://developers.braintreepayments.com/guides/authorization/client-token).\n *\n * When your form is submitted, Drop-in will intercept the form submission and attempt to tokenize the payment method. If the tokenization is successful, it will insert the payment method nonce into a hidden input with the name `payment_method_nonce` and then submit your form. If the tokenization is unsuccessful, a relevant error will be shown in the UI.\n *\n * If you have data collector enabled, the device data will be injected into a hidden input with the name `device_data` before form submission.\n *\n * Specify creation options as data attributes in your script tag, as shown in the examples below. The following configuration properties may be set:\n *\n * * `data-locale`\n * * `data-card.cardholder-name.required`\n * * `data-payment-option-priority`\n * * `data-data-collector.kount`\n * * `data-data-collector.paypal`\n * * `data-paypal.amount`\n * * `data-paypal.currency`\n * * `data-paypal.flow`\n * * `data-paypal-credit.amount`\n * * `data-paypal-credit.currency`\n * * `data-paypal-credit.flow`\n *\n * For more control and customization, use [`dropin.create` instead](#.create).\n *\n * See our [demo app](../../script-tag-integration.html) for an example of using our script tag integration.\n *\n * @example\n * <caption>A full example accepting only cards</caption>\n * <!DOCTYPE html>\n * <html lang=\"en\">\n *   <head>\n *     <meta charset=\"UTF-8\">\n *     <title>Checkout</title>\n *   </head>\n *   <body>\n *     <form id=\"payment-form\" action=\"/\" method=\"post\">\n *       <script src=\"https://js.braintreegateway.com/web/dropin/{@pkg version}/js/dropin.min.js\"\n *        data-braintree-dropin-authorization=\"CLIENT_AUTHORIZATION\"\n *       ></script>\n *       <input type=\"submit\" value=\"Purchase\"></input>\n *     </form>\n *   </body>\n * </html>\n *\n * @example\n * <caption>A full example accepting cards, PayPal, and PayPal credit</caption>\n * <!DOCTYPE html>\n * <html lang=\"en\">\n *   <head>\n *     <meta charset=\"UTF-8\">\n *     <title>Checkout</title>\n *   </head>\n *   <body>\n *     <form id=\"payment-form\" action=\"/\" method=\"post\">\n *       <script src=\"https://js.braintreegateway.com/web/dropin/{@pkg version}/js/dropin.min.js\"\n *        data-braintree-dropin-authorization=\"CLIENT_AUTHORIZATION\"\n *        data-paypal.flow=\"checkout\"\n *        data-paypal.amount=\"10.00\"\n *        data-paypal.currency=\"USD\"\n *        data-paypal-credit.flow=\"vault\"\n *       ></script>\n *       <input type=\"submit\" value=\"Purchase\"></input>\n *     </form>\n *   </body>\n * </html>\n *\n * @example\n * <caption>Specifying a locale and payment option priority</caption>\n * <form id=\"payment-form\" action=\"/\" method=\"post\">\n *   <script src=\"https://js.braintreegateway.com/web/dropin/{@pkg version}/js/dropin.min.js\"\n *    data-braintree-dropin-authorization=\"CLIENT_AUTHORIZATION\"\n *    data-locale=\"de_DE\"\n *    data-payment-option-priority='[\"paypal\",\"card\", \"paypalCredit\"]'\n *    data-paypal.flow=\"checkout\"\n *    data-paypal.amount=\"10.00\"\n *    data-paypal.currency=\"USD\"\n *    data-paypal-credit.flow=\"vault\"\n *   ></script>\n *   <input type=\"submit\" value=\"Purchase\"></input>\n * </form>\n *\n * @example\n * <caption>Including an optional cardholder name field in card form</caption>\n * <form id=\"payment-form\" action=\"/\" method=\"post\">\n *   <script src=\"https://js.braintreegateway.com/web/dropin/{@pkg version}/js/dropin.min.js\"\n *    data-braintree-dropin-authorization=\"CLIENT_AUTHORIZATION\"\n *    data-card.cardholder-name.required=\"false\"\n *   ></script>\n *   <input type=\"submit\" value=\"Purchase\"></input>\n * </form>\n *\n * @example\n * <caption>Including a required cardholder name field in card form</caption>\n * <form id=\"payment-form\" action=\"/\" method=\"post\">\n *   <script src=\"https://js.braintreegateway.com/web/dropin/{@pkg version}/js/dropin.min.js\"\n *    data-braintree-dropin-authorization=\"CLIENT_AUTHORIZATION\"\n *    data-card.cardholder-name.required=\"true\"\n *   ></script>\n *   <input type=\"submit\" value=\"Purchase\"></input>\n * </form>\n */\n\nvar Dropin = require('./dropin');\nvar client = require('braintree-web/client');\nvar createFromScriptTag = require('./lib/create-from-script-tag');\nvar constants = require('./constants');\nvar analytics = require('./lib/analytics');\nvar DropinError = require('./lib/dropin-error');\nvar Promise = require('./lib/promise');\nvar wrapPromise = require('@braintree/wrap-promise');\n\nvar VERSION = \"1.16.0\";\n\n/**\n * @typedef {object} cardCreateOptions The configuration options for cards. Internally, Drop-in uses [Hosted Fields](http://braintree.github.io/braintree-web/{@pkg bt-web-version}/module-braintree-web_hosted-fields.html) to render the card form. The `overrides.fields` and `overrides.styles` allow the Hosted Fields to be customized.\n *\n * @param {boolean|object} [cardholderName] Will enable a cardholder name field above the card number field. If set to an object, you can specify whether or not the field is required. If set to a `true`, it will default the field to being present, but not required.\n * @param {boolean} [cardholderName.required=false] When true, the cardholder name field will be required to request the payment method nonce.\n * @param {object} [overrides.fields] The Hosted Fields [`fields` options](http://braintree.github.io/braintree-web/{@pkg bt-web-version}/module-braintree-web_hosted-fields.html#~fieldOptions). Only `number`, `cvv`, `expirationDate` and `postalCode` can be configured. Each is a [Hosted Fields `field` object](http://braintree.github.io/braintree-web/{@pkg bt-web-version}/module-braintree-web_hosted-fields.html#~field). `selector` cannot be modified.\n * @param {object} [overrides.styles] The Hosted Fields [`styles` options](http://braintree.github.io/braintree-web/{@pkg bt-web-version}/module-braintree-web_hosted-fields.html#~styleOptions). These can be used to add custom styles to the Hosted Fields iframes. To style the rest of Drop-in, [review the documentation for customizing Drop-in](https://developers.braintreepayments.com/guides/drop-in/customization/javascript/v3#customize-your-ui).\n * @param {boolean} [clearFieldsAfterTokenization=true] When false, the card form will not clear the card data when the customer returns to the card view after a succesful tokenization.\n */\n\n/**\n * @typedef {object} dataCollectorOptions The configuration options for Data Collector. Requires [advanced fraud protection](https://developers.braintreepayments.com/guides/advanced-fraud-tools/client-side/javascript/v3) to be enabled in the Braintree gateway. Contact our [support team](https://developers.braintreepayments.com/forms/contact) to configure your Kount ID. The device data will be included on the {@link Dropin#requestPaymentMethod|requestPaymentMethod payload}.\n *\n * @param {boolean} [kount] If true, Kount fraud data collection is enabled. Required if `paypal` parameter is not used.\n * @param {boolean} [paypal] If true, PayPal fraud data collection is enabled. Required if `kount` parameter is not used.\n */\n\n/**\n * @typedef {object} threeDSecureOptions The configuration options for 3D Secure. Requires [3D Secure](https://developers.braintreepayments.com/guides/3d-secure/overview) to be enabled in the Braintree gateway. The liability shift information will be included on the {@link Dropin#requestPaymentMethod|requestPaymentMethod payload}.\n *\n * @param {string} amount The amount to verify with 3D Secure.\n */\n\n/** @typedef {object} paypalCreateOptions The configuration options for PayPal and PayPalCredit. For a full list of options see the [PayPal Checkout client reference options](http://braintree.github.io/braintree-web/{@pkg bt-web-version}/PayPalCheckout.html#createPayment).\n *\n * @param {string} flow Either `checkout` for a one-time [Checkout with PayPal](https://developers.braintreepayments.com/guides/paypal/checkout-with-paypal/javascript/v3) flow or `vault` for a [Vault flow](https://developers.braintreepayments.com/guides/paypal/vault/javascript/v3). Required when using PayPal or PayPal Credit.\n * @param {string|number} [amount] The amount of the transaction. Required when using the Checkout flow.\n * @param {string} [currency] The currency code of the amount, such as `USD`. Required when using the Checkout flow.\n * @param {string} [buttonStyle] The style object to apply to the PayPal button. Button customization includes color, shape, size, and label. The options [found here](https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/customize-button/#button-styles) are available.\n * @param {boolean} [commit] The user action to show on the PayPal review page. If true, a `Pay Now` button will be shown. If false, a `Continue` button will be shown.\n */\n\n/** @typedef {object} applePayCreateOptions The configuration options for Apple Pay.\n *\n * @param {string} [buttonStyle=black] Configures the Apple Pay button style. Valid values are `black`, `white`, `white-outline`.\n * @param {string} displayName The canonical name for your store. Use a non-localized name. This parameter should be a UTF-8 string that is a maximum of 128 characters. The system may display this name to the user.\n * @param {number} [applePaySessionVersion=2] The [version of the `ApplePaySession`](https://developer.apple.com/documentation/apple_pay_on_the_web/apple_pay_on_the_web_version_history) to use. It's recomended to use the lowest version that contains all the features you need for your checkout to maximize compatiblity.\n * @param {external:ApplePayPaymentRequest} paymentRequest The payment request details to apply on top of those from Braintree.\n */\n\n/** @typedef {object} googlePayCreateOptions The configuration options for Google Pay. Additional options from the few listed here are available, many have default values applied based on the settings found in the Braintree Gateway. For more information, see [Google's Documentation](https://developers.google.com/pay/api/web/object-reference#request-objects).\n *\n * @param {string} merchantId The ID provided by Google for processing transactions in production. Not necessary for testing in sandbox.\n * @param {string} [googlePayVersion=1] The version of the Google Pay API to use. Defaults to 1, but 2 can be passed in.\n * @param {external:GooglePayTransactionInfo} transactionInfo The transaction details necessary for processing the payment.\n * @param {external:GooglePayButtonOptions} [button] The button options for configuring the look of the Google Pay button. The `onClick` property cannot be overwritten.\n */\n\n/**\n * @typedef {object} ApplePayPaymentRequest An [Apple Pay Payment Request object](https://developer.apple.com/reference/applepayjs/1916082-applepay_js_data_types/paymentrequest).\n * @external ApplePayPaymentRequest\n * @see {@link https://developer.apple.com/reference/applepayjs/1916082-applepay_js_data_types/paymentrequest PaymentRequest}\n */\n\n/**\n * @typedef {object} GooglePayTransactionInfo A [Google Pay TransactionInfo object](https://developers.google.com/pay/api/web/object-reference#TransactionInfo).\n * @external GooglePayTransactionInfo\n * @see {@link https://developers.google.com/pay/api/web/object-reference#TransactionInfo TransactionInfo}\n */\n\n/**\n * @typedef {object} GooglePayButtonOptions A [Google Pay ButtonOptions object](https://developers.google.com/pay/api/web/reference/object#ButtonOptions).\n * @external GooglePayButtonOptions\n * @see {@link https://developers.google.com/pay/api/web/reference/object#ButtonOptions ButtonOptions}\n */\n\n/** @typedef {object|boolean} venmoCreateOptions The configuration options for Venmo. If `true` is passed instead of a configuration object, the default settings listed will be used.\n *\n * @param {boolean} [allowNewBrowserTab=true] If false, it restricts supported browsers to those that can app switch to the Venmo app without opening a new tab.\n */\n\n/**\n * @static\n * @function create\n * @description This function is the entry point for `braintree.dropin`. It is used for creating {@link Dropin} instances.\n * @param {object} options Object containing all {@link Dropin} options:\n * @param {string} options.authorization A [tokenization key](https://developers.braintreepayments.com/guides/authorization/tokenization-key/javascript/v3) or a [client token](https://developers.braintreepayments.com/guides/authorization/client-token). If authorization is a client token created with a [customer ID](https://developers.braintreepayments.com/guides/drop-in/javascript/v3#customer-id), Drop-in will render saved payment methods and automatically store any newly-added payment methods in their Vault record.\n * @param {string|HTMLElement} options.container A reference to an empty element, such as a `<div>`, where Drop-in will be included on your page or the selector for the empty element. e.g. `#dropin-container`.\n * @param {string} options.selector Deprecated: Now an alias for `options.container`.\n * @param {string} [options.locale=`en_US`] Use this option to change the language, links, and terminology used throughout Drop-in. Supported locales include:\n * `da_DK`,\n * `de_DE`,\n * `en_AU`,\n * `en_GB`,\n * `en_US`,\n * `es_ES`,\n * `fr_CA`,\n * `fr_FR`,\n * `id_ID`,\n * `it_IT`,\n * `ja_JP`,\n * `ko_KR`,\n * `nl_NL`,\n * `no_NO`,\n * `pl_PL`,\n * `pt_BR`,\n * `pt_PT`,\n * `ru_RU`,\n * `sv_SE`,\n * `th_TH`,\n * `zh_CN`,\n * `zh_HK`,\n * `zh_TW`.\n *\n * @param {object} [options.translations] To use your own translations, pass an object with the strings you wish to replace. This object must use the same structure as the object used internally for supported translations, which can be found [here](https://github.com/braintree/braintree-web-drop-in/blob/master/src/translations/en_US.js). Any strings that are not included will be those from the provided `locale` or `en_US` if no `locale` is provided. See below for an example of creating Drop-in with custom translations.\n * @param {array} [options.paymentOptionPriority] Use this option to indicate the order in which enabled payment options should appear when multiple payment options are enabled. By default, payment options will appear in this order: `['card', 'paypal', 'paypalCredit', 'venmo', 'applePay']`. Payment options omitted from this array will not be offered to the customer.\n *\n * @param {object} [options.card] The configuration options for cards. See [`cardCreateOptions`](#~cardCreateOptions) for all `card` options. If this option is omitted, cards will still appear as a payment option. To remove cards as a payment option, use `paymentOptionPriority`.\n * @param {object} [options.paypal] The configuration options for PayPal. To include a PayPal option in your Drop-in integration, include the `paypal` parameter and [enable PayPal in the Braintree Control Panel](https://developers.braintreepayments.com/guides/paypal/testing-go-live/#go-live). To test in Sandbox, you will need to [link a PayPal sandbox test account to your Braintree sandbox account](https://developers.braintreepayments.com/guides/paypal/testing-go-live/#linked-paypal-testing).\n *\n * Some of the PayPal configuration options are listed [here](#~paypalCreateOptions), but for a full list see the [PayPal Checkout client reference options](http://braintree.github.io/braintree-web/{@pkg bt-web-version}/PayPalCheckout.html#createPayment).\n *\n * PayPal is not [supported in Internet Explorer versions lower than 11](https://developer.paypal.com/docs/checkout/reference/faq/#which-browsers-does-paypal-checkout-support).\n *\n * @param {object} [options.paypalCredit] The configuration options for PayPal Credit. To include a PayPal Credit option in your Drop-in integration, include the `paypalCredit` parameter and [enable PayPal in the Braintree Control Panel](https://developers.braintreepayments.com/guides/paypal/testing-go-live/#go-live).\n *\n * Some of the PayPal Credit configuration options are listed [here](#~paypalCreateOptions), but for a full list see the [PayPal Checkout client reference options](http://braintree.github.io/braintree-web/{@pkg bt-web-version}/PayPalCheckout.html#createPayment). For more information on PayPal Credit, see the [Braintree Developer Docs](https://developers.braintreepayments.com/guides/paypal/paypal-credit/javascript/v3).\n *\n * PayPal Credit is not [supported in Internet Explorer versions lower than 11](https://developer.paypal.com/docs/checkout/reference/faq/#which-browsers-does-paypal-checkout-support).\n *\n * @param {object|boolean} [options.venmo] The configuration options for Pay with Venmo. To include a Venmo option in your Drop-in integration, include the `venmo` parameter and [follow the documentation for setting up Venmo in the Braintree control panel](https://articles.braintreepayments.com/guides/payment-methods/venmo#setup). If a user's browser does not support Venmo, the Venmo option will not be rendered.\n *\n * See [`venmoCreateOptions`](#~venmoCreateOptions) for `venmo` options.\n *\n * @param {object} [options.applePay] The configuration options for Apple Pay. To include an Apple Pay option in your Drop-in integration, include the `applePay` parameter and [enable Apple Pay in the Braintree Control Panel](https://developers.braintreepayments.com/guides/apple-pay/configuration/javascript/v3). If a user's browser does not support Apple Pay, the Apple Pay option will not be rendered. See [Apple's documentation](https://support.apple.com/en-us/HT201469) for browser and device support.\n *\n * See [`applePayCreateOptions`](#~applePayCreateOptions) for `applePay` options.\n *\n * @param {object} [options.googlePay] The configuration options for Google Pay. To include a Google Pay option in your Drop-in integration, include the `googlePay` parameter and [enable Google Pay in the Braintree Control Panel](https://developers.braintreepayments.com/guides/google-pay/configuration/javascript/v3). If a user's browser does not support Google Pay, the Google Pay option will not be rendered. See [Google's documentation](https://developers.google.com/pay/api/web/test-and-deploy) for browser and device support.\n *\n * See [`googlePayCreateOptions`](#~googlePayCreateOptions) for `googlePay` options.\n *\n * @param {object} [options.dataCollector] The configuration options for data collector. See [`dataCollectorOptions`](#~dataCollectorOptions) for all `dataCollector` options. If Data Collector is configured and fails to load, Drop-in creation will fail.\n *\n * @param {object} [options.threeDSecure] The configuration options for 3D Secure. See [`threeDSecureOptions`](#~threeDSecureOptions) for all `threeDSecure` options. If 3D Secure is configured and fails to load, Drop-in creation will fail.\n *\n * @param {boolean} [options.vaultManager=false] Whether or not to allow a customer to delete saved payment methods when used with a [client token with a customer id](https://developers.braintreepayments.com/reference/request/client-token/generate/#customer_id). *Note:* Deleting a payment method from Drop-in will permanently delete the payment method, so this option is not recomended for merchants using Braintree's recurring billing system. This feature is not supported in Internet Explorer 9.\n *\n * @param {boolean} [options.preselectVaultedPaymentMethod=true] Whether or not to initialize Drop-in with a vaulted payment method pre-selected. Only applicable when using a [client token with a customer id](https://developers.braintreepayments.com/reference/request/client-token/generate/#customer_id) and a customer with saved payment methods.\n *\n * @param {function} [callback] The second argument, `data`, is the {@link Dropin} instance. Returns a promise if no callback is provided.\n * @returns {void|Promise} Returns a promise if no callback is provided.\n * @example\n * <caption>A full example of accepting credit cards with callback API</caption>\n * <!DOCTYPE html>\n * <html lang=\"en\">\n *   <head>\n *     <meta charset=\"UTF-8\">\n *     <title>Checkout</title>\n *   </head>\n *   <body>\n *     <div id=\"dropin-container\"></div>\n *     <button id=\"submit-button\">Purchase</button>\n *\n *     <script src=\"https://js.braintreegateway.com/web/dropin/{@pkg version}/js/dropin.min.js\"></script>\n *\n *     <script>\n *       var submitButton = document.querySelector('#submit-button');\n *\n *       braintree.dropin.create({\n *         authorization: 'CLIENT_AUTHORIZATION',\n *         container: '#dropin-container'\n *       }, function (err, dropinInstance) {\n *         if (err) {\n *           // Handle any errors that might've occurred when creating Drop-in\n *           console.error(err);\n *           return;\n *         }\n *         submitButton.addEventListener('click', function () {\n *           dropinInstance.requestPaymentMethod(function (err, payload) {\n *             if (err) {\n *               // Handle errors in requesting payment method\n *             }\n *\n *             // Send payload.nonce to your server\n *           });\n *         });\n *       });\n *     </script>\n *   </body>\n * </html>\n * @example\n * <caption>A full example of accepting credit cards with promise API</caption>\n * <!DOCTYPE html>\n * <html lang=\"en\">\n *   <head>\n *     <meta charset=\"UTF-8\">\n *     <title>Checkout</title>\n *   </head>\n *   <body>\n *     <div id=\"dropin-container\"></div>\n *     <button id=\"submit-button\">Purchase</button>\n *\n *     <script src=\"https://js.braintreegateway.com/web/dropin/{@pkg version}/js/dropin.min.js\"></script>\n *\n *     <script>\n *       var submitButton = document.querySelector('#submit-button');\n *\n *       braintree.dropin.create({\n *         authorization: 'CLIENT_AUTHORIZATION',\n *         container: '#dropin-container'\n *       }).then(function (dropinInstance) {\n *         submitButton.addEventListener('click', function () {\n *           dropinInstance.requestPaymentMethod().then(function (payload) {\n *             // Send payload.nonce to your server\n *           }).catch(function (err) {\n *             // Handle errors in requesting payment method\n *           });\n *         });\n *       }).catch(function (err) {\n *         // Handle any errors that might've occurred when creating Drop-in\n *         console.error(err);\n *       });\n *     </script>\n *   </body>\n * </html>\n * @example\n * <caption>Setting up a Drop-in instance to accept credit cards, PayPal, PayPal Credit, Venmo, and Apple Pay</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   applePay: {\n *     displayName: 'Merchant Name',\n *     paymentRequest: {\n   *     label: 'Localized Name',\n *       total: '10.00'\n *     }\n *   },\n *   paypal: {\n *     flow: 'checkout',\n *     amount: '10.00',\n *     currency: 'USD'\n *   },\n *  paypalCredit: {\n *    flow: 'checkout',\n *    amount: '10.00',\n *    currency: 'USD'\n *   },\n *   venmo: true\n * }, function (err, dropinInstance) {\n *   // Set up a handler to request a payment method and\n *   // submit the payment method nonce to your server\n * });\n * @example\n * <caption>Setting up a Drop-in instance to accept Venmo with restricted browser support</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   venmo: {\n *     allowNewBrowserTab: false\n *   }\n * }, function (err, dropinInstance) {\n *   // Set up a handler to request a payment method and\n *   // submit the payment method nonce to your server\n * });\n *\n * @example\n * <caption>Submitting the payment method nonce to the server using a form</caption>\n * <!DOCTYPE html>\n * <html lang=\"en\">\n *   <head>\n *     <meta charset=\"UTF-8\">\n *     <title>Checkout</title>\n *   </head>\n *   <body>\n *     <form id=\"payment-form\" action=\"/\" method=\"post\">\n *       <div id=\"dropin-container\"></div>\n *       <input type=\"submit\" value=\"Purchase\"></input>\n *       <input type=\"hidden\" id=\"nonce\" name=\"payment_method_nonce\"></input>\n *     </form>\n *\n *     <script src=\"https://js.braintreegateway.com/web/dropin/{@pkg version}/js/dropin.min.js\"></script>\n *\n *     <script>\n *       var form = document.querySelector('#payment-form');\n *       var nonceInput = document.querySelector('#nonce');\n *\n *       braintree.dropin.create({\n *         authorization: 'CLIENT_AUTHORIZATION',\n *         container: '#dropin-container'\n *       }, function (err, dropinInstance) {\n *         if (err) {\n *           // Handle any errors that might've occurred when creating Drop-in\n *           console.error(err);\n *           return;\n *         }\n *         form.addEventListener('submit', function (event) {\n *           event.preventDefault();\n *\n *           dropinInstance.requestPaymentMethod(function (err, payload) {\n *             if (err) {\n *               // Handle errors in requesting payment method\n *               return;\n *             }\n *\n *             // Send payload.nonce to your server\n *             nonceInput.value = payload.nonce;\n *             form.submit();\n *           });\n *         });\n *       });\n *     </script>\n *   </body>\n * </html>\n *\n * @example\n * <caption>Use your own translations</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   translations: {\n *     payingWith: 'You are paying with {{paymentSource}}',\n *     chooseAnotherWayToPay: 'My custom chooseAnotherWayToPay string',\n *     // Any other custom translation strings\n *   }\n * }, callback);\n *\n * @example\n * <caption>Customizing Drop-in with card form overrides</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   card: {\n *     overrides: {\n *       fields: {\n *         number: {\n *           placeholder: '1111 1111 1111 1111' // Update the number field placeholder\n *         },\n *         postalCode: {\n *           minlength: 5 // Set the minimum length of the postal code field\n *         },\n *         cvv: null // Remove the CVV field from your form\n *       },\n *       styles: {\n *         input: {\n *           'font-size': '18px' // Change the font size for all inputs\n *         },\n *         ':focus': {\n *           color: 'red' // Change the focus color to red for all inputs\n *         }\n *       }\n *     }\n *   }\n * }, callback);\n *\n * @example\n * <caption>Mask Card Inputs</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   card: {\n *     overrides: {\n *       fields: {\n *         number: {\n *           maskInput: {\n *             showLastFour: true\n *           }\n *         },\n *         cvv: {\n *           maskInput: true\n *         }\n *       }\n *     }\n *   }\n * }, callback);\n *\n * @example\n * <caption>Including a cardholder name field</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   card: {\n *     cardholderName: true\n *   }\n * }, callback);\n *\n * @example\n * <caption>Including a required cardholder name field</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   card: {\n *     cardholderName: {\n *       required: true\n *     }\n *   }\n * }, callback);\n *\n * @example\n * <caption>Enabling 3D Secure</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   threeDSecure: {\n *     amount: '10.00'\n *   }\n * }, callback);\n *\n * @example\n * <caption>Enabled Vault Manager</caption>\n * braintree.dropin.create({\n *   authorization: 'CLIENT_AUTHORIZATION',\n *   container: '#dropin-container',\n *   vaultManager: true\n * }, callback);\n */\n\nfunction create(options) {\n  if (!options.authorization) {\n    return Promise.reject(new DropinError('options.authorization is required.'));\n  }\n\n  return client.create({\n    authorization: options.authorization\n  }).catch(function (err) {\n    return Promise.reject(new DropinError({\n      message: 'There was an error creating Drop-in.',\n      braintreeWebError: err\n    }));\n  }).then(function (clientInstance) {\n    clientInstance = setAnalyticsIntegration(clientInstance);\n\n    if (clientInstance.getConfiguration().authorizationType === 'TOKENIZATION_KEY') {\n      analytics.sendEvent(clientInstance, 'started.tokenization-key');\n    } else {\n      analytics.sendEvent(clientInstance, 'started.client-token');\n    }\n\n    return new Promise(function (resolve, reject) {\n      new Dropin({\n        merchantConfiguration: options,\n        client: clientInstance\n      })._initialize(function (err, instance) {\n        if (err) {\n          reject(err);\n\n          return;\n        }\n\n        resolve(instance);\n      });\n    });\n  });\n}\n\nfunction setAnalyticsIntegration(clientInstance) {\n  var configuration = clientInstance.getConfiguration();\n\n  configuration.analyticsMetadata.integration = constants.INTEGRATION;\n  configuration.analyticsMetadata.integrationType = constants.INTEGRATION;\n  configuration.analyticsMetadata.dropinVersion = VERSION;\n\n  clientInstance.getConfiguration = function () {\n    return configuration;\n  };\n\n  return clientInstance;\n}\n\n// we check for document's existence to support server side rendering\ncreateFromScriptTag(create, typeof document !== 'undefined' && document.querySelector('script[data-braintree-dropin-authorization]'));\n\nmodule.exports = {\n  create: wrapPromise(create),\n  /**\n   * @description The current version of Drop-in, i.e. `{@pkg version}`.\n   * @type {string}\n   */\n  VERSION: VERSION\n};\n\n},{\"./constants\":125,\"./dropin\":127,\"./lib/analytics\":130,\"./lib/create-from-script-tag\":133,\"./lib/dropin-error\":135,\"./lib/promise\":143,\"@braintree/wrap-promise\":26,\"braintree-web/client\":35}],129:[function(require,module,exports){\n'use strict';\n\nfunction addSelectionEventHandler(element, func) {\n  element.addEventListener('click', func);\n  element.addEventListener('keyup', function (event) {\n    if (event.keyCode === 13) {\n      func();\n    }\n  });\n}\n\nmodule.exports = addSelectionEventHandler;\n\n},{}],130:[function(require,module,exports){\n'use strict';\n\nvar atob = require('./polyfill').atob;\nvar constants = require('../constants');\nvar braintreeClientVersion = require('braintree-web/client').VERSION;\n\nfunction _millisToSeconds(millis) {\n  return Math.floor(millis / 1000);\n}\n\nfunction sendAnalyticsEvent(client, kind, callback) {\n  var configuration = client.getConfiguration();\n  var analyticsRequest = client._request;\n  var timestamp = _millisToSeconds(Date.now());\n  var url = configuration.gatewayConfiguration.analytics.url;\n  var data = {\n    analytics: [{\n      kind: constants.ANALYTICS_PREFIX + kind,\n      timestamp: timestamp\n    }],\n    _meta: configuration.analyticsMetadata,\n    braintreeLibraryVersion: braintreeClientVersion\n  };\n\n  if (configuration.authorizationType === 'TOKENIZATION_KEY') {\n    data.tokenizationKey = configuration.authorization;\n  } else {\n    data.authorizationFingerprint = JSON.parse(atob(configuration.authorization)).authorizationFingerprint;\n  }\n\n  analyticsRequest({\n    url: url,\n    method: 'post',\n    data: data,\n    timeout: constants.ANALYTICS_REQUEST_TIMEOUT_MS\n  }, callback);\n}\n\nmodule.exports = {\n  sendEvent: sendAnalyticsEvent\n};\n\n},{\"../constants\":125,\"./polyfill\":142,\"braintree-web/client\":35}],131:[function(require,module,exports){\narguments[4][69][0].apply(exports,arguments)\n},{\"dup\":69}],132:[function(require,module,exports){\n'use strict';\n\nvar isIe9 = require('@braintree/browser-detection/is-ie9');\nvar isIe10 = require('@braintree/browser-detection/is-ie10');\n\nmodule.exports = {\n  isIe9: isIe9,\n  isIe10: isIe10\n};\n\n},{\"@braintree/browser-detection/is-ie10\":9,\"@braintree/browser-detection/is-ie9\":11}],133:[function(require,module,exports){\n'use strict';\n\nvar analytics = require('./analytics');\nvar find = require('./find-parent-form');\nvar uuid = require('./uuid');\nvar DropinError = require('./dropin-error');\nvar kebabCaseToCamelCase = require('./kebab-case-to-camel-case');\nvar WHITELISTED_DATA_ATTRIBUTES = [\n  'locale',\n  'payment-option-priority',\n\n  'data-collector.kount',\n  'data-collector.paypal',\n\n  // camelcase version was accidentally used initially.\n  // we add the kebab case version to match the docs, but\n  // we retain the camelcase version for backwards compatibility\n  'card.cardholderName',\n  'card.cardholderName.required',\n  'card.cardholder-name',\n  'card.cardholder-name.required',\n\n  'paypal.amount',\n  'paypal.currency',\n  'paypal.flow',\n  'paypal.landing-page-type',\n\n  'paypal-credit.amount',\n  'paypal-credit.currency',\n  'paypal-credit.flow',\n  'paypal-credit.landing-page-type'\n];\n\nfunction injectHiddenInput(name, value, form) {\n  var input = form.querySelector('[name=\"' + name + '\"]');\n\n  if (!input) {\n    input = document.createElement('input');\n    input.type = 'hidden';\n    input.name = name;\n    form.appendChild(input);\n  }\n\n  input.value = value;\n}\n\nfunction addCompositeKeyValuePairToObject(obj, key, value) {\n  var decomposedKeys = key.split('.');\n  var topLevelKey = kebabCaseToCamelCase(decomposedKeys[0]);\n\n  if (decomposedKeys.length === 1) {\n    obj[topLevelKey] = deserialize(value);\n  } else {\n    obj[topLevelKey] = obj[topLevelKey] || {};\n    addCompositeKeyValuePairToObject(obj[topLevelKey], decomposedKeys.slice(1).join('.'), value);\n  }\n}\n\nfunction deserialize(value) {\n  try {\n    return JSON.parse(value);\n  } catch (e) {\n    return value;\n  }\n}\n\nfunction createFromScriptTag(createFunction, scriptTag) {\n  var authorization, container, createOptions, form;\n\n  if (!scriptTag) {\n    return;\n  }\n\n  authorization = scriptTag.getAttribute('data-braintree-dropin-authorization');\n\n  if (!authorization) {\n    throw new DropinError('Authorization not found in data-braintree-dropin-authorization attribute');\n  }\n\n  container = document.createElement('div');\n  container.id = 'braintree-dropin-' + uuid();\n\n  form = find.findParentForm(scriptTag);\n\n  if (!form) {\n    throw new DropinError('No form found for script tag integration.');\n  }\n\n  form.addEventListener('submit', function (event) {\n    event.preventDefault();\n  });\n\n  scriptTag.parentNode.insertBefore(container, scriptTag);\n\n  createOptions = {\n    authorization: authorization,\n    container: container\n  };\n\n  WHITELISTED_DATA_ATTRIBUTES.forEach(function (compositeKey) {\n    var value = scriptTag.getAttribute('data-' + compositeKey);\n\n    if (value == null) {\n      return;\n    }\n\n    addCompositeKeyValuePairToObject(createOptions, compositeKey, value);\n  });\n\n  createFunction(createOptions).then(function (instance) {\n    analytics.sendEvent(instance._client, 'integration-type.script-tag');\n    form.addEventListener('submit', function () {\n      instance.requestPaymentMethod(function (requestPaymentError, payload) {\n        if (requestPaymentError) {\n          return;\n        }\n\n        injectHiddenInput('payment_method_nonce', payload.nonce, form);\n\n        if (payload.deviceData) {\n          injectHiddenInput('device_data', payload.deviceData, form);\n        }\n\n        form.submit();\n      });\n    });\n  });\n}\n\nmodule.exports = createFromScriptTag;\n\n},{\"./analytics\":130,\"./dropin-error\":135,\"./find-parent-form\":137,\"./kebab-case-to-camel-case\":141,\"./uuid\":148}],134:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar constants = require('../constants');\nvar analytics = require('./analytics');\nvar assets = require('@braintree/asset-loader');\nvar Promise = require('./promise');\n\nfunction DataCollector(config) {\n  this._config = config;\n}\n\nDataCollector.prototype.initialize = function () {\n  var self = this;\n\n  return Promise.resolve().then(function () {\n    var braintreeWebVersion;\n\n    if (global.braintree && global.braintree.dataCollector) {\n      return Promise.resolve();\n    }\n\n    braintreeWebVersion = self._config.client.getVersion();\n\n    return assets.loadScript({\n      src: 'https://js.braintreegateway.com/web/' + braintreeWebVersion + '/js/data-collector.min.js',\n      id: constants.DATA_COLLECTOR_SCRIPT_ID\n    });\n  }).then(function () {\n    return global.braintree.dataCollector.create(self._config);\n  }).then(function (instance) {\n    self._instance = instance;\n  }).catch(function (err) {\n    analytics.sendEvent(self._config.client, 'data-collector.setup-failed');\n    // log the Data Collector setup error\n    // but do not prevent Drop-in from loading\n    self.log(err);\n  });\n};\n\nDataCollector.prototype.log = function (message) {\n  console.log(message);\n};\n\nDataCollector.prototype.getDeviceData = function () {\n  if (!this._instance) {\n    return '';\n  }\n\n  return this._instance.deviceData;\n};\n\nDataCollector.prototype.teardown = function () {\n  if (!this._instance) {\n    return Promise.resolve();\n  }\n\n  return this._instance.teardown();\n};\n\nmodule.exports = DataCollector;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../constants\":125,\"./analytics\":130,\"./promise\":143,\"@braintree/asset-loader\":1}],135:[function(require,module,exports){\n'use strict';\n\nfunction isBraintreeWebError(err) {\n  return err.name === 'BraintreeError';\n}\n\nfunction DropinError(err) {\n  this.name = 'DropinError';\n\n  if (typeof err === 'string') {\n    this.message = err;\n  } else {\n    this.message = err.message;\n  }\n\n  if (isBraintreeWebError(err)) {\n    this._braintreeWebError = err;\n  } else {\n    this._braintreeWebError = err.braintreeWebError;\n  }\n}\n\nDropinError.prototype = Object.create(Error.prototype);\nDropinError.prototype.constructor = DropinError;\n\nmodule.exports = DropinError;\n\n},{}],136:[function(require,module,exports){\narguments[4][86][0].apply(exports,arguments)\n},{\"dup\":86}],137:[function(require,module,exports){\n'use strict';\n\nfunction findParentForm(element) {\n  var parentNode = element.parentNode;\n\n  if (!parentNode || parentNode.nodeName === 'FORM') {\n    return parentNode;\n  }\n\n  return findParentForm(parentNode);\n}\n\nmodule.exports = {\n  findParentForm: findParentForm\n};\n\n},{}],138:[function(require,module,exports){\n'use strict';\n\nvar atob = require('./polyfill').atob;\n\nmodule.exports = function (client) {\n  var authorizationFingerprint;\n  var configuration = client.getConfiguration();\n\n  if (configuration.authorizationType !== 'TOKENIZATION_KEY') {\n    authorizationFingerprint = JSON.parse(atob(configuration.authorization)).authorizationFingerprint;\n\n    return !authorizationFingerprint || authorizationFingerprint.indexOf('customer_id=') === -1;\n  }\n\n  return true;\n};\n\n},{\"./polyfill\":142}],139:[function(require,module,exports){\n(function (global){\n'use strict';\n\nfunction isHTTPS() {\n  return global.location.protocol === 'https:';\n}\n\nmodule.exports = {\n  isHTTPS: isHTTPS\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],140:[function(require,module,exports){\n(function (global){\n'use strict';\n\nmodule.exports = function (win) {\n  win = win || global;\n\n  return Boolean(win.document.characterSet && win.document.characterSet.toLowerCase() === 'utf-8');\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],141:[function(require,module,exports){\n'use strict';\n\nfunction kebabCaseToCamelCase(kebab) {\n  var parts = kebab.split('-');\n  var first = parts.shift();\n  var capitalizedParts = parts.map(function (part) {\n    return part.charAt(0).toUpperCase() + part.substring(1);\n  });\n\n  return [first].concat(capitalizedParts).join('');\n}\n\nmodule.exports = kebabCaseToCamelCase;\n\n},{}],142:[function(require,module,exports){\n(function (global){\n'use strict';\n/* eslint-disable no-mixed-operators */\n\nvar atobNormalized = typeof global.atob === 'function' ? global.atob : atob;\n\nfunction atob(base64String) {\n  var a, b, c, b1, b2, b3, b4, i;\n  var base64Matcher = new RegExp('^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})([=]{1,2})?$');\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n  var result = '';\n\n  if (!base64Matcher.test(base64String)) {\n    throw new Error('Non base64 encoded input passed to window.atob polyfill');\n  }\n\n  i = 0;\n  do {\n    b1 = characters.indexOf(base64String.charAt(i++));\n    b2 = characters.indexOf(base64String.charAt(i++));\n    b3 = characters.indexOf(base64String.charAt(i++));\n    b4 = characters.indexOf(base64String.charAt(i++));\n\n    a = (b1 & 0x3F) << 2 | b2 >> 4 & 0x3;\n    b = (b2 & 0xF) << 4 | b3 >> 2 & 0xF;\n    c = (b3 & 0x3) << 6 | b4 & 0x3F;\n\n    result += String.fromCharCode(a) + (b ? String.fromCharCode(b) : '') + (c ? String.fromCharCode(c) : '');\n  } while (i < base64String.length);\n\n  return result;\n}\n\nmodule.exports = {\n  atob: function (base64String) {\n    return atobNormalized.call(global, base64String);\n  },\n  _atob: atob\n};\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],143:[function(require,module,exports){\narguments[4][95][0].apply(exports,arguments)\n},{\"dup\":95,\"promise-polyfill\":121}],144:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function (string) {\n  if (typeof string !== 'string') {\n    return '';\n  }\n\n  return string\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n},{}],145:[function(require,module,exports){\n'use strict';\n\nmodule.exports = function () {\n  var el = document.createElement('div');\n  var prop = 'flex-basis: 1px';\n  var prefixes = [\n    '-webkit-',\n    '-moz-',\n    '-ms-',\n    '-o-',\n    ''\n  ];\n\n  prefixes.forEach(function (prefix) {\n    el.style.cssText += prefix + prop;\n  });\n\n  return Boolean(el.style.length);\n};\n\n},{}],146:[function(require,module,exports){\n'use strict';\n\n\nvar classList = require('@braintree/class-list');\nvar threeDSecure = require('braintree-web/three-d-secure');\nvar Promise = require('./promise');\n\nfunction ThreeDSecure(client, merchantConfiguration, cardVerificationString) {\n  this._client = client;\n  this._config = merchantConfiguration;\n  this._modal = this._setupModal(cardVerificationString);\n}\n\nThreeDSecure.prototype.initialize = function () {\n  var self = this;\n\n  return threeDSecure.create({\n    client: this._client\n  }).then(function (instance) {\n    self._instance = instance;\n  });\n};\n\nThreeDSecure.prototype.verify = function (nonce) {\n  var self = this;\n\n  this._revealModal();\n\n  return Promise.all([\n    this._waitForThreeDSecure(),\n    this._instance.verifyCard({\n      nonce: nonce,\n      amount: this._config.amount,\n      showLoader: false,\n      addFrame: function (err, iframe) {\n        var modalBody = self._modal.querySelector('.braintree-three-d-secure__modal-body');\n\n        iframe.onload = function () {\n          classList.add(modalBody, 'braintree-three-d-secure__frame-active');\n        };\n\n        modalBody.appendChild(iframe);\n      },\n      removeFrame: function () {\n        self._cleanupModal();\n      }\n    }).then(function (payload) {\n      self._resolveThreeDSecure();\n\n      return payload;\n    })\n  ]).then(function (result) {\n    self._cleanupModal();\n\n    return result[1];\n  }).catch(function (err) {\n    self._cleanupModal();\n\n    if (err.type === 'THREE_D_SECURE_CANCELLED') {\n      return Promise.resolve(err.payload);\n    }\n\n    return Promise.reject(err);\n  });\n};\n\nThreeDSecure.prototype.cancel = function () {\n  var self = this;\n\n  return this._instance.cancelVerifyCard().then(function (payload) {\n    self._rejectThreeDSecure({\n      type: 'THREE_D_SECURE_CANCELLED',\n      payload: {\n        nonce: payload.nonce,\n        liabilityShifted: payload.liabilityShifted,\n        liabilityShiftPossible: payload.liabilityShiftPossible\n      }\n    });\n  }).catch(function () {\n    // only reason this would reject\n    // is if there is no verification in progress\n    // so we just swallow the error\n  }).then(function () {\n    self._cleanupModal();\n  });\n};\n\nThreeDSecure.prototype.updateConfiguration = function (key, value) {\n  this._config[key] = value;\n};\n\nThreeDSecure.prototype.teardown = function () {\n  return Promise.all([\n    this._cleanupModal(),\n    this._instance.teardown()\n  ]);\n};\n\nThreeDSecure.prototype._cleanupModal = function () {\n  var iframe = this._modal.querySelector('iframe');\n  var self = this;\n\n  classList.remove(this._modal.querySelector('.braintree-three-d-secure__modal'), 'braintree-three-d-secure__frame_visible');\n  classList.remove(this._modal.querySelector('.braintree-three-d-secure__backdrop'), 'braintree-three-d-secure__frame_visible');\n\n  if (iframe && iframe.parentNode) {\n    iframe.parentNode.removeChild(iframe);\n  }\n\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      if (self._modal.parentNode) {\n        self._modal.parentNode.removeChild(self._modal);\n      }\n\n      resolve();\n    }, 300);\n  });\n};\n\nThreeDSecure.prototype._setupModal = function (cardVerificationString) {\n  var self = this;\n  var modal = document.createElement('div');\n\n  modal.innerHTML = \"<div class=\\\"braintree-three-d-secure\\\">\\n  <div class=\\\"braintree-three-d-secure__backdrop\\\"></div>\\n  <div class=\\\"braintree-three-d-secure__modal\\\">\\n    <div data-braintree-id=\\\"three-d-secure-loading-container\\\" class=\\\"braintree-loader__container\\\">\\n      <div data-braintree-id=\\\"three-d-secure-loading-indicator\\\" class=\\\"braintree-loader__indicator\\\">\\n        <svg width=\\\"14\\\" height=\\\"16\\\" class=\\\"braintree-loader__lock\\\">\\n          <use xlink:href=\\\"#iconLockLoader\\\"></use>\\n        </svg>\\n      </div>\\n    </div>\\n    <div class=\\\"braintree-three-d-secure__modal-header\\\">\\n      {{cardVerification}}\\n      <div class=\\\"braintree-three-d-secure__modal-close\\\">\\n        <svg width=\\\"21\\\" height=\\\"21\\\">\\n          <use xlink:href=\\\"#iconClose\\\"></use>\\n        </svg>\\n      </div>\\n    </div>\\n    <div class=\\\"braintree-three-d-secure__modal-body\\\">\\n    </div>\\n  </div>\\n</div>\\n\"\n    .replace('{{cardVerification}}', cardVerificationString);\n\n  modal.querySelector('.braintree-three-d-secure__modal-close').addEventListener('click', function () {\n    self.cancel();\n  });\n\n  return modal;\n};\n\nThreeDSecure.prototype._waitForThreeDSecure = function () {\n  var self = this;\n\n  return new Promise(function (resolve, reject) {\n    self._resolveThreeDSecure = resolve;\n    self._rejectThreeDSecure = reject;\n  });\n};\n\nThreeDSecure.prototype._revealModal = function () {\n  document.body.appendChild(this._modal);\n  classList.add(this._modal.querySelector('.braintree-three-d-secure__backdrop'), 'braintree-three-d-secure__frame_visible');\n  setTimeout(function () {\n    classList.add(this._modal.querySelector('.braintree-three-d-secure__modal'), 'braintree-three-d-secure__frame_visible');\n  }.bind(this), 10);\n};\n\nmodule.exports = ThreeDSecure;\n\n},{\"./promise\":143,\"@braintree/class-list\":18,\"braintree-web/three-d-secure\":105}],147:[function(require,module,exports){\n'use strict';\n\nvar browserDetection = require('./browser-detection');\n\nfunction isHidden(element) {\n  if (!element) { // no parentNode, so nothing containing the element is hidden\n    return false;\n  }\n\n  if (element.style.display === 'none') {\n    return true;\n  }\n\n  return isHidden(element.parentNode);\n}\n\nfunction onTransitionEnd(element, propertyName, callback) {\n  if (browserDetection.isIe9() || isHidden(element)) {\n    callback();\n\n    return;\n  }\n\n  function transitionEventListener(event) {\n    if (event.propertyName === propertyName) {\n      element.removeEventListener('transitionend', transitionEventListener);\n      callback();\n    }\n  }\n\n  element.addEventListener('transitionend', transitionEventListener);\n}\n\nmodule.exports = {\n  onTransitionEnd: onTransitionEnd\n};\n\n},{\"./browser-detection\":132}],148:[function(require,module,exports){\n'use strict';\n/* eslint-disable no-mixed-operators */\n\nfunction uuid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0;\n    var v = c === 'x' ? r : r & 0x3 | 0x8;\n\n    return v.toString(16);\n  });\n}\n\nmodule.exports = uuid;\n\n},{}],149:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Betaler med {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Vælg en anden betalingsmetode\",\n  \"chooseAWayToPay\": \"Vælg, hvordan du vil betale\",\n  \"otherWaysToPay\": \"Andre betalingsmetoder\",\n  \"edit\": \"Rediger\",\n  \"doneEditing\": \"Udført\",\n  \"editPaymentMethods\": \"Rediger betalingsmetoder\",\n  \"CreditCardDeleteConfirmationMessage\": \"Vil du slette {{secondaryIdentifier}}-kortet, der slutter på {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Vil du slette PayPal-kontoen {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Er du sikker på, at du vil slette Venmo-kontoen med brugernavnet {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Er du sikker på, at du vil slette denne betalingsmetode?\",\n  \"deleteCancelButton\": \"Annuller\",\n  \"deleteConfirmationButton\": \"Slet\",\n  \"cardVerification\": \"Bekræftelse af kort\",\n  \"fieldEmptyForCvv\": \"Du skal angive kontrolcifrene.\",\n  \"fieldEmptyForExpirationDate\": \"Du skal angive udløbsdatoen.\",\n  \"fieldEmptyForCardholderName\": \"Du skal angive kortindehaverens navn.\",\n  \"fieldTooLongForCardholderName\": \"Kortejerens navn skal være mindre end 256 tegn.\",\n  \"fieldEmptyForNumber\": \"Du skal angive et nummer.\",\n  \"fieldEmptyForPostalCode\": \"Du skal angive et postnummer.\",\n  \"fieldInvalidForCvv\": \"Sikkerhedskoden er ugyldig.\",\n  \"fieldInvalidForExpirationDate\": \"Udløbsdatoen er ugyldig.\",\n  \"fieldInvalidForNumber\": \"Kortnummeret er ugyldigt.\",\n  \"fieldInvalidForPostalCode\": \"Postnummeret er ugyldigt.\",\n  \"genericError\": \"Der opstod en fejl.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Dette betalingskort er allerede en gemt betalingsmetode.\",\n  \"hostedFieldsFailedTokenizationError\": \"Tjek oplysningerne, og prøv igen.\",\n  \"hostedFieldsFieldsInvalidError\": \"Tjek oplysningerne, og prøv igen.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Netværksfejl. Prøv igen.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Betalingskortet blev ikke bekræftet. Kontrollér oplysningerne, og prøv igen.\",\n  \"paypalButtonMustBeUsed\": \"Bruge PayPal-knappen for at fortsætte med din betaling.\",\n  \"paypalAccountTokenizationFailedError\": \"PayPal-kontoen blev ikke tilføjet. Prøv igen.\",\n  \"paypalFlowFailedError\": \"Der kunne ikke oprettes forbindelse til PayPal. Prøv igen.\",\n  \"paypalTokenizationRequestActiveError\": \"PayPal-betalingen er i gang med at blive autoriseret.\",\n  \"venmoCanceledError\": \"Der opstod en fejl. Sørg for, at du har den seneste version af Venmo-appen installeret på din enhed, og at din browser understøtter skift til Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Vi kunne ikke slette betalingsmetode. Prøv igen.\",\n  \"venmoAppFailedError\": \"Venmo-appen blev ikke fundet på din enhed.\",\n  \"unsupportedCardTypeError\": \"Korttypen understøttes ikke. Prøv et andet kort.\",\n  \"applePayTokenizationError\": \"Der opstod en netværksfejl under behandlingen af betalingen med Apple Pay. Prøv igen.\",\n  \"applePayActiveCardError\": \"Knyt et understøttet kort til din Apple Pay-e-pung.\",\n  \"cardholderNameLabel\": \"Kortindehaverens navn\",\n  \"cardNumberLabel\": \"Kortnummer\",\n  \"cvvLabel\": \"Kontrolcifre\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 cifre)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 cifre)\",\n  \"cardholderNamePlaceholder\": \"Kortindehaverens navn\",\n  \"expirationDateLabel\": \"Udløbsdato\",\n  \"expirationDateLabelSubheading\": \"(MM/ÅÅ)\",\n  \"expirationDatePlaceholder\": \"MM/ÅÅ\",\n  \"postalCodeLabel\": \"Postnummer\",\n  \"payWithCard\": \"Betal med kort\",\n  \"endingIn\": \"Der slutter på {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Kort\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal-kredit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],150:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Zahlen mit {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Andere Zahlungsmethode wählen\",\n  \"chooseAWayToPay\": \"Wie möchten Sie bezahlen?\",\n  \"otherWaysToPay\": \"Andere Zahlungsmethoden\",\n  \"edit\": \"Bearbeiten\",\n  \"doneEditing\": \"Fertig\",\n  \"editPaymentMethods\": \"Zahlungsquellen bearbeiten\",\n  \"CreditCardDeleteConfirmationMessage\": \"{{secondaryIdentifier}} Karte mit den Endziffern {{identifier}} löschen?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"PayPal-Konto {{identifier}} löschen?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Wollen Sie das Venmo-Konto mit dem Benutzernamen {{identifier}} wirklich löschen?\",\n  \"genericDeleteConfirmationMessage\": \"Wollen Sie diese Zahlungsquelle wirklich löschen?\",\n  \"deleteCancelButton\": \"Abbrechen\",\n  \"deleteConfirmationButton\": \"Löschen\",\n  \"cardVerification\": \"Kartenbestätigung\",\n  \"fieldEmptyForCvv\": \"Geben Sie die Kartenprüfnummer ein.\",\n  \"fieldEmptyForExpirationDate\": \"Geben Sie das Ablaufdatum ein.\",\n  \"fieldEmptyForCardholderName\": \"Geben Sie den Namen des Karteninhabers ein.\",\n  \"fieldTooLongForCardholderName\": \"Der Name des Karteninhabers darf 255 Zeichen nicht übersteigen.\",\n  \"fieldEmptyForNumber\": \"Geben Sie die Nummer ein.\",\n  \"fieldEmptyForPostalCode\": \"Geben Sie die PLZ ein.\",\n  \"fieldInvalidForCvv\": \"Die Kartenprüfnummer ist ungültig.\",\n  \"fieldInvalidForExpirationDate\": \"Das Ablaufdatum ist ungültig.\",\n  \"fieldInvalidForNumber\": \"Die Kreditkartennummer ist ungültig.\",\n  \"fieldInvalidForPostalCode\": \"Die PLZ ist ungültig.\",\n  \"genericError\": \"Bei uns ist ein Problem aufgetreten.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Diese Kreditkarte ist bereits als gespeicherte Zahlungsmethode vorhanden.\",\n  \"hostedFieldsFailedTokenizationError\": \"Überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.\",\n  \"hostedFieldsFieldsInvalidError\": \"Überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Netzwerkfehler. Versuchen Sie es erneut.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Überprüfung der Karte fehlgeschlagen. Überprüfen Sie Ihre Eingabe und versuchen Sie es erneut.\",\n  \"paypalButtonMustBeUsed\": \"Verwenden Sie den PayPal-Button, um mit der Zahlung fortfahren.\",\n  \"paypalAccountTokenizationFailedError\": \"Beim Hinzufügen des PayPal-Kontos ist ein Problem aufgetreten. Versuchen Sie es erneut.\",\n  \"paypalFlowFailedError\": \"Beim Verbinden mit PayPal ist ein Problem aufgetreten. Versuchen Sie es erneut.\",\n  \"paypalTokenizationRequestActiveError\": \"Die PayPal-Zahlung wird bereits autorisiert.\",\n  \"venmoCanceledError\": \"Etwas ist schief gelaufen. Vergewissern Sie sich, dass Sie die neueste Version der Venmo-App auf Ihrem Gerät installiert haben und Ihr Browser den Wechsel zu Venmo unterstützt.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Die Zahlungsquelle konnte nicht gelöscht werden. Versuchen Sie es erneut.\",\n  \"venmoAppFailedError\": \"Die Venmo-App wurde auf Ihrem Gerät nicht gefunden.\",\n  \"unsupportedCardTypeError\": \"Dieser Kreditkartentyp wird nicht unterstützt. Versuchen Sie es mit einer anderen Karte.\",\n  \"applePayTokenizationError\": \"Netzwerkfehler bei der Zahlungsabwicklung mit Apple Pay. Versuchen Sie es erneut.\",\n  \"applePayActiveCardError\": \"Fügen Sie der Apple-Pay-Börse eine unterstützte Kreditkarte hinzu.\",\n  \"cardholderNameLabel\": \"Name des Karteninhabers\",\n  \"cardNumberLabel\": \"Kartennummer\",\n  \"cvvLabel\": \"Prüfnr.\",\n  \"cvvThreeDigitLabelSubheading\": \"(3-stellig)\",\n  \"cvvFourDigitLabelSubheading\": \"(4-stellig)\",\n  \"cardholderNamePlaceholder\": \"Name des Karteninhabers\",\n  \"expirationDateLabel\": \"Gültig bis\",\n  \"expirationDateLabelSubheading\": \"(MM/JJ)\",\n  \"expirationDatePlaceholder\": \"MM/JJ\",\n  \"postalCodeLabel\": \"PLZ\",\n  \"payWithCard\": \"Mit Kreditkarte zahlen\",\n  \"endingIn\": \"Mit den Endziffern {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Kreditkarte\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],151:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Paying with {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Choose another way to pay\",\n  \"chooseAWayToPay\": \"Choose a way to pay\",\n  \"otherWaysToPay\": \"Other ways to pay\",\n  \"edit\": \"Edit\",\n  \"doneEditing\": \"Done\",\n  \"editPaymentMethods\": \"Edit payment methods\",\n  \"CreditCardDeleteConfirmationMessage\": \"Delete {{secondaryIdentifier}} card ending in {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Delete PayPal account {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Are you sure you want to delete the Venmo account with username {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Are you sure you want to delete this payment method?\",\n  \"deleteCancelButton\": \"Cancel\",\n  \"deleteConfirmationButton\": \"Delete\",\n  \"cardVerification\": \"Card verification\",\n  \"fieldEmptyForCvv\": \"Please fill out a CVV.\",\n  \"fieldEmptyForExpirationDate\": \"Please fill out an expiry date.\",\n  \"fieldEmptyForCardholderName\": \"Please fill out a cardholder name.\",\n  \"fieldTooLongForCardholderName\": \"Cardholder name must be less than 256 characters.\",\n  \"fieldEmptyForNumber\": \"Please fill out a number.\",\n  \"fieldEmptyForPostalCode\": \"Please fill out a postcode.\",\n  \"fieldInvalidForCvv\": \"This security code is not valid.\",\n  \"fieldInvalidForExpirationDate\": \"This expiry date is not valid.\",\n  \"fieldInvalidForNumber\": \"This card number is not valid.\",\n  \"fieldInvalidForPostalCode\": \"This postcode is not valid.\",\n  \"genericError\": \"Something went wrong on our end.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"This credit card already exists as a saved payment method.\",\n  \"hostedFieldsFailedTokenizationError\": \"Check your entries and try again.\",\n  \"hostedFieldsFieldsInvalidError\": \"Check your entries and try again.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Network error. Please try again.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Credit card verification failed. Check your entries and try again.\",\n  \"paypalButtonMustBeUsed\": \"Use the PayPal button to continue with your payment.\",\n  \"paypalAccountTokenizationFailedError\": \"Something went wrong while adding the PayPal account. Please try again.\",\n  \"paypalFlowFailedError\": \"Something went wrong while connecting to PayPal. Please try again.\",\n  \"paypalTokenizationRequestActiveError\": \"PayPal payment authorisation is already in progress.\",\n  \"venmoCanceledError\": \"We're sorry, something seems to have gone wrong. Please ensure you have the most recent version of the Venmo app installed on your device and your browser supports switching to Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"We're sorry. We couldn't delete that payment method. Please try again.\",\n  \"venmoAppFailedError\": \"The Venmo app wasn't found on your device.\",\n  \"unsupportedCardTypeError\": \"This card type is not supported. Please try another card.\",\n  \"applePayTokenizationError\": \"A network error occurred while processing the Apple Pay payment. Please try again.\",\n  \"applePayActiveCardError\": \"Link a supported card to your Apple Pay wallet.\",\n  \"cardholderNameLabel\": \"Cardholder Name\",\n  \"cardNumberLabel\": \"Card Number\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 digits)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 digits)\",\n  \"cardholderNamePlaceholder\": \"Cardholder Name\",\n  \"expirationDateLabel\": \"Expiry date\",\n  \"expirationDateLabelSubheading\": \"(MM/YY)\",\n  \"expirationDatePlaceholder\": \"MM/YY\",\n  \"postalCodeLabel\": \"Postcode\",\n  \"payWithCard\": \"Pay with credit or debit card\",\n  \"endingIn\": \"Ending in {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Card\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],152:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Paying with {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Choose another way to pay\",\n  \"chooseAWayToPay\": \"Choose a way to pay\",\n  \"otherWaysToPay\": \"Other ways to pay\",\n  \"edit\": \"Edit\",\n  \"doneEditing\": \"Done\",\n  \"editPaymentMethods\": \"Edit funding sources\",\n  \"CreditCardDeleteConfirmationMessage\": \"Delete {{secondaryIdentifier}} card ending in {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Delete PayPal account {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Are you sure you want to delete the Venmo account with username {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Are you sure you want to delete this funding source?\",\n  \"deleteCancelButton\": \"Cancel\",\n  \"deleteConfirmationButton\": \"Delete\",\n  \"cardVerification\": \"Card Verification\",\n  \"fieldEmptyForCvv\": \"Please fill in a CSC.\",\n  \"fieldEmptyForExpirationDate\": \"Please fill in an expiry date.\",\n  \"fieldEmptyForCardholderName\": \"Please fill in a cardholder name.\",\n  \"fieldTooLongForCardholderName\": \"Cardholder name must be less than 256 characters.\",\n  \"fieldEmptyForNumber\": \"Please fill in a number.\",\n  \"fieldEmptyForPostalCode\": \"Please fill in a postcode.\",\n  \"fieldInvalidForCvv\": \"This security code is not valid.\",\n  \"fieldInvalidForExpirationDate\": \"This expiry date is not valid.\",\n  \"fieldInvalidForNumber\": \"This card number is not valid.\",\n  \"fieldInvalidForPostalCode\": \"This postcode is not valid.\",\n  \"genericError\": \"Something went wrong on our end.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"This credit card has already been added to your account as a funding source.\",\n  \"hostedFieldsFailedTokenizationError\": \"Please check your information and try again.\",\n  \"hostedFieldsFieldsInvalidError\": \"Please check your information and try again.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Network error. Please try again.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Credit card verification failed. Please check your information and try again.\",\n  \"paypalButtonMustBeUsed\": \"Use the PayPal button to continue with your payment.\",\n  \"paypalAccountTokenizationFailedError\": \"Something went wrong while adding the PayPal account. Please try again.\",\n  \"paypalFlowFailedError\": \"Something went wrong while connecting to PayPal. Please try again.\",\n  \"paypalTokenizationRequestActiveError\": \"PayPal payment authorisation is already in progress.\",\n  \"venmoCanceledError\": \"We're sorry, something seems to have gone wrong. Make sure you have the most recent version of the Venmo app installed on your device and your browser supports the switch to Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Unable to delete funding source, try again.\",\n  \"venmoAppFailedError\": \"The Venmo app isn't on your device.\",\n  \"unsupportedCardTypeError\": \"This card type is not supported. Please try another card.\",\n  \"applePayTokenizationError\": \"A network error occurred while processing the Apple Pay payment. Please try again.\",\n  \"applePayActiveCardError\": \"Add a supported card to your Apple Pay wallet.\",\n  \"cardholderNameLabel\": \"Cardholder Name\",\n  \"cardNumberLabel\": \"Card Number\",\n  \"cvvLabel\": \"CSC\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 digits)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 digits)\",\n  \"cardholderNamePlaceholder\": \"Cardholder Name\",\n  \"expirationDateLabel\": \"Expiry Date\",\n  \"expirationDateLabelSubheading\": \"(MM/YY)\",\n  \"expirationDatePlaceholder\": \"MM/YY\",\n  \"postalCodeLabel\": \"Postcode\",\n  \"payWithCard\": \"Pay with card\",\n  \"endingIn\": \"Ending in {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Card\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],153:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  payingWith: 'Paying with {{paymentSource}}',\n  chooseAnotherWayToPay: 'Choose another way to pay',\n  chooseAWayToPay: 'Choose a way to pay',\n  otherWaysToPay: 'Other ways to pay',\n  edit: 'Edit',\n  doneEditing: 'Done',\n  editPaymentMethods: 'Edit payment methods',\n  CreditCardDeleteConfirmationMessage: 'Delete {{secondaryIdentifier}} card ending in {{identifier}}?',\n  PayPalAccountDeleteConfirmationMessage: 'Delete PayPal account {{identifier}}?',\n  VenmoAccountDeleteConfirmationMessage: 'Are you sure you want to delete Venmo account with username {{identifier}}?',\n  genericDeleteConfirmationMessage: 'Are you sure you want to delete this payment method?',\n  deleteCancelButton: 'Cancel',\n  deleteConfirmationButton: 'Delete',\n  cardVerification: 'Card Verification',\n  // Errors\n  fieldEmptyForCvv: 'Please fill out a CVV.',\n  fieldEmptyForExpirationDate: 'Please fill out an expiration date.',\n  fieldEmptyForCardholderName: 'Please fill out a cardholder name.',\n  fieldEmptyForNumber: 'Please fill out a card number.',\n  fieldEmptyForPostalCode: 'Please fill out a postal code.',\n  fieldInvalidForCvv: 'This security code is not valid.',\n  fieldInvalidForExpirationDate: 'This expiration date is not valid.',\n  fieldInvalidForNumber: 'This card number is not valid.',\n  fieldInvalidForPostalCode: 'This postal code is not valid.',\n  fieldTooLongForCardholderName: 'Cardholder name must be less than 256 characters.',\n  genericError: 'Something went wrong on our end.',\n  hostedFieldsTokenizationFailOnDuplicateError: 'This credit card already exists as a saved payment method.',\n  hostedFieldsFailedTokenizationError: 'Please check your information and try again.',\n  hostedFieldsTokenizationCvvVerificationFailedError: 'Credit card verification failed. Please check your information and try again.',\n  hostedFieldsTokenizationNetworkErrorError: 'Network error. Please try again.',\n  hostedFieldsFieldsInvalidError: 'Please check your information and try again.',\n  paypalButtonMustBeUsed: 'Use the PayPal button to continue with your payment.',\n  paypalAccountTokenizationFailedError: 'Something went wrong adding the PayPal account. Please try again.',\n  paypalFlowFailedError: 'Something went wrong connecting to PayPal. Please try again.',\n  paypalTokenizationRequestActiveError: 'PayPal payment authorization is already in progress.',\n  applePayTokenizationError: 'A network error occurred while processing the Apple Pay payment. Please try again.',\n  applePayActiveCardError: 'Add a supported card to your Apple Pay wallet.',\n  vaultManagerPaymentMethodDeletionError: 'Unable to delete payment method, try again.',\n  venmoCanceledError: 'Something went wrong. Ensure you have the most recent version of the Venmo app installed on your device and your browser supports switching to Venmo.',\n  venmoAppFailedError: 'The Venmo app could not be found on your device.',\n  unsupportedCardTypeError: 'This card type is not supported. Please try another card.',\n  // Card form\n  cardholderNameLabel: 'Cardholder Name',\n  cardNumberLabel: 'Card Number',\n  cvvLabel: 'CVV',\n  cvvThreeDigitLabelSubheading: '(3 digits)',\n  cvvFourDigitLabelSubheading: '(4 digits)',\n  expirationDateLabel: 'Expiration Date',\n  expirationDateLabelSubheading: '(MM/YY)',\n  cardholderNamePlaceholder: 'Cardholder Name',\n  expirationDatePlaceholder: 'MM/YY',\n  postalCodeLabel: 'Postal Code',\n  payWithCard: 'Pay with card',\n  // Payment Method descriptions\n  endingIn: 'Ending in {{lastFourCardDigits}}',\n  Card: 'Card',\n  PayPal: 'PayPal',\n  'PayPal Credit': 'PayPal Credit',\n  'Apple Pay': 'Apple Pay',\n  'Google Pay': 'Google Pay',\n  'Venmo': 'Venmo',\n  'American Express': 'American Express',\n  Discover: 'Discover',\n  'Diners Club': 'Diners Club',\n  MasterCard: 'Mastercard',\n  Visa: 'Visa',\n  JCB: 'JCB',\n  Maestro: 'Maestro',\n  UnionPay: 'UnionPay'\n};\n\n},{}],154:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Pago con {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Selecciona otra forma de pago.\",\n  \"chooseAWayToPay\": \"Selecciona una forma de pago.\",\n  \"otherWaysToPay\": \"Otras formas de pago\",\n  \"edit\": \"Modificar\",\n  \"doneEditing\": \"Hecho\",\n  \"editPaymentMethods\": \"Editar formas de pago\",\n  \"CreditCardDeleteConfirmationMessage\": \"¿Quieres eliminar la tarjeta {{secondaryIdentifier}} que termina en {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"¿Quieres eliminar la cuenta PayPal {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"¿Seguro de que deseas eliminar la cuenta de Venmo con nombre de usuario {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"¿Seguro que deseas eliminar esta forma de pago?\",\n  \"deleteCancelButton\": \"Cancelar\",\n  \"deleteConfirmationButton\": \"Eliminar\",\n  \"cardVerification\": \"Verificación de tarjeta\",\n  \"fieldEmptyForCvv\": \"Escribe el código CVV.\",\n  \"fieldEmptyForExpirationDate\": \"Escribe la fecha de vencimiento.\",\n  \"fieldEmptyForCardholderName\": \"Escribe el nombre de un titular de la tarjeta.\",\n  \"fieldTooLongForCardholderName\": \"El nombre del titular de la tarjeta debe tener menos de 256 caracteres.\",\n  \"fieldEmptyForNumber\": \"Escribe un número.\",\n  \"fieldEmptyForPostalCode\": \"Escribe el código postal.\",\n  \"fieldInvalidForCvv\": \"Este código de seguridad no es válido.\",\n  \"fieldInvalidForExpirationDate\": \"Esta fecha de vencimiento no es válida.\",\n  \"fieldInvalidForNumber\": \"Este número de tarjeta no es válido.\",\n  \"fieldInvalidForPostalCode\": \"Este código postal no es válido.\",\n  \"genericError\": \"Hemos tenido algún problema.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Esta tarjeta de crédito ya existe como forma de pago guardada.\",\n  \"hostedFieldsFailedTokenizationError\": \"Comprueba la información e inténtalo de nuevo.\",\n  \"hostedFieldsFieldsInvalidError\": \"Comprueba la información e inténtalo de nuevo.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Error de red. Inténtalo de nuevo.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Error de verificación de la tarjeta de crédito. Comprueba la información e inténtalo de nuevo.\",\n  \"paypalButtonMustBeUsed\": \"Utiliza el botón de PayPal para continuar con el pago.\",\n  \"paypalAccountTokenizationFailedError\": \"Se ha producido un error al vincular la cuenta PayPal. Inténtalo de nuevo.\",\n  \"paypalFlowFailedError\": \"Se ha producido un error al conectarse a PayPal. Inténtalo de nuevo.\",\n  \"paypalTokenizationRequestActiveError\": \"Ya hay una autorización de pago de PayPal en curso.\",\n  \"venmoCanceledError\": \"Ha habido un problema. Asegúrate de que tienes la versión más reciente de la aplicación de Venmo instalada en tu dispositivo y de que tu navegador es compatible con cambiar a Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"No se ha podido eliminar la forma de pago. Inténtalo de nuevo.\",\n  \"venmoAppFailedError\": \"No se ha encontrado la aplicación de Venmo en tu dispositivo.\",\n  \"unsupportedCardTypeError\": \"No se admite este tipo de tarjeta. Prueba con otra tarjeta.\",\n  \"applePayTokenizationError\": \"Se ha producido un error de red al procesar el pago con Apple Pay. Inténtalo de nuevo.\",\n  \"applePayActiveCardError\": \"Añade una tarjeta admitida a tu Wallet de Apple Pay.\",\n  \"cardholderNameLabel\": \"Nombre del titular de la tarjeta\",\n  \"cardNumberLabel\": \"Número de tarjeta\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 dígitos)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 dígitos)\",\n  \"cardholderNamePlaceholder\": \"Nombre del titular de la tarjeta\",\n  \"expirationDateLabel\": \"Fecha de vencimiento\",\n  \"expirationDateLabelSubheading\": \"(MM/AA)\",\n  \"expirationDatePlaceholder\": \"MM/AA\",\n  \"postalCodeLabel\": \"Código postal\",\n  \"payWithCard\": \"Pagar con tarjeta\",\n  \"endingIn\": \"Terminada en {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Tarjeta\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],155:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Payer avec {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Choisir un autre mode de paiement\",\n  \"chooseAWayToPay\": \"Choisir le mode de paiement\",\n  \"otherWaysToPay\": \"Autres modes de paiement\",\n  \"edit\": \"Modifier\",\n  \"doneEditing\": \"Terminé\",\n  \"editPaymentMethods\": \"Modifier les modes de paiement\",\n  \"CreditCardDeleteConfirmationMessage\": \"Supprimer la carte {{secondaryIdentifier}} se terminant par {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Supprimer le compte PayPal {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Souhaitez-vous vraiment supprimer le compte Venmo avec le nom d’utilisateur {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Voulez-vous vraiment supprimer ce mode de paiement?\",\n  \"deleteCancelButton\": \"Annuler\",\n  \"deleteConfirmationButton\": \"Supprimer\",\n  \"cardVerification\": \"Vérification de la carte\",\n  \"fieldEmptyForCvv\": \"Veuillez saisir un cryptogramme visuel.\",\n  \"fieldEmptyForExpirationDate\": \"Veuillez saisir une date d'expiration.\",\n  \"fieldEmptyForCardholderName\": \"Veuillez saisir un nom de titulaire de la carte.\",\n  \"fieldTooLongForCardholderName\": \"Le nom du titulaire de la carte doit contenir moins de 256 caractères.\",\n  \"fieldEmptyForNumber\": \"Veuillez saisir un numéro.\",\n  \"fieldEmptyForPostalCode\": \"Veuillez saisir un code postal.\",\n  \"fieldInvalidForCvv\": \"Ce cryptogramme visuel n'est pas valide.\",\n  \"fieldInvalidForExpirationDate\": \"Cette date d'expiration n'est pas valide.\",\n  \"fieldInvalidForNumber\": \"Ce numéro de carte n'est pas valide.\",\n  \"fieldInvalidForPostalCode\": \"Ce code postal n'est pas valide.\",\n  \"genericError\": \"Une erreur s'est produite de notre côté.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Cette carte de crédit existe déjà comme mode de paiement enregistré.\",\n  \"hostedFieldsFailedTokenizationError\": \"Vérifiez vos informations, puis réessayez.\",\n  \"hostedFieldsFieldsInvalidError\": \"Vérifiez vos informations, puis réessayez.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Erreur réseau. Veuillez réessayer.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"La vérification de la carte de crédit a échoué. Vérifiez vos informations, puis réessayez.\",\n  \"paypalButtonMustBeUsed\": \"Utilisez le bouton PayPal pour poursuivre votre paiement.\",\n  \"paypalAccountTokenizationFailedError\": \"Une erreur s'est produite lors de l'enregistrement du compte PayPal. Veuillez réessayer.\",\n  \"paypalFlowFailedError\": \"Une erreur s'est produite au cours de la connexion à PayPal. Veuillez réessayer.\",\n  \"paypalTokenizationRequestActiveError\": \"L'autorisation de paiement PayPal est déjà en cours.\",\n  \"venmoCanceledError\": \"Une erreur s'est produite. Assurez-vous que la version la plus récente de l'application Venmo est installée sur votre appareil et que votre navigateur prend Venmo en charge.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Impossible de supprimer le mode de paiement, essayez de nouveau.\",\n  \"venmoAppFailedError\": \"L'application Venmo est introuvable sur votre appareil.\",\n  \"unsupportedCardTypeError\": \"Ce type de carte n'est pas pris en charge. Veuillez essayer une autre carte.\",\n  \"applePayTokenizationError\": \"Une erreur de réseau s'est produite lors du traitement du paiement avec Apple Pay. Veuillez réessayer.\",\n  \"applePayActiveCardError\": \"Ajoutez une carte prise en charge à Apple Pay.\",\n  \"cardholderNameLabel\": \"Nom du titulaire de la carte\",\n  \"cardNumberLabel\": \"Numéro de carte\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 chiffres)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 chiffres)\",\n  \"cardholderNamePlaceholder\": \"Nom du titulaire de la carte\",\n  \"expirationDateLabel\": \"Date d'expiration\",\n  \"expirationDateLabelSubheading\": \"(MM/AA)\",\n  \"expirationDatePlaceholder\": \"MM/AA\",\n  \"postalCodeLabel\": \"Code postal\",\n  \"payWithCard\": \"Payer par carte\",\n  \"endingIn\": \"Se terminant par {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Carte\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],156:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Payer avec {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Choisissez une autre façon de payer.\",\n  \"chooseAWayToPay\": \"Choisissez comment payer.\",\n  \"otherWaysToPay\": \"Autres façons de payer\",\n  \"edit\": \"Modifier\",\n  \"doneEditing\": \"Terminé\",\n  \"editPaymentMethods\": \"Modifier les sources d'approvisionnement\",\n  \"CreditCardDeleteConfirmationMessage\": \"Supprimer la carte {{secondaryIdentifier}} se terminant par {{identifier}} ?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Supprimer le compte PayPal {{identifier}} ?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Êtes-vous sûr de vouloir supprimer le compte Venmo avec le nom d'utilisateur {{identifier}} ?\",\n  \"genericDeleteConfirmationMessage\": \"Êtes-vous sûr de vouloir supprimer cette source d'approvisionnement ?\",\n  \"deleteCancelButton\": \"Annuler\",\n  \"deleteConfirmationButton\": \"Supprimer\",\n  \"cardVerification\": \"Vérification de la carte\",\n  \"fieldEmptyForCvv\": \"Entrez un cryptogramme visuel.\",\n  \"fieldEmptyForExpirationDate\": \"Entrez une date d'expiration.\",\n  \"fieldEmptyForCardholderName\": \"Entrez un nom du titulaire de la carte.\",\n  \"fieldTooLongForCardholderName\": \"Le nom du titulaire de la carte doit contenir moins de 256 caractères.\",\n  \"fieldEmptyForNumber\": \"Entrez un numéro.\",\n  \"fieldEmptyForPostalCode\": \"Entrez un code postal.\",\n  \"fieldInvalidForCvv\": \"Ce cryptogramme visuel n'est pas valide.\",\n  \"fieldInvalidForExpirationDate\": \"Cette date d'expiration n'est pas valide.\",\n  \"fieldInvalidForNumber\": \"Ce numéro de carte n'est pas valide.\",\n  \"fieldInvalidForPostalCode\": \"Ce code postal n'est pas valide.\",\n  \"genericError\": \"Une erreur est survenue.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Cette carte bancaire existe déjà comme mode de paiement enregistré.\",\n  \"hostedFieldsFailedTokenizationError\": \"Vérifiez vos informations et réessayez.\",\n  \"hostedFieldsFieldsInvalidError\": \"Vérifiez vos informations et réessayez.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Erreur réseau. Réessayez.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Échec de vérification de la carte bancaire. Vérifiez vos informations et réessayez.\",\n  \"paypalButtonMustBeUsed\": \"Utilisez le bouton PayPal pour poursuivre votre paiement.\",\n  \"paypalAccountTokenizationFailedError\": \"Une erreur est survenue lors de l'ajout du compte PayPal. Réessayez.\",\n  \"paypalFlowFailedError\": \"Une erreur est survenue lors de la connexion à PayPal. Réessayez.\",\n  \"paypalTokenizationRequestActiveError\": \"L'autorisation de paiement PayPal est déjà en cours.\",\n  \"venmoCanceledError\": \"Une erreur est survenue. Vérifiez que vous disposez de la dernière version de l'application Venmo sur votre appareil et que votre navigateur prend en charge la redirection vers Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Impossible de supprimer la source d'approvisionnement. Réessayez.\",\n  \"venmoAppFailedError\": \"L'application Venmo est introuvable sur votre appareil.\",\n  \"unsupportedCardTypeError\": \"Ce type de carte n'est pas pris en charge. Essayez une autre carte.\",\n  \"applePayTokenizationError\": \"Une erreur réseau s'est produite lors du traitement du paiement Apple Pay. Réessayez.\",\n  \"applePayActiveCardError\": \"Enregistrez une carte prise en charge sur Apple Pay.\",\n  \"cardholderNameLabel\": \"Nom du titulaire de la carte\",\n  \"cardNumberLabel\": \"Nº de carte\",\n  \"cvvLabel\": \"Cryptogramme visuel\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 chiffres)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 chiffres)\",\n  \"cardholderNamePlaceholder\": \"Nom du titulaire de la carte\",\n  \"expirationDateLabel\": \"Date d'expiration\",\n  \"expirationDateLabelSubheading\": \"(MM/AA)\",\n  \"expirationDatePlaceholder\": \"MM/AA\",\n  \"postalCodeLabel\": \"Code postal\",\n  \"payWithCard\": \"Payer par carte\",\n  \"endingIn\": \"Se terminant par {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Carte\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],157:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Membayar dengan {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Pilih metode pembayaran lain\",\n  \"chooseAWayToPay\": \"Pilih metode pembayaran\",\n  \"otherWaysToPay\": \"Metode pembayaran lain\",\n  \"edit\": \"Edit\",\n  \"doneEditing\": \"Selesai\",\n  \"editPaymentMethods\": \"Edit metode pembayaran\",\n  \"CreditCardDeleteConfirmationMessage\": \"Hapus kartu {{secondaryIdentifier}} yang berakhiran {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Hapus {{identifier}} rekening PayPal?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Yakin akan menghapus rekening Venmo dengan nama pengguna {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Yakin akan menghapus metode pembayaran ini?\",\n  \"deleteCancelButton\": \"Batalkan\",\n  \"deleteConfirmationButton\": \"Hapus\",\n  \"cardVerification\": \"Verifikasi Kartu\",\n  \"fieldEmptyForCvv\": \"Masukkan CVV.\",\n  \"fieldEmptyForExpirationDate\": \"Masukkan tanggal akhir berlaku.\",\n  \"fieldEmptyForCardholderName\": \"Masukkan nama pemegang kartu.\",\n  \"fieldTooLongForCardholderName\": \"Nama pemegang kartu harus kurang dari 256 karakter.\",\n  \"fieldEmptyForNumber\": \"Masukkan nomor.\",\n  \"fieldEmptyForPostalCode\": \"Masukkan kode pos.\",\n  \"fieldInvalidForCvv\": \"Kode keamanan ini tidak valid.\",\n  \"fieldInvalidForExpirationDate\": \"Tanggal akhir berlaku ini tidak valid.\",\n  \"fieldInvalidForNumber\": \"Nomor kartu ini tidak valid.\",\n  \"fieldInvalidForPostalCode\": \"Kode pos ini tidak valid.\",\n  \"genericError\": \"Ada yang salah pada sistem kami.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Kartu kredit ini sudah dimasukkan sebagai metode pembayaran tersimpan.\",\n  \"hostedFieldsFailedTokenizationError\": \"Periksa informasi Anda dan coba lagi.\",\n  \"hostedFieldsFieldsInvalidError\": \"Periksa informasi Anda dan coba lagi.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Masalah jaringan. Coba lagi.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Verifikasi kartu kredit gagal. Periksa informasi Anda dan coba lagi.\",\n  \"paypalButtonMustBeUsed\": \"Gunakan tombol PayPal untuk melanjutkan pembayaran Anda.\",\n  \"paypalAccountTokenizationFailedError\": \"Terjadi kesalahan saat menambahkan rekening PayPal. Coba lagi.\",\n  \"paypalFlowFailedError\": \"Terjadi kesalahan saat menyambung ke PayPal. Coba lagi.\",\n  \"paypalTokenizationRequestActiveError\": \"Otorisasi pembayaran PayPal sedang diproses.\",\n  \"venmoCanceledError\": \"Terdapat kesalahan. Pastikan Anda telah menginstal aplikasi Venmo versi terbaru pada perangkat dan peramban Anda mendukung untuk beralih ke Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Tidak dapat menghapus metode pembayaran, coba lagi.\",\n  \"venmoAppFailedError\": \"Aplikasi Venmo tidak dapat ditemukan pada perangkat Anda.\",\n  \"unsupportedCardTypeError\": \"Jenis kartu ini tidak didukung. Coba kartu lainnya.\",\n  \"applePayTokenizationError\": \"Terjadi kesalahan jaringan sewaktu memproses pembayaran melalui Apple Pay. Coba lagi.\",\n  \"applePayActiveCardError\": \"Tambahkan kartu yang didukung ke wallet Apple Pay.\",\n  \"cardholderNameLabel\": \"Nama Pemegang Kartu\",\n  \"cardNumberLabel\": \"Nomor Kartu\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 angka)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 angka)\",\n  \"cardholderNamePlaceholder\": \"Nama Pemegang Kartu\",\n  \"expirationDateLabel\": \"Tanggal Kedaluwarsa\",\n  \"expirationDateLabelSubheading\": \"(BB/TT)\",\n  \"expirationDatePlaceholder\": \"BB/TT\",\n  \"postalCodeLabel\": \"Kode Pos\",\n  \"payWithCard\": \"Bayar dengan kartu\",\n  \"endingIn\": \"Berakhiran {{lastTwoCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Kartu\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],158:[function(require,module,exports){\n/* eslint-disable camelcase */\n'use strict';\n\nvar assign = require('../lib/assign').assign;\n\nvar fiveCharacterLocales = {\n  da_DK: require('./da_DK'),\n  de_DE: require('./de_DE'),\n  en_US: require('./en_US'),\n  en_AU: require('./en_AU'),\n  en_GB: require('./en_GB'),\n  es_ES: require('./es_ES'),\n  fr_CA: require('./fr_CA'),\n  fr_FR: require('./fr_FR'),\n  id_ID: require('./id_ID'),\n  it_IT: require('./it_IT'),\n  ja_JP: require('./ja_JP'),\n  ko_KR: require('./ko_KR'),\n  nl_NL: require('./nl_NL'),\n  no_NO: require('./no_NO'),\n  pl_PL: require('./pl_PL'),\n  pt_BR: require('./pt_BR'),\n  pt_PT: require('./pt_PT'),\n  ru_RU: require('./ru_RU'),\n  sv_SE: require('./sv_SE'),\n  th_TH: require('./th_TH'),\n  zh_CN: require('./zh_CN'),\n  zh_HK: require('./zh_HK'),\n  zh_TW: require('./zh_TW')\n};\n\nvar twoCharacterLocaleAliases = {\n  da: fiveCharacterLocales.da_DK,\n  de: fiveCharacterLocales.de_DE,\n  en: fiveCharacterLocales.en_US,\n  es: fiveCharacterLocales.es_ES,\n  fr: fiveCharacterLocales.fr_FR,\n  id: fiveCharacterLocales.id_ID,\n  it: fiveCharacterLocales.it_IT,\n  ja: fiveCharacterLocales.ja_JP,\n  ko: fiveCharacterLocales.ko_KR,\n  nl: fiveCharacterLocales.nl_NL,\n  no: fiveCharacterLocales.no_NO,\n  pl: fiveCharacterLocales.pl_PL,\n  pt: fiveCharacterLocales.pt_PT,\n  ru: fiveCharacterLocales.ru_RU,\n  sv: fiveCharacterLocales.sv_SE,\n  th: fiveCharacterLocales.th_TH,\n  zh: fiveCharacterLocales.zh_CN\n};\n\nmodule.exports = {\n  twoCharacterLocaleAliases: twoCharacterLocaleAliases,\n  fiveCharacterLocales: fiveCharacterLocales,\n  translations: assign({}, twoCharacterLocaleAliases, fiveCharacterLocales)\n};\n/* eslint-enable camelcase */\n\n},{\"../lib/assign\":131,\"./da_DK\":149,\"./de_DE\":150,\"./en_AU\":151,\"./en_GB\":152,\"./en_US\":153,\"./es_ES\":154,\"./fr_CA\":155,\"./fr_FR\":156,\"./id_ID\":157,\"./it_IT\":159,\"./ja_JP\":160,\"./ko_KR\":161,\"./nl_NL\":162,\"./no_NO\":163,\"./pl_PL\":164,\"./pt_BR\":165,\"./pt_PT\":166,\"./ru_RU\":167,\"./sv_SE\":168,\"./th_TH\":169,\"./zh_CN\":170,\"./zh_HK\":171,\"./zh_TW\":172}],159:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Pagamento con {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Scegli di pagare in un altro modo\",\n  \"chooseAWayToPay\": \"Scegli come pagare\",\n  \"otherWaysToPay\": \"Altri modi di pagare\",\n  \"edit\": \"Modifica\",\n  \"doneEditing\": \"Fine\",\n  \"editPaymentMethods\": \"Modifica i metodi di pagamento\",\n  \"CreditCardDeleteConfirmationMessage\": \"Eliminare la carta {{secondaryIdentifier}} le cui ultime cifre sono {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Eliminare il conto PayPal {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Vuoi eliminare il conto Venmo con nome utente {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Vuoi eliminare questo metodo di pagamento?\",\n  \"deleteCancelButton\": \"Annulla\",\n  \"deleteConfirmationButton\": \"Rimuovi\",\n  \"cardVerification\": \"Codice di sicurezza\",\n  \"fieldEmptyForCvv\": \"Immetti il codice di sicurezza (CVV).\",\n  \"fieldEmptyForExpirationDate\": \"Immetti la data di scadenza.\",\n  \"fieldEmptyForCardholderName\": \"Immetti il nome del titolare della carta.\",\n  \"fieldTooLongForCardholderName\": \"Il nome del titolare della carta deve avere meno di 256 caratteri.\",\n  \"fieldEmptyForNumber\": \"Immetti il numero di carta.\",\n  \"fieldEmptyForPostalCode\": \"Immetti il CAP.\",\n  \"fieldInvalidForCvv\": \"Il codice di sicurezza non è valido.\",\n  \"fieldInvalidForExpirationDate\": \"La data di scadenza non è valida.\",\n  \"fieldInvalidForNumber\": \"Il numero di carta non è valido.\",\n  \"fieldInvalidForPostalCode\": \"Il CAP non è valido.\",\n  \"genericError\": \"Si è verificato un errore nei nostri sistemi.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Questa carta di credito è già registrata come metodo di pagamento salvato.\",\n  \"hostedFieldsFailedTokenizationError\": \"Controlla e riprova.\",\n  \"hostedFieldsFieldsInvalidError\": \"Controlla e riprova.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Errore di rete. Riprova.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"La verifica della carta di credito non è andata a buon fine. Controlla i dati e riprova.\",\n  \"paypalButtonMustBeUsed\": \"Usa il pulsante PayPal per procedere al pagamento.\",\n  \"paypalAccountTokenizationFailedError\": \"Si è verificato un errore nel collegamento del conto PayPal. Riprova.\",\n  \"paypalFlowFailedError\": \"Si è verificato un errore di connessione a PayPal. Riprova.\",\n  \"paypalTokenizationRequestActiveError\": \"L'autorizzazione di pagamento PayPal è già in corso.\",\n  \"venmoCanceledError\": \"Si è verificato un errore. Assicurati di avere la versione più recente dell'app Venmo installata sul tuo dispositivo e che il browser supporti l'uso di Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Impossibile eliminare il metodo di pagamento; riprova.\",\n  \"venmoAppFailedError\": \"Impossibile trovare l'app Venmo sul dispositivo in uso.\",\n  \"unsupportedCardTypeError\": \"Questo tipo di carta non è supportato. Prova con un'altra carta.\",\n  \"applePayTokenizationError\": \"Si è verificato un errore di rete durante l'elaborazione del pagamento con Apple Pay. Riprova.\",\n  \"applePayActiveCardError\": \"Collega una carta supportata al tuo Apple Pay Wallet.\",\n  \"cardholderNameLabel\": \"Titolare della carta\",\n  \"cardNumberLabel\": \"Numero di carta\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 cifre)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 cifre)\",\n  \"cardholderNamePlaceholder\": \"Titolare della carta\",\n  \"expirationDateLabel\": \"Data di scadenza\",\n  \"expirationDateLabelSubheading\": \"(MM/AA)\",\n  \"expirationDatePlaceholder\": \"MM/AA\",\n  \"postalCodeLabel\": \"CAP\",\n  \"payWithCard\": \"Paga con una carta\",\n  \"endingIn\": \"Le cui ultime cifre sono {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Carta\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],160:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"{{paymentSource}}で支払う\",\n  \"chooseAnotherWayToPay\": \"別の支払方法を選択する\",\n  \"chooseAWayToPay\": \"支払方法を選択する\",\n  \"otherWaysToPay\": \"その他の支払方法\",\n  \"edit\": \"編集\",\n  \"doneEditing\": \"完了\",\n  \"editPaymentMethods\": \"支払方法の編集\",\n  \"CreditCardDeleteConfirmationMessage\": \"末尾が{{identifier}}の{{secondaryIdentifier}}カードを削除しますか?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"PayPalアカウント{{identifier}}を削除しますか?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"ユーザー名{{identifier}}のVenmoアカウントを削除してよろしいですか?\",\n  \"genericDeleteConfirmationMessage\": \"この支払い方法を削除してよろしいですか?\",\n  \"deleteCancelButton\": \"キャンセル\",\n  \"deleteConfirmationButton\": \"削除\",\n  \"cardVerification\": \"カード確認\",\n  \"fieldEmptyForCvv\": \"セキュリティコードを入力してください。\",\n  \"fieldEmptyForExpirationDate\": \"有効期限を入力してください。\",\n  \"fieldEmptyForCardholderName\": \"カード保有者の名前を入力してください。\",\n  \"fieldTooLongForCardholderName\": \"カード保有者の名前は256文字未満にしてください。\",\n  \"fieldEmptyForNumber\": \"番号を入力してください。\",\n  \"fieldEmptyForPostalCode\": \"郵便番号を入力してください。\",\n  \"fieldInvalidForCvv\": \"このセキュリティコードは無効です。\",\n  \"fieldInvalidForExpirationDate\": \"この有効期限は無効です。\",\n  \"fieldInvalidForNumber\": \"このカード番号は無効です。\",\n  \"fieldInvalidForPostalCode\": \"この郵便番号は無効です。\",\n  \"genericError\": \"弊社側で問題が発生しました。\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"このクレジットカードは、保存済みの支払方法としてすでに登録されています。\",\n  \"hostedFieldsFailedTokenizationError\": \"情報を確認してもう一度お試しください。\",\n  \"hostedFieldsFieldsInvalidError\": \"情報を確認してもう一度お試しください。\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"ネットワークエラーです。もう一度お試しください。\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"クレジットカードの認証に失敗しました。情報を確認してもう一度お試しください。\",\n  \"paypalButtonMustBeUsed\": \"お客さまの支払いを続行するには、PayPalボタンを使用します。\",\n  \"paypalAccountTokenizationFailedError\": \"PayPalアカウントの追加で問題が発生しました。もう一度お試しください。\",\n  \"paypalFlowFailedError\": \"PayPalへの接続に問題が発生しました。もう一度お試しください。\",\n  \"paypalTokenizationRequestActiveError\": \"PayPal支払いの承認はすでに処理中です。\",\n  \"venmoCanceledError\": \"問題が発生しました。お客さまの端末にインストールされているVenmoアプリが最新のバージョンであること、お使いのブラウザがVenmoへの切り替えをサポートしていることを確認してください。\",\n  \"vaultManagerPaymentMethodDeletionError\": \"支払方法を削除できません。もう一度お試しください。\",\n  \"venmoAppFailedError\": \"お客さまの端末でVenmoアプリが見つかりませんでした。\",\n  \"unsupportedCardTypeError\": \"このカードタイプはサポートされていません。別のカードをご使用ください。\",\n  \"applePayTokenizationError\": \"Apple Payの支払いを処理する際にネットワークエラーが発生しました。もう一度お試しください。\",\n  \"applePayActiveCardError\": \"Apple Payウォレットに対応しているカードを追加してください。\",\n  \"cardholderNameLabel\": \"カード保有者の名前\",\n  \"cardNumberLabel\": \"カード番号\",\n  \"cvvLabel\": \"セキュリティコード\",\n  \"cvvThreeDigitLabelSubheading\": \"(3桁)\",\n  \"cvvFourDigitLabelSubheading\": \"(4桁)\",\n  \"cardholderNamePlaceholder\": \"カード保有者の名前\",\n  \"expirationDateLabel\": \"有効期限\",\n  \"expirationDateLabelSubheading\": \"(MM/YY)\",\n  \"expirationDatePlaceholder\": \"MM/YY\",\n  \"postalCodeLabel\": \"郵便番号\",\n  \"payWithCard\": \"カードで支払う\",\n  \"endingIn\": \"末尾が{{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"カード\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"銀聯(UnionPay)\"\n};\n\n},{}],161:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"{{paymentSource}}(으)로 결제\",\n  \"chooseAnotherWayToPay\": \"다른 결제수단 선택\",\n  \"chooseAWayToPay\": \"결제수단 선택\",\n  \"otherWaysToPay\": \"다른 방법으로 결제\",\n  \"edit\": \"편집\",\n  \"doneEditing\": \"완료\",\n  \"editPaymentMethods\": \"결제수단 편집\",\n  \"CreditCardDeleteConfirmationMessage\": \"끝번호가 {{identifier}}인 {{secondaryIdentifier}} 카드를 삭제하시겠어요?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"PayPal 계정 {{identifier}}을(를) 삭제하시겠어요?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"사용자 이름이 {{identifier}}인 Venmo 계정을 삭제하시겠어요?\",\n  \"genericDeleteConfirmationMessage\": \"이 결제수단을 삭제하시겠어요?\",\n  \"deleteCancelButton\": \"취소\",\n  \"deleteConfirmationButton\": \"삭제\",\n  \"cardVerification\": \"카드 인증\",\n  \"fieldEmptyForCvv\": \"CVV를 입력하세요.\",\n  \"fieldEmptyForExpirationDate\": \"만료일을 입력하세요.\",\n  \"fieldEmptyForCardholderName\": \"카드 소유자 이름을 입력하세요.\",\n  \"fieldTooLongForCardholderName\": \"카드 소유자 이름은 256자 미만이어야 합니다.\",\n  \"fieldEmptyForNumber\": \"번호를 입력하세요.\",\n  \"fieldEmptyForPostalCode\": \"우편번호를 입력하세요.\",\n  \"fieldInvalidForCvv\": \"이 보안 코드가 올바르지 않습니다.\",\n  \"fieldInvalidForExpirationDate\": \"이 만료일이 올바르지 않습니다.\",\n  \"fieldInvalidForNumber\": \"이 카드 번호가 올바르지 않습니다.\",\n  \"fieldInvalidForPostalCode\": \"이 우편번호가 올바르지 않습니다.\",\n  \"genericError\": \"저희 쪽에 문제가 발생했습니다.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"저장된 결제수단에 이미 이 신용카드가 존재합니다.\",\n  \"hostedFieldsFailedTokenizationError\": \"정보를 확인하고 다시 시도해 주세요.\",\n  \"hostedFieldsFieldsInvalidError\": \"정보를 확인하고 다시 시도해 주세요.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"네트워크 오류가 발생했습니다. 다시 시도해 주세요.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"신용카드 인증에 실패했습니다. 정보를 확인하고 다시 시도해 주세요.\",\n  \"paypalButtonMustBeUsed\": \"결제를 계속하려면 PayPal 버튼을 사용하세요.\",\n  \"paypalAccountTokenizationFailedError\": \"PayPal 계정을 추가하는 동안 문제가 발생했습니다. 다시 시도해 주세요.\",\n  \"paypalFlowFailedError\": \"PayPal 계정을 연결하는 동안 문제가 발생했습니다. 다시 시도해 주세요.\",\n  \"paypalTokenizationRequestActiveError\": \"PayPal 결제 승인이 이미 진행 중입니다.\",\n  \"venmoCanceledError\": \"오류가 발생했습니다. 기기에 최신 버전의 Venmo 앱이 설치되어 있으며 브라우저가 Venmo로 전환 기능을 지원하는지 확인하세요.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"결제수단을 삭제할 수 없습니다. 다시 시도해 주세요.\",\n  \"venmoAppFailedError\": \"기기에서 Venmo 앱을 찾을 수 없습니다.\",\n  \"unsupportedCardTypeError\": \"이 카드 형식은 지원되지 않습니다. 다른 카드로 시도해 주세요.\",\n  \"applePayTokenizationError\": \"Apple Pay 결제를 처리하는 동안 네트워크 오류가 발생했습니다. 다시 시도해 주세요.\",\n  \"applePayActiveCardError\": \"Apple Pay 전자지갑에 지원되는 카드를 추가하세요.\",\n  \"cardholderNameLabel\": \"카드 소유자 이름\",\n  \"cardNumberLabel\": \"카드 번호\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3자리)\",\n  \"cvvFourDigitLabelSubheading\": \"(4자리)\",\n  \"cardholderNamePlaceholder\": \"카드 소유자 이름\",\n  \"expirationDateLabel\": \"만료일\",\n  \"expirationDateLabelSubheading\": \"(MM/YY)\",\n  \"expirationDatePlaceholder\": \"MM/YY\",\n  \"postalCodeLabel\": \"우편번호\",\n  \"payWithCard\": \"카드로 결제\",\n  \"endingIn\": \"끝번호: {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"카드\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],162:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Betalen met {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Kies een andere betaalmethode\",\n  \"chooseAWayToPay\": \"Kies een betaalwijze\",\n  \"otherWaysToPay\": \"Andere manieren om te betalen\",\n  \"edit\": \"Bewerk\",\n  \"doneEditing\": \"Gereed\",\n  \"editPaymentMethods\": \"Betaalmethoden aanpassen\",\n  \"CreditCardDeleteConfirmationMessage\": \"{{secondaryIdentifier}}-kaart eindigend op {{identifier}} verwijderen?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"PayPal-rekening {{identifier}} verwijderen?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Weet u zeker dat u Venmo-rekening met gebruikersnaam {{identifier}} wilt verwijderen?\",\n  \"genericDeleteConfirmationMessage\": \"Weet u zeker dat u deze betaalmethode wilt verwijderen?\",\n  \"deleteCancelButton\": \"Annuleren\",\n  \"deleteConfirmationButton\": \"Verwijderen\",\n  \"cardVerification\": \"Kaartcontrole\",\n  \"fieldEmptyForCvv\": \"Vul een CSC in.\",\n  \"fieldEmptyForExpirationDate\": \"Vul een vervaldatum in.\",\n  \"fieldEmptyForCardholderName\": \"Vul een naam voor de kaarthouder in.\",\n  \"fieldTooLongForCardholderName\": \"De naam van de kaarthouder moet korter zijn dan 256 tekens.\",\n  \"fieldEmptyForNumber\": \"Vul een nummer in.\",\n  \"fieldEmptyForPostalCode\": \"Vul een postcode in.\",\n  \"fieldInvalidForCvv\": \"Deze CSC is ongeldig.\",\n  \"fieldInvalidForExpirationDate\": \"Deze vervaldatum is ongeldig.\",\n  \"fieldInvalidForNumber\": \"Dit creditcardnummer is ongeldig.\",\n  \"fieldInvalidForPostalCode\": \"Deze postcode is ongeldig.\",\n  \"genericError\": \"Er is iets fout gegaan.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Deze creditcard staat al geregistreerd als een opgeslagen betaalmethode.\",\n  \"hostedFieldsFailedTokenizationError\": \"Controleer uw gegevens en probeer het opnieuw.\",\n  \"hostedFieldsFieldsInvalidError\": \"Controleer uw gegevens en probeer het opnieuw.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Netwerkfout. Probeer het opnieuw.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"De controle van de creditcard is mislukt. Controleer uw gegevens en probeer het opnieuw.\",\n  \"paypalButtonMustBeUsed\": \"Gebruik de PayPal-knop om door te gaan met uw betaling.\",\n  \"paypalAccountTokenizationFailedError\": \"Er is iets misgegaan bij het toevoegen van de PayPal-rekening. Probeer het opnieuw.\",\n  \"paypalFlowFailedError\": \"Er is iets misgegaan bij de verbinding met PayPal. Probeer het opnieuw.\",\n  \"paypalTokenizationRequestActiveError\": \"De autorisatie van de PayPal-betaling is al in behandeling.\",\n  \"venmoCanceledError\": \"Er ging iets fout. Controleer of de meest recente versie van de Venmo-app op je apparaat is geïnstalleerd en dat je browser overschakelen naar Venmo ondersteunt.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Kan de betaalmethode niet verwijderen, probeer het opnieuw.\",\n  \"venmoAppFailedError\": \"De Venmo-app is niet aangetroffen op je apparaat.\",\n  \"unsupportedCardTypeError\": \"Dit type creditcard wordt niet ondersteund. Gebruik een andere creditcard.\",\n  \"applePayTokenizationError\": \"Er is een netwerkfout opgetreden bij het verwerken van de Apple Pay-betaling. Probeer het opnieuw.\",\n  \"applePayActiveCardError\": \"Voeg een ondersteunde creditcard toe aan je Apple Pay-wallet.\",\n  \"cardholderNameLabel\": \"Naam kaarthouder\",\n  \"cardNumberLabel\": \"Creditcardnummer\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 cijfers)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 cijfers)\",\n  \"cardholderNamePlaceholder\": \"Naam kaarthouder\",\n  \"expirationDateLabel\": \"VervaldatumB\",\n  \"expirationDateLabelSubheading\": \"(MM/JJ)\",\n  \"expirationDatePlaceholder\": \"MM/JJ\",\n  \"postalCodeLabel\": \"Postcode\",\n  \"payWithCard\": \"Betalen met creditcard\",\n  \"endingIn\": \"Eindigend op {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Creditcard\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],163:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Betaling med {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Velg en annen måte å betale på\",\n  \"chooseAWayToPay\": \"Velg betalingsmåte\",\n  \"otherWaysToPay\": \"Andre måter å betale på\",\n  \"edit\": \"Rediger\",\n  \"doneEditing\": \"Fullført\",\n  \"editPaymentMethods\": \"Endre betalingsmetodene dine\",\n  \"CreditCardDeleteConfirmationMessage\": \"Vil du slette {{secondaryIdentifier}}-kortet som slutter på {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Vil du slette PayPal-kontoen {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Er du sikker på at du vil slette Venmo-kontoen med brukernavnet {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Er du sikker på at du vil slette denne betalingsmetoden?\",\n  \"deleteCancelButton\": \"Avbryt\",\n  \"deleteConfirmationButton\": \"Slett\",\n  \"cardVerification\": \"Kortbekreftelse\",\n  \"fieldEmptyForCvv\": \"Oppgi en kortsikkerhetskode (CVV).\",\n  \"fieldEmptyForExpirationDate\": \"Oppgi en utløpsdato.\",\n  \"fieldEmptyForCardholderName\": \"Oppgi et navn for kortinnehaveren.\",\n  \"fieldTooLongForCardholderName\": \"Makslengden for kortinnehaverens navn er 256 tegn.\",\n  \"fieldEmptyForNumber\": \"Oppgi et nummer.\",\n  \"fieldEmptyForPostalCode\": \"Oppgi et postnummer.\",\n  \"fieldInvalidForCvv\": \"Denne sikkerhetskoden er ikke gyldig.\",\n  \"fieldInvalidForExpirationDate\": \"Denne utløpsdatoen er ikke gyldig.\",\n  \"fieldInvalidForNumber\": \"Dette kortnummeret er ikke gyldig.\",\n  \"fieldInvalidForPostalCode\": \"Dette postnummeret er ikke gyldig.\",\n  \"genericError\": \"Noe gikk galt hos oss.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Dette betalingskortet eksisterer allerede som en lagret betalingsmetode.\",\n  \"hostedFieldsFailedTokenizationError\": \"Kontroller informasjonen og prøv på nytt.\",\n  \"hostedFieldsFieldsInvalidError\": \"Kontroller informasjonen og prøv på nytt.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Nettverksfeil. Prøv på nytt.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Bekreftelsen av betalingskortet mislyktes. Kontroller informasjonen og prøv på nytt.\",\n  \"paypalButtonMustBeUsed\": \"Bruk PayPal-knappen for å fortsette med betalingen.\",\n  \"paypalAccountTokenizationFailedError\": \"Noe gikk galt da PayPal-kontoen ble lagt til. Prøv på nytt.\",\n  \"paypalFlowFailedError\": \"Det oppsto et problem med tilkoblingen til PayPal. Prøv på nytt.\",\n  \"paypalTokenizationRequestActiveError\": \"Godkjenning av PayPal-betalingen pågår allerede\",\n  \"venmoCanceledError\": \"Noe gikk galt. Kontroller at du har installert den nyeste versjonen av Venmo-appen på enheten og at nettleseren din støtter bytte til Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Kunne ikke slette betalingsmetoden. Prøv på nytt.\",\n  \"venmoAppFailedError\": \"Finner ikke Venmo-appen på enheten.\",\n  \"unsupportedCardTypeError\": \"Denne korttypen støttes ikke. Prøv med et annet kort.\",\n  \"applePayTokenizationError\": \"Det oppsto en nettverksfeil under behandlingen av Apple Pay-betalingen. Prøv på nytt.\",\n  \"applePayActiveCardError\": \"Legg til et kort som støttes i Apple Pay-lommeboken din.\",\n  \"cardholderNameLabel\": \"Kortinnehaverens navn\",\n  \"cardNumberLabel\": \"Kortnummer\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 siffer)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 siffer)\",\n  \"cardholderNamePlaceholder\": \"Kortinnehaverens navn\",\n  \"expirationDateLabel\": \"Utløpsdato\",\n  \"expirationDateLabelSubheading\": \"(MM/ÅÅ)\",\n  \"expirationDatePlaceholder\": \"MM/ÅÅ\",\n  \"postalCodeLabel\": \"Postnummer\",\n  \"payWithCard\": \"Betal med kort\",\n  \"endingIn\": \"Slutter på {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Kort\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],164:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Źródło finansowania płatności: {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Wybierz inne źródło finansowania płatności\",\n  \"chooseAWayToPay\": \"Wybierz źródło finansowania płatności\",\n  \"otherWaysToPay\": \"Inne źródła finansowania płatności\",\n  \"edit\": \"Edytuj\",\n  \"doneEditing\": \"Gotowe\",\n  \"editPaymentMethods\": \"Edytuj źródła finansowania płatności\",\n  \"CreditCardDeleteConfirmationMessage\": \"Usunąć kartę {{secondaryIdentifier}} o numerze zakończonym cyframi {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Usunąć konto PayPal {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Czy na pewno chcesz usunąć konto Venmo z nazwą użytkownika {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Czy na pewno chcesz usunąć to źródło finansowania płatności?\",\n  \"deleteCancelButton\": \"Anuluj\",\n  \"deleteConfirmationButton\": \"Usuń\",\n  \"cardVerification\": \"Weryfikacja karty\",\n  \"fieldEmptyForCvv\": \"Podaj kod bezpieczeństwa.\",\n  \"fieldEmptyForExpirationDate\": \"Podaj datę ważności.\",\n  \"fieldEmptyForCardholderName\": \"Podaj imię i nazwisko posiadacza karty.\",\n  \"fieldTooLongForCardholderName\": \"Imię i nazwisko posiadacza karty musi mieć mniej niż 256 znaków.\",\n  \"fieldEmptyForNumber\": \"Podaj numer.\",\n  \"fieldEmptyForPostalCode\": \"Podaj kod pocztowy.\",\n  \"fieldInvalidForCvv\": \"Podany kod bezpieczeństwa jest nieprawidłowy.\",\n  \"fieldInvalidForExpirationDate\": \"Podana data ważności jest nieprawidłowa.\",\n  \"fieldInvalidForNumber\": \"Podany numer karty jest nieprawidłowy.\",\n  \"fieldInvalidForPostalCode\": \"Podany kod pocztowy jest nieprawidłowy.\",\n  \"genericError\": \"Wystąpił błąd po naszej stronie.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Ta karta kredytowa jest już zapisana jako źródło finansowania płatności.\",\n  \"hostedFieldsFailedTokenizationError\": \"Sprawdź swoje informacje i spróbuj ponownie.\",\n  \"hostedFieldsFieldsInvalidError\": \"Sprawdź swoje informacje i spróbuj ponownie.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Błąd sieci. Spróbuj ponownie.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Weryfikacja karty kredytowej nie powiodła się. Sprawdź swoje informacje i spróbuj ponownie.\",\n  \"paypalButtonMustBeUsed\": \"Użyj przycisku PayPal, aby kontynuować płatność.\",\n  \"paypalAccountTokenizationFailedError\": \"Coś poszło nie tak podczas dodawania konta PayPal. Spróbuj ponownie.\",\n  \"paypalFlowFailedError\": \"Coś poszło nie tak podczas łączenia z systemem PayPal. Spróbuj ponownie.\",\n  \"paypalTokenizationRequestActiveError\": \"Autoryzacja płatności PayPal jest już w trakcie realizacji.\",\n  \"venmoCanceledError\": \"Wystąpił problem. Upewnij się, czy na swoim urządzeniu masz zainstalowaną najnowszą wersję aplikacji Venmo i Twoja przeglądarka ją obsługuje.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Nie można usunąć źródła finansowania płatności. Spróbuj ponownie.\",\n  \"venmoAppFailedError\": \"Nie można odnaleźć aplikacji Venmo na urządzeniu.\",\n  \"unsupportedCardTypeError\": \"Ten typ karty nie jest obsługiwany. Spróbuj użyć innej karty.\",\n  \"applePayTokenizationError\": \"Wystąpił błąd sieci podczas przetwarzania płatności Apple Pay. Spróbuj ponownie.\",\n  \"applePayActiveCardError\": \"Dodaj obsługiwaną kartę do portfela Apple Pay.\",\n  \"cardholderNameLabel\": \"Imię i nazwisko posiadacza karty\",\n  \"cardNumberLabel\": \"Numer karty\",\n  \"cvvLabel\": \"Kod CVC\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 cyfry)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 cyfry)\",\n  \"cardholderNamePlaceholder\": \"Imię i nazwisko posiadacza karty\",\n  \"expirationDateLabel\": \"Data ważności\",\n  \"expirationDateLabelSubheading\": \"(MM/RR)\",\n  \"expirationDatePlaceholder\": \"MM/RR\",\n  \"postalCodeLabel\": \"Kod pocztowy\",\n  \"payWithCard\": \"Zapłać kartą\",\n  \"endingIn\": \"O numerze zakończonym cyframi {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Karta\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],165:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Pagando com {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Escolher outro meio de pagamento\",\n  \"chooseAWayToPay\": \"Escolher um meio de pagamento\",\n  \"otherWaysToPay\": \"Outro meio de pagamento\",\n  \"edit\": \"Editar\",\n  \"doneEditing\": \"Concluído\",\n  \"editPaymentMethods\": \"Editar meios de pagamento\",\n  \"CreditCardDeleteConfirmationMessage\": \"Excluir cartão com {{secondaryIdentifier}} com final {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Excluir conta do PayPal {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Tem certeza de que deseja excluir a conta do Venmo com o nome de usuário {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Tem certeza de que deseja excluir este meio de pagamento?\",\n  \"deleteCancelButton\": \"Cancelar\",\n  \"deleteConfirmationButton\": \"Excluir\",\n  \"cardVerification\": \"Verificação do cartão\",\n  \"fieldEmptyForCvv\": \"Informe o Código de Segurança.\",\n  \"fieldEmptyForExpirationDate\": \"Informe a data de vencimento.\",\n  \"fieldEmptyForCardholderName\": \"Informe o nome do titular do cartão.\",\n  \"fieldTooLongForCardholderName\": \"O nome do titular do cartão deve ter menos de 256 caracteres.\",\n  \"fieldEmptyForNumber\": \"Informe um número.\",\n  \"fieldEmptyForPostalCode\": \"Informe um CEP.\",\n  \"fieldInvalidForCvv\": \"Este código de segurança não é válido.\",\n  \"fieldInvalidForExpirationDate\": \"Esta data de vencimento não é válida.\",\n  \"fieldInvalidForNumber\": \"O número do cartão não é válido.\",\n  \"fieldInvalidForPostalCode\": \"Este CEP não é válido.\",\n  \"genericError\": \"Ocorreu um erro.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Este cartão de crédito já está salvo em seus meios de pagamento.\",\n  \"hostedFieldsFailedTokenizationError\": \"Verifique as informações e tente novamente.\",\n  \"hostedFieldsFieldsInvalidError\": \"Verifique as informações e tente novamente.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Erro de rede. Tente novamente.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Falha ao verificar o cartão de crédito. Verifique as informações e tente novamente.\",\n  \"paypalButtonMustBeUsed\": \"Use o botão do PayPal para prosseguir com o seu pagamento.\",\n  \"paypalAccountTokenizationFailedError\": \"Ocorreu um erro ao adicionar a conta do PayPal. Tente novamente.\",\n  \"paypalFlowFailedError\": \"Ocorreu um erro de conexão com o PayPal. Tente novamente.\",\n  \"paypalTokenizationRequestActiveError\": \"A autorização de pagamento do PayPal já está em andamento.\",\n  \"venmoCanceledError\": \"Ocorreu um erro. Certifique-se de ter a versão mais recente do aplicativo Venmo instalado no seu dispositivo e que o seu navegador suporte a mudança para o Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Não é possível excluir o meio de pagamento, tente novamente.\",\n  \"venmoAppFailedError\": \"Não foi possível encontrar o aplicativo Venmo no seu dispositivo.\",\n  \"unsupportedCardTypeError\": \"Este tipo de cartão não é aceito. Experimente outro cartão.\",\n  \"applePayTokenizationError\": \"Ocorreu um erro de rede ao processar o pagamento com Apple Pay. Tente novamente.\",\n  \"applePayActiveCardError\": \"Adicione cartão suportado à sua carteira do Apple Pay.\",\n  \"cardholderNameLabel\": \"Nome do titular do cartão\",\n  \"cardNumberLabel\": \"Número do cartão\",\n  \"cvvLabel\": \"CSC\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 dígitos)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 dígitos)\",\n  \"cardholderNamePlaceholder\": \"Nome do titular do cartão\",\n  \"expirationDateLabel\": \"Data de vencimento\",\n  \"expirationDateLabelSubheading\": \"(MM/AA)\",\n  \"expirationDatePlaceholder\": \"MM/AA\",\n  \"postalCodeLabel\": \"CEP\",\n  \"payWithCard\": \"Pague com seu cartão\",\n  \"endingIn\": \"Com final {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Cartão\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"Crédito do PayPal\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],166:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Pagar com {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Escolher outra forma de pagamento\",\n  \"chooseAWayToPay\": \"Escolha um meio de pagamento\",\n  \"otherWaysToPay\": \"Outras formas de pagamento\",\n  \"edit\": \"Editar\",\n  \"doneEditing\": \"Concluído\",\n  \"editPaymentMethods\": \"Editar meios de pagamento\",\n  \"CreditCardDeleteConfirmationMessage\": \"Eliminar o cartão {{secondaryIdentifier}} terminado em {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Eliminar {{identifier}} da conta PayPal?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Tem a certeza de que pretende eliminar a conta Venmo com o nome de utilizador {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Tem certeza de que pretende eliminar este meio de pagamento?\",\n  \"deleteCancelButton\": \"Cancelar\",\n  \"deleteConfirmationButton\": \"Eliminar\",\n  \"cardVerification\": \"Verificação de cartão\",\n  \"fieldEmptyForCvv\": \"Introduza o código CVV.\",\n  \"fieldEmptyForExpirationDate\": \"Introduza a data de validade.\",\n  \"fieldEmptyForCardholderName\": \"Introduza um nome do titular do cartão.\",\n  \"fieldTooLongForCardholderName\": \"O nome do titular do cartão tem de ter menos de 256 carateres.\",\n  \"fieldEmptyForNumber\": \"Introduza um número.\",\n  \"fieldEmptyForPostalCode\": \"Introduza o código postal.\",\n  \"fieldInvalidForCvv\": \"Este código de segurança não é válido.\",\n  \"fieldInvalidForExpirationDate\": \"Esta data de validade não é correta.\",\n  \"fieldInvalidForNumber\": \"Este número de cartão não é válido.\",\n  \"fieldInvalidForPostalCode\": \"Este código postal não é válido.\",\n  \"genericError\": \"Tudo indica que houve um problema.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Este cartão de crédito já está registado como um meio de pagamento guardado.\",\n  \"hostedFieldsFailedTokenizationError\": \"Verifique os dados e tente novamente.\",\n  \"hostedFieldsFieldsInvalidError\": \"Verifique os dados e tente novamente.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Erro de rede. Tente novamente.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"A verificação do cartão de crédito falhou. Verifique os dados e tente novamente.\",\n  \"paypalButtonMustBeUsed\": \"Use o botão PayPal para continuar com o seu pagamento.\",\n  \"paypalAccountTokenizationFailedError\": \"Ocorreu um erro ao associar a conta PayPal. Tente novamente.\",\n  \"paypalFlowFailedError\": \"Ocorreu um erro na ligação com PayPal. Tente novamente.\",\n  \"paypalTokenizationRequestActiveError\": \"Já há uma autorização de pagamento PayPal em curso.\",\n  \"venmoCanceledError\": \"Ocorreu um erro. Certifique-se de que tem a versão mais recente da aplicação Venmo instalada no seu dispositivo e que o navegador suporta a mudança para o Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Não é possível eliminar o meio de pagamento, tente novamente.\",\n  \"venmoAppFailedError\": \"Não foi possível encontrar a aplicação Venmo no dispositivo.\",\n  \"unsupportedCardTypeError\": \"Este tipo de cartão não é suportado. Tente usar outro cartão.\",\n  \"applePayTokenizationError\": \"Ocorreu um erro de rede ao processar o pagamento com Apple Pay. Tente novamente.\",\n  \"applePayActiveCardError\": \"Adicione um cartão suportado à sua carteira Apple Pay.\",\n  \"cardholderNameLabel\": \"Nome do titular do cartão\",\n  \"cardNumberLabel\": \"Número do cartão\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 dígitos)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 dígitos)\",\n  \"cardholderNamePlaceholder\": \"Nome do titular do cartão\",\n  \"expirationDateLabel\": \"Data de validade\",\n  \"expirationDateLabelSubheading\": \"(MM/AA)\",\n  \"expirationDatePlaceholder\": \"MM/AA\",\n  \"postalCodeLabel\": \"Código postal\",\n  \"payWithCard\": \"Pagar com cartão\",\n  \"endingIn\": \"Terminado em {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Cartão\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],167:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Способы оплаты: {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Выберите другой способ оплаты\",\n  \"chooseAWayToPay\": \"Выберите способ оплаты\",\n  \"otherWaysToPay\": \"Другие способы оплаты\",\n  \"edit\": \"Редактировать\",\n  \"doneEditing\": \"Готово\",\n  \"editPaymentMethods\": \"Редактировать способы оплаты\",\n  \"CreditCardDeleteConfirmationMessage\": \"Удалить карту {{secondaryIdentifier}}, оканчивающуюся на {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Удалить счет PayPal {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Вы действительно хотите удалить счет Venmo с именем пользователя {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Вы действительно хотите удалить этот способ оплаты?\",\n  \"deleteCancelButton\": \"Отмена\",\n  \"deleteConfirmationButton\": \"Удалить\",\n  \"cardVerification\": \"Проверка карты\",\n  \"fieldEmptyForCvv\": \"Укажите код безопасности.\",\n  \"fieldEmptyForExpirationDate\": \"Укажите дату окончания срока действия.\",\n  \"fieldEmptyForCardholderName\": \"Введите имя и фамилию владельца карты.\",\n  \"fieldTooLongForCardholderName\": \"Имя владельца карты должно содержать не более 256 символов.\",\n  \"fieldEmptyForNumber\": \"Введите номер.\",\n  \"fieldEmptyForPostalCode\": \"Укажите почтовый индекс.\",\n  \"fieldInvalidForCvv\": \"Этот код безопасности недействителен.\",\n  \"fieldInvalidForExpirationDate\": \"Эта дата окончания срока действия недействительна.\",\n  \"fieldInvalidForNumber\": \"Этот номер карты недействителен.\",\n  \"fieldInvalidForPostalCode\": \"Этот почтовый индекс недействителен.\",\n  \"genericError\": \"Возникла проблема с нашей стороны.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Эта кредитная карта уже указана как сохраненный источник средств.\",\n  \"hostedFieldsFailedTokenizationError\": \"Проверьте правильность ввода данных и повторите попытку.\",\n  \"hostedFieldsFieldsInvalidError\": \"Проверьте правильность ввода данных и повторите попытку.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Ошибка сети. Повторите попытку.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Проверка банковской карты не выполнена. Проверьте правильность ввода данных и повторите попытку.\",\n  \"paypalButtonMustBeUsed\": \"Используйте кнопку PayPal, чтобы продолжить совершение оплаты.\",\n  \"paypalAccountTokenizationFailedError\": \"Что-то пошло не так — не удалось добавить учетную запись PayPal. Повторите попытку.\",\n  \"paypalFlowFailedError\": \"Что-то пошло не так — не удалось подключиться к системе PayPal. Повторите попытку.\",\n  \"paypalTokenizationRequestActiveError\": \"Выполняется авторизация платежа PayPal.\",\n  \"venmoCanceledError\": \"Возникла ошибка. Просим вас убедиться, что у вас установлена новейшая версия приложения Venmo и ваш браузер поддерживает переключение к Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Не удалось удалить способ оплаты. Повторите попытку.\",\n  \"venmoAppFailedError\": \"Приложение Venmo не обнаружено на вашем устройстве.\",\n  \"unsupportedCardTypeError\": \"Этот тип карты не поддерживается. Попробуйте воспользоваться другой картой.\",\n  \"applePayTokenizationError\": \"При обработке платежа через Apple Pay возникла сетевая ошибка. Повторите попытку.\",\n  \"applePayActiveCardError\": \"Добавьте поддерживаемую карту к своему счету Apple Pay.\",\n  \"cardholderNameLabel\": \"Имя и фамилия владельца\",\n  \"cardNumberLabel\": \"Номер карты\",\n  \"cvvLabel\": \"Код безопасности\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 цифры)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 цифры)\",\n  \"cardholderNamePlaceholder\": \"Имя и фамилия владельца\",\n  \"expirationDateLabel\": \"Срок действия\",\n  \"expirationDateLabelSubheading\": \"(ММ/ГГ)\",\n  \"expirationDatePlaceholder\": \"ММ/ГГ\",\n  \"postalCodeLabel\": \"Индекс\",\n  \"payWithCard\": \"Оплатить картой\",\n  \"endingIn\": \"Последние четыре цифры номера карты: {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Карта\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"Кредит PayPal\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],168:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"Betalas med {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"Välj ett annat sätt att betala\",\n  \"chooseAWayToPay\": \"Välj hur du vill betala\",\n  \"otherWaysToPay\": \"Andra sätt att betala\",\n  \"edit\": \"Ändra\",\n  \"doneEditing\": \"Klart\",\n  \"editPaymentMethods\": \"Redigera betalningsmetoder\",\n  \"CreditCardDeleteConfirmationMessage\": \"Ta bort {{secondaryIdentifier}}-kort som slutar på {{identifier}}?\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"Ta bort PayPal-konto {{identifier}}?\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"Är du säker på att du vill ta bort Venmo-konto med användarnamn {{identifier}}?\",\n  \"genericDeleteConfirmationMessage\": \"Är du säker på att du vill ta bort den här betalningsmetoden?\",\n  \"deleteCancelButton\": \"Avbryt\",\n  \"deleteConfirmationButton\": \"Ta bort\",\n  \"cardVerification\": \"Kortverifiering\",\n  \"fieldEmptyForCvv\": \"Fyll i en CVV-kod.\",\n  \"fieldEmptyForExpirationDate\": \"Fyll i ett utgångsdatum.\",\n  \"fieldEmptyForCardholderName\": \"Fyll i kortinnehavarens namn.\",\n  \"fieldTooLongForCardholderName\": \"Kortinnehavarens namn måste vara kortare än 256 tecken.\",\n  \"fieldEmptyForNumber\": \"Fyll i ett nummer.\",\n  \"fieldEmptyForPostalCode\": \"Fyll i ett postnummer.\",\n  \"fieldInvalidForCvv\": \"Den här säkerhetskoden är inte giltig.\",\n  \"fieldInvalidForExpirationDate\": \"Det här utgångsdatumet är inte giltigt.\",\n  \"fieldInvalidForNumber\": \"Det här kortnumret är inte giltigt.\",\n  \"fieldInvalidForPostalCode\": \"Det här postnumret är inte giltigt.\",\n  \"genericError\": \"Ett fel uppstod.\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"Det här betalkortet finns redan som en sparad betalningsmetod.\",\n  \"hostedFieldsFailedTokenizationError\": \"Kontrollera uppgifterna och försök igen.\",\n  \"hostedFieldsFieldsInvalidError\": \"Kontrollera uppgifterna och försök igen.\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"Nätverksfel. Försök igen.\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"Verifieringen av betalkort misslyckades. Kontrollera uppgifterna och försök igen.\",\n  \"paypalButtonMustBeUsed\": \"Använd PayPal-knappen för att fortsätta med din betalning.\",\n  \"paypalAccountTokenizationFailedError\": \"Ett fel uppstod när PayPal-kontot skulle läggas till. Försök igen.\",\n  \"paypalFlowFailedError\": \"Ett fel uppstod när anslutningen till PayPal skulle upprättas. Försök igen.\",\n  \"paypalTokenizationRequestActiveError\": \"Betalningsgodkännandet för PayPal behandlas redan.\",\n  \"venmoCanceledError\": \"Något gick fel. Se till att du har den senaste versionen av Venmo-appen installerad på din enhet och att webbläsaren stöder att gå över till Venmo.\",\n  \"vaultManagerPaymentMethodDeletionError\": \"Det gick inte att ta bort betalningsmetoden. Försök igen.\",\n  \"venmoAppFailedError\": \"Venmo-appen kunde inte hittas på din enhet.\",\n  \"unsupportedCardTypeError\": \"Den här korttypen stöds inte. Pröva med ett annat kort.\",\n  \"applePayTokenizationError\": \"Ett nätverksfel inträffade när Apple Pay-betalningen skulle behandlas. Försök igen.\",\n  \"applePayActiveCardError\": \"Lägg till ett kort som stöds i Apple Pay-e-plånboken.\",\n  \"cardholderNameLabel\": \"Kortinnehavarens namn\",\n  \"cardNumberLabel\": \"Kortnummer\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 siffror)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 siffror)\",\n  \"cardholderNamePlaceholder\": \"Kortinnehavarens namn\",\n  \"expirationDateLabel\": \"Utgångsdatum\",\n  \"expirationDateLabelSubheading\": \"(MM/ÅÅ)\",\n  \"expirationDatePlaceholder\": \"MM/ÅÅ\",\n  \"postalCodeLabel\": \"Postnummer\",\n  \"payWithCard\": \"Betala med kort\",\n  \"endingIn\": \"Slutar på {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"Kort\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],169:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"การชำระเงินด้วย {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"เลือกวิธีอื่นเพื่อชำระเงิน\",\n  \"chooseAWayToPay\": \"เลือกวิธีชำระเงิน\",\n  \"otherWaysToPay\": \"วิธีอื่นๆ ในการชำระเงิน\",\n  \"edit\": \"แก้ไข\",\n  \"doneEditing\": \"เสร็จแล้ว\",\n  \"editPaymentMethods\": \"แก้ไขวิธีการชำระเงิน\",\n  \"CreditCardDeleteConfirmationMessage\": \"ลบบัตร {{secondaryIdentifier }} ที่ลงท้ายด้วย {{identifier}} หรือไม่\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"ลบ {{identifier}} บัญชี PayPal หรือไม่\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"คุณมั่นใจว่าต้องการลบบัญชี Venmo ที่มีชื่อผู้ใช้ {{identifier}} หรือไม่\",\n  \"genericDeleteConfirmationMessage\": \"คุณมั่นใจว่าต้องการลบวิธีการชำระเงินนี้หรือไม่\",\n  \"deleteCancelButton\": \"ยกเลิก\",\n  \"deleteConfirmationButton\": \"ลบ\",\n  \"cardVerification\": \"การตรวจสอบยืนยันบัตร\",\n  \"fieldEmptyForCvv\": \"โปรดกรอก CVV (รหัสการตรวจสอบยืนยันบัตร)\",\n  \"fieldEmptyForExpirationDate\": \"โปรดกรอกวันที่หมดอายุ\",\n  \"fieldEmptyForCardholderName\": \"โปรดกรอกชื่อเจ้าของบัตร\",\n  \"fieldTooLongForCardholderName\": \"ชื่อผู้ถือบัตรจะต้องไม่เกิน 256 อักขระ\",\n  \"fieldEmptyForNumber\": \"โปรดกรอกหมายเลข\",\n  \"fieldEmptyForPostalCode\": \"โปรดกรอกรหัสไปรษณีย์\",\n  \"fieldInvalidForCvv\": \"รหัสความปลอดภัยนี้ไม่ถูกต้อง\",\n  \"fieldInvalidForExpirationDate\": \"วันที่หมดอายุนี้ไม่ถูกต้อง\",\n  \"fieldInvalidForNumber\": \"หมายเลขบัตรนี้ไม่ถูกต้อง\",\n  \"fieldInvalidForPostalCode\": \"รหัสไปรษณีย์นี้ไม่ถูกต้อง\",\n  \"genericError\": \"เกิดข้อผิดพลาดขึ้นในระบบของเรา\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"บัตรเครดิตนี้ถูกบันทึกไว้เป็นวิธีการชำระเงิน\",\n  \"hostedFieldsFailedTokenizationError\": \"โปรดตรวจสอบข้อมูลของคุณ แล้วลองใหม่อีกครั้ง\",\n  \"hostedFieldsFieldsInvalidError\": \"โปรดตรวจสอบข้อมูลของคุณ แล้วลองใหม่อีกครั้ง\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"ข้อผิดพลาดด้านเครือข่าย โปรดลองอีกครั้ง\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"การตรวจสอบยืนยันบัตรเครดิตล้มเหลว โปรดตรวจสอบข้อมูลของคุณ แล้วลองใหม่อีกครั้ง\",\n  \"paypalButtonMustBeUsed\": \"ใช้ปุ่ม PayPal เพื่อดำเนินการชำระเงินต่อ\",\n  \"paypalAccountTokenizationFailedError\": \"เกิดข้อผิดพลาดในการเพิ่มบัญชี PayPal โปรดลองอีกครั้ง\",\n  \"paypalFlowFailedError\": \"เกิดข้อผิดพลาดในการเชื่อมต่อกับ PayPal โปรดลองอีกครั้ง\",\n  \"paypalTokenizationRequestActiveError\": \"การอนุญาตการชำระเงินของ PayPal อยู่ในระหว่างดำเนินการ\",\n  \"venmoCanceledError\": \"เกิดข้อผิดพลาดบางประการ ตรวจสอบว่าคุณมีแอป Venmo เวอร์ชันล่าสุดติดตั้งในอุปกรณ์ของคุณ และมีเบราเซอร์ที่รองรับ Venmo\",\n  \"vaultManagerPaymentMethodDeletionError\": \"ไม่สามารถลบวิธีการชำระเงินได้ ลองอีกครั้ง\",\n  \"venmoAppFailedError\": \"ไม่พบแอป Venmo บนอุปกรณ์ของคุณ\",\n  \"unsupportedCardTypeError\": \"ไม่รองรับบัตรประเภทนี้ โปรดลองใช้บัตรใบอื่น\",\n  \"applePayTokenizationError\": \"เกิดข้อผิดพลาดด้านเครือข่ายขึ้นขณะดำเนินการชำระเงินด้วย Apple Pay โปรดลองอีกครั้ง\",\n  \"applePayActiveCardError\": \"เพิ่มบัตรที่รองรับในกระเป๋าสตางค์ Apple Pay ของคุณ\",\n  \"cardholderNameLabel\": \"ชื่อเจ้าของบัตร\",\n  \"cardNumberLabel\": \"หมายเลขบัตร\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"(3 หลัก)\",\n  \"cvvFourDigitLabelSubheading\": \"(4 หลัก)\",\n  \"cardholderNamePlaceholder\": \"ชื่อเจ้าของบัตร\",\n  \"expirationDateLabel\": \"วันหมดอายุ\",\n  \"expirationDateLabelSubheading\": \"(ดด/ปป)\",\n  \"expirationDatePlaceholder\": \"ดด/ปป\",\n  \"postalCodeLabel\": \"รหัสไปรษณีย์\",\n  \"payWithCard\": \"ชำระเงินด้วยบัตร\",\n  \"endingIn\": \"ลงท้ายด้วย {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"บัตร\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],170:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"正在使用{{paymentSource}}付款\",\n  \"chooseAnotherWayToPay\": \"选择其他付款方式\",\n  \"chooseAWayToPay\": \"选择付款方式\",\n  \"otherWaysToPay\": \"其他付款方式\",\n  \"edit\": \"编辑\",\n  \"doneEditing\": \"完成\",\n  \"editPaymentMethods\": \"编辑付款方式\",\n  \"CreditCardDeleteConfirmationMessage\": \"删除尾号为{{identifier}}的{{secondaryIdentifier}}卡？\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"删除PayPal账户{{identifier}}？\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"确定要删除用户名为{{identifier}}的Venmo账户吗？\",\n  \"genericDeleteConfirmationMessage\": \"确定要删除该付款方式吗？\",\n  \"deleteCancelButton\": \"取消\",\n  \"deleteConfirmationButton\": \"删除\",\n  \"cardVerification\": \"卡验证\",\n  \"fieldEmptyForCvv\": \"请填写CVV。\",\n  \"fieldEmptyForExpirationDate\": \"请填写有效期限。\",\n  \"fieldEmptyForCardholderName\": \"请填写持卡人的姓名。\",\n  \"fieldTooLongForCardholderName\": \"持卡人姓名必须少于256个字符。\",\n  \"fieldEmptyForNumber\": \"请填写一个号码。\",\n  \"fieldEmptyForPostalCode\": \"请填写邮政编码。\",\n  \"fieldInvalidForCvv\": \"此安全代码无效。\",\n  \"fieldInvalidForExpirationDate\": \"此有效期限无效。\",\n  \"fieldInvalidForNumber\": \"此卡号无效。\",\n  \"fieldInvalidForPostalCode\": \"此邮政编码无效。\",\n  \"genericError\": \"我们遇到了一些问题\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"此信用卡已作为保存后的付款方式存在。\",\n  \"hostedFieldsFailedTokenizationError\": \"请检查您的信息，然后重试。\",\n  \"hostedFieldsFieldsInvalidError\": \"请检查您的信息，然后重试。\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"网络错误。请重试。\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"信用卡验证失败。请检查您的信息，然后重试。\",\n  \"paypalButtonMustBeUsed\": \"使用PayPal按钮继续进行付款。\",\n  \"paypalAccountTokenizationFailedError\": \"添加PayPal账户时出错。请重试。\",\n  \"paypalFlowFailedError\": \"连接到PayPal时出错。请重试。\",\n  \"paypalTokenizationRequestActiveError\": \"PayPal付款授权已在进行中。\",\n  \"venmoCanceledError\": \"我们遇到了问题。请确保您的设备上已安装最新版本的Venmo应用，并且您的浏览器支持切换到Venmo。\",\n  \"vaultManagerPaymentMethodDeletionError\": \"无法删除付款方式，请重试。\",\n  \"venmoAppFailedError\": \"在您的设备上找不到Venmo应用。\",\n  \"unsupportedCardTypeError\": \"不支持该卡类型。请尝试其他卡。\",\n  \"applePayTokenizationError\": \"处理Apple Pay付款时出现网络错误。请重试。\",\n  \"applePayActiveCardError\": \"请添加受支持的卡到您的Apple Pay钱包。\",\n  \"cardholderNameLabel\": \"持卡人姓名\",\n  \"cardNumberLabel\": \"卡号\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"（3位数）\",\n  \"cvvFourDigitLabelSubheading\": \"（4位数）\",\n  \"cardholderNamePlaceholder\": \"持卡人姓名\",\n  \"expirationDateLabel\": \"有效期限\",\n  \"expirationDateLabelSubheading\": \"（MM/YY）\",\n  \"expirationDatePlaceholder\": \"MM/YY\",\n  \"postalCodeLabel\": \"邮政编码\",\n  \"payWithCard\": \"用卡付款\",\n  \"endingIn\": \"尾号为{{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"卡\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"银联\"\n};\n\n},{}],171:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"付款方式為 {{paymentSource}}\",\n  \"chooseAnotherWayToPay\": \"選擇其他付款方式\",\n  \"chooseAWayToPay\": \"選擇付款方式\",\n  \"otherWaysToPay\": \"其他付款方式\",\n  \"edit\": \"編輯\",\n  \"doneEditing\": \"完成\",\n  \"editPaymentMethods\": \"編輯付款方式\",\n  \"CreditCardDeleteConfirmationMessage\": \"要刪除末碼為 {{identifier}} 的 {{secondaryIdentifier}} 卡嗎？\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"要刪除 PayPal 帳戶 {{identifier}} 嗎？\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"確定要刪除使用者名稱為 {{identifier}} 的 Venmo 帳戶嗎？\",\n  \"genericDeleteConfirmationMessage\": \"確定要刪除此付款方式嗎？\",\n  \"deleteCancelButton\": \"取消\",\n  \"deleteConfirmationButton\": \"刪除\",\n  \"cardVerification\": \"信用卡認證\",\n  \"fieldEmptyForCvv\": \"請填寫信用卡認證碼。\",\n  \"fieldEmptyForExpirationDate\": \"請填寫到期日。\",\n  \"fieldEmptyForCardholderName\": \"請填寫持卡人的名字。\",\n  \"fieldTooLongForCardholderName\": \"持卡人姓名必須少於 256 個字元。\",\n  \"fieldEmptyForNumber\": \"請填寫號碼。\",\n  \"fieldEmptyForPostalCode\": \"請填寫郵遞區號。\",\n  \"fieldInvalidForCvv\": \"此安全代碼無效。\",\n  \"fieldInvalidForExpirationDate\": \"此到期日無效。\",\n  \"fieldInvalidForNumber\": \"此卡號無效。\",\n  \"fieldInvalidForPostalCode\": \"此郵遞區號無效。\",\n  \"genericError\": \"系統發生錯誤。\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"此信用卡已存在，為已儲存的付款方式。\",\n  \"hostedFieldsFailedTokenizationError\": \"請檢查你的資料並再試一次。\",\n  \"hostedFieldsFieldsInvalidError\": \"請檢查你的資料並再試一次。\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"網絡錯誤。再試一次。\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"信用卡認證失敗。請檢查你的資料並再試一次。\",\n  \"paypalButtonMustBeUsed\": \"使用 PayPal 按鈕以繼續付款。\",\n  \"paypalAccountTokenizationFailedError\": \"加入 PayPal 帳戶時發生錯誤。再試一次。\",\n  \"paypalFlowFailedError\": \"連接 PayPal 時發生錯誤。再試一次。\",\n  \"paypalTokenizationRequestActiveError\": \"PayPal 付款授權已在處理中。\",\n  \"venmoCanceledError\": \"系統發生錯誤，請確保你已在裝置上安裝最新版本的 Venmo 應用程式，而且你的瀏覽器支援切換至 Venmo。\",\n  \"vaultManagerPaymentMethodDeletionError\": \"無法刪除付款方式，請再試一次。\",\n  \"venmoAppFailedError\": \"在你的裝置上找不到 Venmo 應用程式。\",\n  \"unsupportedCardTypeError\": \"不可使用此信用卡類型。請改用其他信用卡。\",\n  \"applePayTokenizationError\": \"處理 Apple Pay 付款時發生網絡錯誤。再試一次。\",\n  \"applePayActiveCardError\": \"在 Apple Pay 錢包中加入支援的信用卡。\",\n  \"cardholderNameLabel\": \"持卡人名字\",\n  \"cardNumberLabel\": \"卡號\",\n  \"cvvLabel\": \"信用卡認證碼\",\n  \"cvvThreeDigitLabelSubheading\": \"（3 位數）\",\n  \"cvvFourDigitLabelSubheading\": \"（4 位數）\",\n  \"cardholderNamePlaceholder\": \"持卡人名字\",\n  \"expirationDateLabel\": \"到期日\",\n  \"expirationDateLabelSubheading\": \"(MM/YY)\",\n  \"expirationDatePlaceholder\": \"月 / 年\",\n  \"postalCodeLabel\": \"郵遞區號\",\n  \"payWithCard\": \"使用信用卡付款\",\n  \"endingIn\": \"末碼為 {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"信用卡\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"American Express\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],172:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  \"payingWith\": \"以 {{paymentSource}} 付款\",\n  \"chooseAnotherWayToPay\": \"選擇付款的以其他方式付款\",\n  \"chooseAWayToPay\": \"選擇付款方式\",\n  \"otherWaysToPay\": \"其他付款方式\",\n  \"edit\": \"編輯\",\n  \"doneEditing\": \"完成\",\n  \"editPaymentMethods\": \"編輯付款方式\",\n  \"CreditCardDeleteConfirmationMessage\": \"確定要刪除末碼為 {{identifier}} 的 {{secondaryIdentifier}} 卡片嗎？\",\n  \"PayPalAccountDeleteConfirmationMessage\": \"確定要刪除 {{identifier}} PayPal 帳戶嗎？\",\n  \"VenmoAccountDeleteConfirmationMessage\": \"確定要刪除用戶名稱為 {{identifier}} 的 Venmo 帳戶嗎？\",\n  \"genericDeleteConfirmationMessage\": \"確定要刪除此付款方式？\",\n  \"deleteCancelButton\": \"取消\",\n  \"deleteConfirmationButton\": \"刪除\",\n  \"cardVerification\": \"信用卡認證\",\n  \"fieldEmptyForCvv\": \"請填妥信用卡驗證碼。\",\n  \"fieldEmptyForExpirationDate\": \"請填妥到期日。\",\n  \"fieldEmptyForCardholderName\": \"請填妥持卡人姓名。\",\n  \"fieldTooLongForCardholderName\": \"持卡人姓名不能超過 256 個字元。\",\n  \"fieldEmptyForNumber\": \"請填妥號碼。\",\n  \"fieldEmptyForPostalCode\": \"請填寫郵遞區號。\",\n  \"fieldInvalidForCvv\": \"這組安全代碼無效。\",\n  \"fieldInvalidForExpirationDate\": \"此到期日無效。\",\n  \"fieldInvalidForNumber\": \"此卡號無效。\",\n  \"fieldInvalidForPostalCode\": \"此郵遞區號無效。\",\n  \"genericError\": \"我們的系統發生問題。\",\n  \"hostedFieldsTokenizationFailOnDuplicateError\": \"此信用卡已存在，為已儲存的付款方式。\",\n  \"hostedFieldsFailedTokenizationError\": \"請檢查你的資料並重試。\",\n  \"hostedFieldsFieldsInvalidError\": \"請檢查你的資料並重試。\",\n  \"hostedFieldsTokenizationNetworkErrorError\": \"網路錯誤。請重試。\",\n  \"hostedFieldsTokenizationCvvVerificationFailedError\": \"信用卡認證失敗。請檢查你的資料並重試。\",\n  \"paypalButtonMustBeUsed\": \"使用 PayPal 按鈕以繼續付款。\",\n  \"paypalAccountTokenizationFailedError\": \"新增 PayPal 帳戶時，系統發生錯誤。請重試。\",\n  \"paypalFlowFailedError\": \"連結至 PayPal 時，系統發生錯誤。請重試。\",\n  \"paypalTokenizationRequestActiveError\": \"PayPal 支付款項的授權已在處理中。\",\n  \"venmoCanceledError\": \"系統發生錯誤。確認你的裝置上裝有最新版本的 Venmo 應用程式，而且瀏覽器支援切換至 Venmo。\",\n  \"vaultManagerPaymentMethodDeletionError\": \"無法刪除付款方式，請再試一次。\",\n  \"venmoAppFailedError\": \"你的裝置上找不到 Venmo 應用程式。\",\n  \"unsupportedCardTypeError\": \"不支援此卡片類型。請改用其他卡片。\",\n  \"applePayTokenizationError\": \"在處理 Apple Pay 付款時發生網路錯誤。請重試。\",\n  \"applePayActiveCardError\": \"新增支援的卡片至你的 Apple Pay 錢包。\",\n  \"cardholderNameLabel\": \"持卡人姓名\",\n  \"cardNumberLabel\": \"卡號\",\n  \"cvvLabel\": \"CVV\",\n  \"cvvThreeDigitLabelSubheading\": \"（3 位數）\",\n  \"cvvFourDigitLabelSubheading\": \"（4 位數）\",\n  \"cardholderNamePlaceholder\": \"持卡人姓名\",\n  \"expirationDateLabel\": \"到期日\",\n  \"expirationDateLabelSubheading\": \"（月 / 年）\",\n  \"expirationDatePlaceholder\": \"月 / 年\",\n  \"postalCodeLabel\": \"郵遞區號\",\n  \"payWithCard\": \"使用信用卡 / 扣帳卡付款\",\n  \"endingIn\": \"末碼為 {{lastFourCardDigits}}\",\n  \"Apple Pay\": \"Apple Pay\",\n  \"Venmo\": \"Venmo\",\n  \"Card\": \"信用卡或扣帳卡\",\n  \"PayPal\": \"PayPal\",\n  \"PayPal Credit\": \"PayPal Credit\",\n  \"Google Pay\": \"Google Pay\",\n  \"American Express\": \"美國運通\",\n  \"Discover\": \"Discover\",\n  \"Diners Club\": \"Diners Club\",\n  \"MasterCard\": \"Mastercard\",\n  \"Visa\": \"Visa\",\n  \"JCB\": \"JCB\",\n  \"Maestro\": \"Maestro\",\n  \"UnionPay\": \"UnionPay\"\n};\n\n},{}],173:[function(require,module,exports){\n'use strict';\n\nvar assign = require('../lib/assign').assign;\nvar classList = require('@braintree/class-list');\nvar DropinError = require('../lib/dropin-error');\nvar errors = require('../constants').errors;\nvar Promise = require('../lib/promise');\n\nfunction BaseView(options) {\n  options = options || {};\n\n  assign(this, options);\n}\n\nBaseView.prototype.getElementById = function (id) {\n  if (!this.element) { return null; }\n\n  return this.element.querySelector('[data-braintree-id=\"' + id + '\"]');\n};\n\nBaseView.prototype.requestPaymentMethod = function () {\n  return Promise.reject(new DropinError(errors.NO_PAYMENT_METHOD_ERROR));\n};\n\nBaseView.prototype.getPaymentMethod = function () {\n  return this.activeMethodView && this.activeMethodView.paymentMethod;\n};\n\nBaseView.prototype.onSelection = function () {};\n\nBaseView.prototype.teardown = function () {\n  return Promise.resolve();\n};\n\nBaseView.prototype.preventUserAction = function () {\n  if (this.element) {\n    classList.add(this.element, 'braintree-sheet--loading');\n  }\n\n  this.model.preventUserAction();\n};\n\nBaseView.prototype.allowUserAction = function () {\n  if (this.element) {\n    classList.remove(this.element, 'braintree-sheet--loading');\n  }\n\n  this.model.allowUserAction();\n};\n\nmodule.exports = BaseView;\n\n},{\"../constants\":125,\"../lib/assign\":131,\"../lib/dropin-error\":135,\"../lib/promise\":143,\"@braintree/class-list\":18}],174:[function(require,module,exports){\n'use strict';\n\nvar BaseView = require('./base-view');\nvar addSelectionEventHandler = require('../lib/add-selection-event-handler');\nvar paymentMethodTypes = require('../constants').paymentMethodTypes;\n\nfunction DeleteConfirmationView() {\n  BaseView.apply(this, arguments);\n\n  this._initialize();\n}\n\nDeleteConfirmationView.prototype = Object.create(BaseView.prototype);\nDeleteConfirmationView.prototype.constructor = DeleteConfirmationView;\nDeleteConfirmationView.ID = DeleteConfirmationView.prototype.ID = 'delete-confirmation';\n\nDeleteConfirmationView.prototype._initialize = function () {\n  this._yesButton = this.getElementById('delete-confirmation__yes');\n  this._noButton = this.getElementById('delete-confirmation__no');\n  this._messageBox = this.getElementById('delete-confirmation__message');\n\n  addSelectionEventHandler(this._yesButton, function () {\n    this.model.deleteVaultedPaymentMethod();\n  }.bind(this));\n  addSelectionEventHandler(this._noButton, function () {\n    this.model.cancelDeleteVaultedPaymentMethod();\n  }.bind(this));\n};\n\nDeleteConfirmationView.prototype.applyPaymentMethod = function (paymentMethod) {\n  var identifier, secondaryIdentifier;\n  var messageText = this.strings[paymentMethod.type + 'DeleteConfirmationMessage'];\n\n  if (messageText) {\n    switch (paymentMethod.type) {\n      case paymentMethodTypes.card:\n        identifier = paymentMethod.details.lastFour;\n        secondaryIdentifier = paymentMethod.details.cardType;\n        secondaryIdentifier = this.strings[secondaryIdentifier] || secondaryIdentifier;\n        break;\n      case paymentMethodTypes.paypal:\n        identifier = paymentMethod.details.email;\n        break;\n      case paymentMethodTypes.venmo:\n        identifier = paymentMethod.details.username;\n        break;\n      default:\n        break;\n    }\n\n    messageText = messageText.replace('{{identifier}}', identifier);\n    if (secondaryIdentifier) {\n      messageText = messageText.replace('{{secondaryIdentifier}}', secondaryIdentifier);\n    }\n  } else {\n    messageText = this.strings.genericDeleteConfirmationMessage;\n  }\n  this._messageBox.innerText = messageText;\n};\n\nmodule.exports = DeleteConfirmationView;\n\n},{\"../constants\":125,\"../lib/add-selection-event-handler\":129,\"./base-view\":173}],175:[function(require,module,exports){\n'use strict';\n\nvar analytics = require('../lib/analytics');\nvar analyticsKinds = require('../constants').analyticsKinds;\nvar BaseView = require('./base-view');\nvar classList = require('@braintree/class-list');\nvar sheetViews = require('./payment-sheet-views');\nvar PaymentMethodsView = require('./payment-methods-view');\nvar PaymentOptionsView = require('./payment-options-view');\nvar DeleteConfirmationView = require('./delete-confirmation-view');\nvar addSelectionEventHandler = require('../lib/add-selection-event-handler');\nvar Promise = require('../lib/promise');\nvar supportsFlexbox = require('../lib/supports-flexbox');\n\nvar CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT = require('../constants').CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT;\nvar DEVELOPER_MISCONFIGURATION_MESSAGE = require('../constants').errors.DEVELOPER_MISCONFIGURATION_MESSAGE;\n\nfunction MainView() {\n  BaseView.apply(this, arguments);\n\n  this.dependenciesInitializing = 0;\n\n  this._initialize();\n}\n\nMainView.prototype = Object.create(BaseView.prototype);\nMainView.prototype.constructor = MainView;\n\nMainView.prototype._initialize = function () {\n  var paymentOptionsView;\n\n  this._hasMultiplePaymentOptions = this.model.supportedPaymentOptions.length > 1;\n\n  this._views = {};\n\n  this.sheetContainer = this.getElementById('sheet-container');\n  this.sheetErrorText = this.getElementById('sheet-error-text');\n\n  this.toggle = this.getElementById('toggle');\n  this.disableWrapper = this.getElementById('disable-wrapper');\n  this.lowerContainer = this.getElementById('lower-container');\n\n  this.loadingContainer = this.getElementById('loading-container');\n  this.dropinContainer = this.element.querySelector('.braintree-dropin');\n\n  this.supportsFlexbox = supportsFlexbox();\n\n  this.model.on('asyncDependenciesReady', this.hideLoadingIndicator.bind(this));\n\n  this.model.on('errorOccurred', this.showSheetError.bind(this));\n  this.model.on('errorCleared', this.hideSheetError.bind(this));\n  this.model.on('preventUserAction', this.preventUserAction.bind(this));\n  this.model.on('allowUserAction', this.allowUserAction.bind(this));\n\n  this.paymentSheetViewIDs = Object.keys(sheetViews).reduce(function (ids, sheetViewKey) {\n    var PaymentSheetView, paymentSheetView;\n\n    if (this.model.supportedPaymentOptions.indexOf(sheetViewKey) !== -1) {\n      PaymentSheetView = sheetViews[sheetViewKey];\n\n      paymentSheetView = new PaymentSheetView({\n        element: this.getElementById(PaymentSheetView.ID),\n        mainView: this,\n        model: this.model,\n        client: this.client,\n        strings: this.strings\n      });\n      paymentSheetView.initialize();\n\n      this.addView(paymentSheetView);\n      ids.push(paymentSheetView.ID);\n    }\n\n    return ids;\n  }.bind(this), []);\n\n  this.paymentMethodsViews = new PaymentMethodsView({\n    element: this.element,\n    model: this.model,\n    strings: this.strings\n  });\n  this.addView(this.paymentMethodsViews);\n\n  this.deleteConfirmationView = new DeleteConfirmationView({\n    element: this.getElementById('delete-confirmation'),\n    model: this.model,\n    strings: this.strings\n  });\n  this.addView(this.deleteConfirmationView);\n\n  addSelectionEventHandler(this.toggle, this.toggleAdditionalOptions.bind(this));\n\n  this.model.on('changeActivePaymentMethod', function () {\n    setTimeout(function () {\n      this.setPrimaryView(PaymentMethodsView.ID);\n    }.bind(this), CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT);\n  }.bind(this));\n\n  this.model.on('changeActivePaymentView', function (id) {\n    var activePaymentView = this.getView(id);\n\n    if (id === PaymentMethodsView.ID) {\n      classList.add(this.paymentMethodsViews.container, 'braintree-methods--active');\n      classList.remove(this.sheetContainer, 'braintree-sheet--active');\n    } else {\n      setTimeout(function () {\n        classList.add(this.sheetContainer, 'braintree-sheet--active');\n      }.bind(this), 0);\n      classList.remove(this.paymentMethodsViews.container, 'braintree-methods--active');\n      if (!this.getView(id).getPaymentMethod()) {\n        this.model.setPaymentMethodRequestable({\n          isRequestable: false\n        });\n      }\n    }\n\n    activePaymentView.onSelection();\n  }.bind(this));\n\n  this.model.on('removeActivePaymentMethod', function () {\n    var activePaymentView = this.getView(this.model.getActivePaymentView());\n\n    if (activePaymentView && typeof activePaymentView.removeActivePaymentMethod === 'function') {\n      activePaymentView.removeActivePaymentMethod();\n    }\n  }.bind(this));\n\n  this.model.on('enableEditMode', this.enableEditMode.bind(this));\n\n  this.model.on('disableEditMode', this.disableEditMode.bind(this));\n\n  this.model.on('confirmPaymentMethodDeletion', this.openConfirmPaymentMethodDeletionDialog.bind(this));\n  this.model.on('cancelVaultedPaymentMethodDeletion', this.cancelVaultedPaymentMethodDeletion.bind(this));\n  this.model.on('startVaultedPaymentMethodDeletion', this.startVaultedPaymentMethodDeletion.bind(this));\n  this.model.on('finishVaultedPaymentMethodDeletion', this.finishVaultedPaymentMethodDeletion.bind(this));\n\n  if (this._hasMultiplePaymentOptions) {\n    paymentOptionsView = new PaymentOptionsView({\n      client: this.client,\n      element: this.getElementById(PaymentOptionsView.ID),\n      mainView: this,\n      model: this.model,\n      strings: this.strings\n    });\n\n    this.addView(paymentOptionsView);\n  }\n\n  this._sendToDefaultView();\n};\n\nMainView.prototype.addView = function (view) {\n  this._views[view.ID] = view;\n};\n\nMainView.prototype.getView = function (id) {\n  return this._views[id];\n};\n\nMainView.prototype.setPrimaryView = function (id, secondaryViewId) {\n  var paymentMethod;\n\n  setTimeout(function () {\n    this.element.className = prefixShowClass(id);\n    if (secondaryViewId) {\n      classList.add(this.element, prefixShowClass(secondaryViewId));\n    }\n  }.bind(this), 0);\n\n  this.primaryView = this.getView(id);\n  this.model.changeActivePaymentView(id);\n\n  if (this.paymentSheetViewIDs.indexOf(id) !== -1) {\n    if (this.model.getPaymentMethods().length > 0 || this.getView(PaymentOptionsView.ID)) {\n      this.showToggle();\n    } else {\n      this.hideToggle();\n    }\n  } else if (id === PaymentMethodsView.ID) {\n    this.showToggle();\n    // Move options below the upper-container\n    this.getElementById('lower-container').appendChild(this.getElementById('options'));\n  } else if (id === PaymentOptionsView.ID) {\n    this.hideToggle();\n  }\n\n  if (!this.supportsFlexbox) {\n    this.element.setAttribute('data-braintree-no-flexbox', true);\n  }\n\n  paymentMethod = this.primaryView.getPaymentMethod();\n\n  this.model.setPaymentMethodRequestable({\n    isRequestable: Boolean(paymentMethod),\n    type: paymentMethod && paymentMethod.type,\n    selectedPaymentMethod: paymentMethod\n  });\n\n  this.model.clearError();\n};\n\nMainView.prototype.requestPaymentMethod = function () {\n  var activePaymentView = this.getView(this.model.getActivePaymentView());\n\n  return activePaymentView.requestPaymentMethod().then(function (payload) {\n    analytics.sendEvent(this.client, 'request-payment-method.' + analyticsKinds[payload.type]);\n\n    return payload;\n  }.bind(this)).catch(function (err) {\n    analytics.sendEvent(this.client, 'request-payment-method.error');\n\n    return Promise.reject(err);\n  }.bind(this));\n};\n\nMainView.prototype.hideLoadingIndicator = function () {\n  classList.add(this.dropinContainer, 'braintree-loaded');\n  classList.add(this.loadingContainer, 'braintree-hidden');\n};\n\nMainView.prototype.showLoadingIndicator = function () {\n  classList.remove(this.dropinContainer, 'braintree-loaded');\n  classList.remove(this.loadingContainer, 'braintree-hidden');\n};\n\nMainView.prototype.toggleAdditionalOptions = function () {\n  var sheetViewID;\n  var isPaymentSheetView = this.paymentSheetViewIDs.indexOf(this.primaryView.ID) !== -1;\n\n  this.hideToggle();\n\n  if (!this._hasMultiplePaymentOptions) {\n    sheetViewID = this.paymentSheetViewIDs[0];\n\n    classList.add(this.element, prefixShowClass(sheetViewID));\n    this.model.changeActivePaymentView(sheetViewID);\n  } else if (isPaymentSheetView) {\n    if (this.model.getPaymentMethods().length === 0) {\n      this.setPrimaryView(PaymentOptionsView.ID);\n    } else {\n      this.setPrimaryView(PaymentMethodsView.ID, PaymentOptionsView.ID);\n      this.hideToggle();\n    }\n  } else {\n    classList.add(this.element, prefixShowClass(PaymentOptionsView.ID));\n  }\n};\n\nMainView.prototype.showToggle = function () {\n  if (this.model.isInEditMode()) {\n    return;\n  }\n  classList.remove(this.toggle, 'braintree-hidden');\n  classList.add(this.lowerContainer, 'braintree-hidden');\n};\n\nMainView.prototype.hideToggle = function () {\n  classList.add(this.toggle, 'braintree-hidden');\n  classList.remove(this.lowerContainer, 'braintree-hidden');\n};\n\nMainView.prototype.showSheetError = function (error) {\n  var errorMessage;\n  var genericErrorMessage = this.strings.genericError;\n\n  if (this.strings.hasOwnProperty(error)) {\n    errorMessage = this.strings[error];\n  } else if (error && typeof error.code === 'string') {\n    errorMessage = this.strings[snakeCaseToCamelCase(error.code) + 'Error'] || genericErrorMessage;\n  } else if (error === 'developerError') {\n    errorMessage = DEVELOPER_MISCONFIGURATION_MESSAGE;\n  } else {\n    errorMessage = genericErrorMessage;\n  }\n\n  classList.add(this.dropinContainer, 'braintree-sheet--has-error');\n  this.sheetErrorText.innerHTML = errorMessage;\n};\n\nMainView.prototype.hideSheetError = function () {\n  classList.remove(this.dropinContainer, 'braintree-sheet--has-error');\n};\n\nMainView.prototype.getOptionsElements = function () {\n  return this._views.options.elements;\n};\n\nMainView.prototype.preventUserAction = function () {\n  classList.remove(this.disableWrapper, 'braintree-hidden');\n};\n\nMainView.prototype.allowUserAction = function () {\n  classList.add(this.disableWrapper, 'braintree-hidden');\n};\n\nMainView.prototype.teardown = function () {\n  var error;\n  var viewNames = Object.keys(this._views);\n  var teardownPromises = viewNames.map(function (view) {\n    return this._views[view].teardown().catch(function (err) {\n      error = err;\n    });\n  }.bind(this));\n\n  return Promise.all(teardownPromises).then(function () {\n    if (error) {\n      return Promise.reject(error);\n    }\n\n    return Promise.resolve();\n  });\n};\n\nMainView.prototype.enableEditMode = function () {\n  this.setPrimaryView(this.paymentMethodsViews.ID);\n  this.paymentMethodsViews.enableEditMode();\n  this.hideToggle();\n\n  this.model.setPaymentMethodRequestable({\n    isRequestable: false\n  });\n};\n\nMainView.prototype.disableEditMode = function () {\n  var paymentMethod;\n\n  this.hideSheetError();\n  this.paymentMethodsViews.disableEditMode();\n  this.showToggle();\n\n  paymentMethod = this.primaryView.getPaymentMethod();\n\n  this.model.setPaymentMethodRequestable({\n    isRequestable: Boolean(paymentMethod),\n    type: paymentMethod && paymentMethod.type,\n    selectedPaymentMethod: paymentMethod\n  });\n};\n\nMainView.prototype.openConfirmPaymentMethodDeletionDialog = function (paymentMethod) {\n  this.deleteConfirmationView.applyPaymentMethod(paymentMethod);\n  this.setPrimaryView(this.deleteConfirmationView.ID);\n};\n\nMainView.prototype.cancelVaultedPaymentMethodDeletion = function () {\n  this.setPrimaryView(this.paymentMethodsViews.ID);\n};\n\nMainView.prototype.startVaultedPaymentMethodDeletion = function () {\n  this.element.className = '';\n  this.showLoadingIndicator();\n};\n\nMainView.prototype.finishVaultedPaymentMethodDeletion = function (error) {\n  var self = this;\n\n  this.paymentMethodsViews.refreshPaymentMethods();\n\n  if (error && this.model.getPaymentMethods().length > 0) {\n    this.model.enableEditMode();\n    this.showSheetError('vaultManagerPaymentMethodDeletionError');\n  } else {\n    this._sendToDefaultView();\n  }\n\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      // allow all the views to reset before hiding the loading indicator\n      self.hideLoadingIndicator();\n      resolve();\n    }, 500);\n  });\n};\n\nMainView.prototype._sendToDefaultView = function () {\n  var paymentMethods = this.model.getPaymentMethods();\n  var preselectVaultedPaymentMethod = this.model.merchantConfiguration.preselectVaultedPaymentMethod !== false;\n\n  if (paymentMethods.length > 0) {\n    if (preselectVaultedPaymentMethod) {\n      this.model.changeActivePaymentMethod(paymentMethods[0]);\n    } else {\n      this.setPrimaryView(this.paymentMethodsViews.ID);\n    }\n  } else if (this._hasMultiplePaymentOptions) {\n    this.setPrimaryView(PaymentOptionsView.ID);\n  } else {\n    this.setPrimaryView(this.paymentSheetViewIDs[0]);\n  }\n};\nfunction snakeCaseToCamelCase(s) {\n  return s.toLowerCase().replace(/(\\_\\w)/g, function (m) {\n    return m[1].toUpperCase();\n  });\n}\n\nfunction prefixShowClass(classname) {\n  return 'braintree-show-' + classname;\n}\n\nmodule.exports = MainView;\n\n},{\"../constants\":125,\"../lib/add-selection-event-handler\":129,\"../lib/analytics\":130,\"../lib/promise\":143,\"../lib/supports-flexbox\":145,\"./base-view\":173,\"./delete-confirmation-view\":174,\"./payment-methods-view\":177,\"./payment-options-view\":178,\"./payment-sheet-views\":183,\"@braintree/class-list\":18}],176:[function(require,module,exports){\n'use strict';\n\nvar BaseView = require('./base-view');\nvar classList = require('@braintree/class-list');\nvar constants = require('../constants');\n\nvar addSelectionEventHandler = require('../lib/add-selection-event-handler');\n\nvar paymentMethodHTML = \"<div class=\\\"braintre-method__icon-container braintree-method__delete-container\\\">\\n  <div class=\\\"braintree-method__icon braintree-method__delete\\\">\\n    <svg width=\\\"48\\\" height=\\\"29\\\">\\n      <use xlink:href=\\\"#iconX\\\"></use>\\n    </svg>\\n  </div>\\n</div>\\n\\n<div class=\\\"braintree-method__logo\\\">\\n  <svg width=\\\"40\\\" height=\\\"24\\\" class=\\\"@CLASSNAME\\\">\\n    <use xlink:href=\\\"#@ICON\\\"></use>\\n  </svg>\\n</div>\\n\\n<div class=\\\"braintree-method__label\\\">@TITLE<br><div class=\\\"braintree-method__label--small\\\">@SUBTITLE</div></div>\\n\\n<div class=\\\"braintre-method__icon-container braintree-method__check-container\\\">\\n  <div class=\\\"braintree-method__icon braintree-method__check\\\">\\n    <svg height=\\\"100%\\\" width=\\\"100%\\\">\\n      <use xlink:href=\\\"#iconCheck\\\"></use>\\n    </svg>\\n  </div>\\n</div>\\n\";\n\nfunction PaymentMethodView() {\n  BaseView.apply(this, arguments);\n\n  this._initialize();\n}\n\nPaymentMethodView.prototype = Object.create(BaseView.prototype);\nPaymentMethodView.prototype.constructor = PaymentMethodView;\n\nPaymentMethodView.prototype._initialize = function () {\n  var endingInText;\n  var html = paymentMethodHTML;\n  var paymentMethodCardTypes = constants.paymentMethodCardTypes;\n  var paymentMethodTypes = constants.paymentMethodTypes;\n\n  this.element = document.createElement('div');\n  this.element.className = 'braintree-method';\n  this.element.setAttribute('tabindex', '0');\n\n  addSelectionEventHandler(this.element, this._choosePaymentMethod.bind(this));\n\n  switch (this.paymentMethod.type) {\n    case paymentMethodTypes.applePay:\n      html = html.replace(/@ICON/g, 'logoApplePay')\n        .replace(/@CLASSNAME/g, '')\n        .replace(/@TITLE/g, this.strings['Apple Pay'])\n        .replace(/@SUBTITLE/g, '');\n      break;\n    case paymentMethodTypes.card:\n      endingInText = this.strings.endingIn.replace('{{lastFourCardDigits}}', this.paymentMethod.details.lastFour);\n      html = html.replace(/@ICON/g, 'icon-' + paymentMethodCardTypes[this.paymentMethod.details.cardType])\n        .replace(/@CLASSNAME/g, ' braintree-icon--bordered')\n        .replace(/@TITLE/g, endingInText)\n        .replace(/@SUBTITLE/g, this.strings[this.paymentMethod.details.cardType]);\n      break;\n    case paymentMethodTypes.googlePay:\n      html = html.replace(/@ICON/g, 'logoGooglePay')\n        .replace(/@CLASSNAME/g, '')\n        .replace(/@TITLE/g, this.strings['Google Pay'])\n        .replace(/@SUBTITLE/g, '');\n      break;\n    case paymentMethodTypes.paypal:\n      html = html.replace(/@ICON/g, 'logoPayPal')\n        .replace(/@CLASSNAME/g, '')\n        .replace(/@TITLE/g, this.paymentMethod.details.email)\n        .replace(/@SUBTITLE/g, this.strings.PayPal);\n      break;\n    case paymentMethodTypes.venmo:\n      html = html.replace(/@ICON/g, 'logoVenmo')\n        .replace(/@CLASSNAME/g, '')\n        .replace(/@TITLE/g, this.paymentMethod.details.username)\n        .replace(/@SUBTITLE/g, this.strings.Venmo);\n      break;\n    default:\n      break;\n  }\n\n  this.element.innerHTML = html;\n  this.checkMark = this.element.querySelector('.braintree-method__check-container');\n  addSelectionEventHandler(this.element.querySelector('.braintree-method__delete-container'), this._selectDelete.bind(this));\n};\n\nPaymentMethodView.prototype.setActive = function (isActive) {\n  // setTimeout required to animate addition of new payment methods\n  setTimeout(function () {\n    classList.toggle(this.element, 'braintree-method--active', isActive);\n  }.bind(this), 0);\n};\n\nPaymentMethodView.prototype.enableEditMode = function () {\n  classList.add(this.checkMark, 'braintree-hidden');\n  if (this.paymentMethod.hasSubscription) {\n    classList.add(this.element, 'braintree-method--disabled');\n  }\n};\n\nPaymentMethodView.prototype.disableEditMode = function () {\n  classList.remove(this.checkMark, 'braintree-hidden');\n  classList.remove(this.element, 'braintree-method--disabled');\n};\n\nPaymentMethodView.prototype._choosePaymentMethod = function () {\n  if (this.model.isInEditMode()) {\n    return;\n  }\n  this.model.changeActivePaymentMethod(this.paymentMethod);\n};\n\nPaymentMethodView.prototype._selectDelete = function () {\n  this.model.confirmPaymentMethodDeletion(this.paymentMethod);\n};\n\nmodule.exports = PaymentMethodView;\n\n},{\"../constants\":125,\"../lib/add-selection-event-handler\":129,\"./base-view\":173,\"@braintree/class-list\":18}],177:[function(require,module,exports){\n'use strict';\n\nvar BaseView = require('./base-view');\nvar PaymentMethodView = require('./payment-method-view');\nvar DropinError = require('../lib/dropin-error');\nvar classList = require('@braintree/class-list');\nvar errors = require('../constants').errors;\nvar Promise = require('../lib/promise');\nvar addSelectionEventHandler = require('../lib/add-selection-event-handler');\n\nvar PAYMENT_METHOD_TYPE_TO_TRANSLATION_STRING = {\n  CreditCard: 'Card',\n  PayPalAccount: 'PayPal',\n  ApplePayCard: 'Apple Pay',\n  AndroidPayCard: 'Google Pay',\n  VenmoAccount: 'Venmo'\n};\n\nfunction PaymentMethodsView() {\n  BaseView.apply(this, arguments);\n\n  this._initialize();\n}\n\nPaymentMethodsView.prototype = Object.create(BaseView.prototype);\nPaymentMethodsView.prototype.constructor = PaymentMethodsView;\nPaymentMethodsView.ID = PaymentMethodsView.prototype.ID = 'methods';\n\nPaymentMethodsView.prototype._initialize = function () {\n  this.views = [];\n  this.container = this.getElementById('methods-container');\n  this._headingLabel = this.getElementById('methods-label');\n  this._editButton = this.getElementById('methods-edit');\n\n  this.model.on('addPaymentMethod', this._addPaymentMethod.bind(this));\n  this.model.on('changeActivePaymentMethod', this._changeActivePaymentMethodView.bind(this));\n  this.model.on('refreshPaymentMethods', this.refreshPaymentMethods.bind(this));\n\n  this.refreshPaymentMethods();\n\n  if (this.model.merchantConfiguration.vaultManager) {\n    this.model.on('removePaymentMethod', this._removePaymentMethod.bind(this));\n\n    addSelectionEventHandler(this._editButton, function () {\n      if (this.model.isInEditMode()) {\n        this.model.disableEditMode();\n      } else {\n        this.model.enableEditMode();\n      }\n    }.bind(this));\n\n    classList.remove(this._editButton, 'braintree-hidden');\n  }\n};\n\nPaymentMethodsView.prototype.removeActivePaymentMethod = function () {\n  if (!this.activeMethodView) {\n    return;\n  }\n  this.activeMethodView.setActive(false);\n  this.activeMethodView = null;\n  classList.add(this._headingLabel, 'braintree-no-payment-method-selected');\n};\n\nPaymentMethodsView.prototype._getPaymentMethodString = function () {\n  var stringKey, paymentMethodTypeString;\n\n  if (!this.activeMethodView) {\n    return '';\n  }\n\n  stringKey = PAYMENT_METHOD_TYPE_TO_TRANSLATION_STRING[this.activeMethodView.paymentMethod.type];\n  paymentMethodTypeString = this.strings[stringKey];\n\n  return this.strings.payingWith.replace('{{paymentSource}}', paymentMethodTypeString);\n};\n\nPaymentMethodsView.prototype.enableEditMode = function () {\n  classList.add(this.container, 'braintree-methods--edit');\n\n  this._editButton.innerHTML = this.strings.deleteCancelButton;\n  this._headingLabel.innerHTML = this.strings.editPaymentMethods;\n\n  this.views.forEach(function (view) {\n    view.enableEditMode();\n  });\n};\n\nPaymentMethodsView.prototype.disableEditMode = function () {\n  classList.remove(this.container, 'braintree-methods--edit');\n\n  this._editButton.innerHTML = this.strings.edit;\n  this._headingLabel.innerHTML = this._getPaymentMethodString();\n\n  this.views.forEach(function (view) {\n    view.disableEditMode();\n  });\n};\n\nPaymentMethodsView.prototype._addPaymentMethod = function (paymentMethod) {\n  var paymentMethodView = new PaymentMethodView({\n    model: this.model,\n    paymentMethod: paymentMethod,\n    strings: this.strings\n  });\n\n  if (this.model.isGuestCheckout && this.container.firstChild) {\n    this.container.removeChild(this.container.firstChild);\n    this.views.pop();\n  }\n\n  if (this.container.firstChild) {\n    this.container.insertBefore(paymentMethodView.element, this.container.firstChild);\n  } else {\n    this.container.appendChild(paymentMethodView.element);\n  }\n\n  this.views.push(paymentMethodView);\n};\n\nPaymentMethodsView.prototype._removePaymentMethod = function (paymentMethod) {\n  var i;\n\n  for (i = 0; i < this.views.length; i++) {\n    if (this.views[i].paymentMethod === paymentMethod) {\n      this.container.removeChild(this.views[i].element);\n      this._headingLabel.innerHTML = '&nbsp;';\n      this.views.splice(i, 1);\n      break;\n    }\n  }\n};\n\nPaymentMethodsView.prototype._changeActivePaymentMethodView = function (paymentMethod) {\n  var i;\n  var previousActiveMethodView = this.activeMethodView;\n\n  for (i = 0; i < this.views.length; i++) {\n    if (this.views[i].paymentMethod === paymentMethod) {\n      this.activeMethodView = this.views[i];\n      this._headingLabel.innerHTML = this._getPaymentMethodString();\n      break;\n    }\n  }\n\n  if (previousActiveMethodView) {\n    previousActiveMethodView.setActive(false);\n  }\n  this.activeMethodView.setActive(true);\n  classList.remove(this._headingLabel, 'braintree-no-payment-method-selected');\n};\n\nPaymentMethodsView.prototype.requestPaymentMethod = function () {\n  if (!this.activeMethodView || this.model.isInEditMode()) {\n    return Promise.reject(new DropinError(errors.NO_PAYMENT_METHOD_ERROR));\n  }\n\n  return Promise.resolve(this.activeMethodView.paymentMethod);\n};\n\nPaymentMethodsView.prototype.refreshPaymentMethods = function () {\n  var i;\n  var paymentMethods = this.model.getPaymentMethods();\n\n  this.views.forEach(function (view) {\n    this.container.removeChild(view.element);\n  }.bind(this));\n\n  this.views = [];\n\n  for (i = paymentMethods.length - 1; i >= 0; i--) {\n    this._addPaymentMethod(paymentMethods[i]);\n  }\n};\n\nmodule.exports = PaymentMethodsView;\n\n},{\"../constants\":125,\"../lib/add-selection-event-handler\":129,\"../lib/dropin-error\":135,\"../lib/promise\":143,\"./base-view\":173,\"./payment-method-view\":176,\"@braintree/class-list\":18}],178:[function(require,module,exports){\n'use strict';\n\nvar analytics = require('../lib/analytics');\nvar addSelectionEventHandler = require('../lib/add-selection-event-handler');\nvar BaseView = require('./base-view');\n\nvar paymentOptionIDs = require('../constants').paymentOptionIDs;\n\nvar paymentMethodOptionHTML = \"<div class=\\\"braintree-option__logo\\\">\\n  <svg width=\\\"48\\\" height=\\\"29\\\" class=\\\"@CLASSNAME\\\">\\n    <use xlink:href=\\\"#@ICON\\\"></use>\\n  </svg>\\n</div>\\n\\n<div class=\\\"braintree-option__label\\\" aria-label=\\\"@OPTION_LABEL\\\">\\n  @OPTION_TITLE\\n  <div class=\\\"braintree-option__disabled-message\\\"></div>\\n</div>\\n\";\n\nfunction PaymentOptionsView() {\n  BaseView.apply(this, arguments);\n\n  this._initialize();\n}\n\nPaymentOptionsView.prototype = Object.create(BaseView.prototype);\nPaymentOptionsView.prototype.constructor = PaymentOptionsView;\nPaymentOptionsView.ID = PaymentOptionsView.prototype.ID = 'options';\n\nPaymentOptionsView.prototype._initialize = function () {\n  this.container = this.getElementById('payment-options-container');\n  this.elements = {};\n\n  this.model.supportedPaymentOptions.forEach(function (paymentOptionID) {\n    this._addPaymentOption(paymentOptionID);\n  }.bind(this));\n};\n\nPaymentOptionsView.prototype._addPaymentOption = function (paymentOptionID) {\n  var paymentSource;\n  var div = document.createElement('div');\n  var html = paymentMethodOptionHTML;\n  var clickHandler = function clickHandler() {\n    this.mainView.setPrimaryView(paymentOptionID);\n    this.model.selectPaymentOption(paymentOptionID);\n    analytics.sendEvent(this.client, 'selected.' + paymentOptionIDs[paymentOptionID]);\n  }.bind(this);\n\n  div.className = 'braintree-option braintree-option__' + paymentOptionID;\n  div.setAttribute('tabindex', '0');\n\n  switch (paymentOptionID) {\n    case paymentOptionIDs.applePay:\n      paymentSource = this.strings['Apple Pay'];\n      html = html.replace(/@ICON/g, 'logoApplePay');\n      break;\n    case paymentOptionIDs.card:\n      paymentSource = this.strings.Card;\n      html = html.replace(/@ICON/g, 'iconCardFront');\n      html = html.replace(/@CLASSNAME/g, 'braintree-icon--bordered');\n      break;\n    case paymentOptionIDs.googlePay:\n      paymentSource = this.strings['Google Pay'];\n      html = html.replace(/@ICON/g, 'logoGooglePay');\n      break;\n    case paymentOptionIDs.paypal:\n      paymentSource = this.strings.PayPal;\n      html = html.replace(/@ICON/g, 'logoPayPal');\n      break;\n    case paymentOptionIDs.paypalCredit:\n      paymentSource = this.strings['PayPal Credit'];\n      html = html.replace(/@ICON/g, 'logoPayPalCredit');\n      break;\n    case paymentOptionIDs.venmo:\n      paymentSource = this.strings.Venmo;\n      html = html.replace(/@ICON/g, 'logoVenmo');\n      break;\n    default:\n      break;\n  }\n\n  html = html.replace(/@OPTION_LABEL/g, this._generateOptionLabel(paymentSource));\n  html = html.replace(/@OPTION_TITLE/g, paymentSource);\n  html = html.replace(/@CLASSNAME/g, '');\n\n  div.innerHTML = html;\n\n  addSelectionEventHandler(div, clickHandler);\n\n  this.container.appendChild(div);\n  this.elements[paymentOptionID] = {\n    div: div,\n    clickHandler: clickHandler\n  };\n};\n\nPaymentOptionsView.prototype._generateOptionLabel = function (paymentSourceString) {\n  return this.strings.payingWith.replace('{{paymentSource}}', paymentSourceString);\n};\n\nmodule.exports = PaymentOptionsView;\n\n},{\"../constants\":125,\"../lib/add-selection-event-handler\":129,\"../lib/analytics\":130,\"./base-view\":173}],179:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar assign = require('../../lib/assign').assign;\nvar BaseView = require('../base-view');\nvar btApplePay = require('braintree-web/apple-pay');\nvar DropinError = require('../../lib/dropin-error');\nvar isHTTPS = require('../../lib/is-https');\nvar Promise = require('../../lib/promise');\nvar paymentOptionIDs = require('../../constants').paymentOptionIDs;\n\nvar DEFAULT_APPLE_PAY_SESSION_VERSION = 2;\n\nfunction ApplePayView() {\n  BaseView.apply(this, arguments);\n}\n\nApplePayView.prototype = Object.create(BaseView.prototype);\nApplePayView.prototype.constructor = ApplePayView;\nApplePayView.ID = ApplePayView.prototype.ID = paymentOptionIDs.applePay;\n\nApplePayView.prototype.initialize = function () {\n  var self = this;\n\n  self.applePayConfiguration = assign({}, self.model.merchantConfiguration.applePay);\n  self.applePaySessionVersion = self.applePayConfiguration.applePaySessionVersion || DEFAULT_APPLE_PAY_SESSION_VERSION;\n\n  delete self.applePayConfiguration.applePaySessionVersion;\n\n  self.model.asyncDependencyStarting();\n\n  return btApplePay.create({client: this.client}).then(function (applePayInstance) {\n    var buttonDiv = self.getElementById('apple-pay-button');\n\n    self.applePayInstance = applePayInstance;\n\n    self.model.on('changeActivePaymentView', function (paymentViewID) {\n      if (paymentViewID !== self.ID) {\n        return;\n      }\n\n      global.ApplePaySession.canMakePaymentsWithActiveCard(self.applePayInstance.merchantIdentifier).then(function (canMakePayments) {\n        if (!canMakePayments) {\n          self.model.reportError('applePayActiveCardError');\n        }\n      });\n    });\n\n    buttonDiv.onclick = self._showPaymentSheet.bind(self);\n    buttonDiv.style['-apple-pay-button-style'] = self.model.merchantConfiguration.applePay.buttonStyle || 'black';\n\n    self.model.asyncDependencyReady();\n  }).catch(function (err) {\n    self.model.asyncDependencyFailed({\n      view: self.ID,\n      error: new DropinError(err)\n    });\n  });\n};\n\nApplePayView.prototype._showPaymentSheet = function () {\n  var self = this;\n  var request = self.applePayInstance.createPaymentRequest(this.applePayConfiguration.paymentRequest);\n  var session = new global.ApplePaySession(self.applePaySessionVersion, request);\n\n  session.onvalidatemerchant = function (event) {\n    self.applePayInstance.performValidation({\n      validationURL: event.validationURL,\n      displayName: self.applePayConfiguration.displayName\n    }).then(function (validationData) {\n      session.completeMerchantValidation(validationData);\n    }).catch(function (validationErr) {\n      self.model.reportError(validationErr);\n      session.abort();\n    });\n  };\n\n  session.onpaymentauthorized = function (event) {\n    self.applePayInstance.tokenize({\n      token: event.payment.token\n    }).then(function (payload) {\n      session.completePayment(global.ApplePaySession.STATUS_SUCCESS);\n      payload.rawPaymentData = event.payment;\n      self.model.addPaymentMethod(payload);\n    }).catch(function (tokenizeErr) {\n      self.model.reportError(tokenizeErr);\n      session.completePayment(global.ApplePaySession.STATUS_FAILURE);\n    });\n  };\n\n  session.begin();\n\n  return false;\n};\n\nApplePayView.prototype.updateConfiguration = function (key, value) {\n  this.applePayConfiguration[key] = value;\n};\n\nApplePayView.isEnabled = function (options) {\n  var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;\n  var applePayEnabled = gatewayConfiguration.applePayWeb && Boolean(options.merchantConfiguration.applePay);\n  var applePaySessionVersion = options.merchantConfiguration.applePay && options.merchantConfiguration.applePay.applePaySessionVersion;\n  var applePayBrowserSupported;\n\n  applePaySessionVersion = applePaySessionVersion || DEFAULT_APPLE_PAY_SESSION_VERSION;\n\n  if (!applePayEnabled) {\n    return Promise.resolve(false);\n  }\n\n  applePayBrowserSupported = global.ApplePaySession && isHTTPS.isHTTPS();\n\n  if (!applePayBrowserSupported) {\n    return Promise.resolve(false);\n  }\n\n  if (!global.ApplePaySession.supportsVersion(applePaySessionVersion)) {\n    return Promise.resolve(false);\n  }\n\n  return Promise.resolve(Boolean(global.ApplePaySession.canMakePayments()));\n};\n\nmodule.exports = ApplePayView;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../constants\":125,\"../../lib/assign\":131,\"../../lib/dropin-error\":135,\"../../lib/is-https\":139,\"../../lib/promise\":143,\"../base-view\":173,\"braintree-web/apple-pay\":29}],180:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar analytics = require('../../lib/analytics');\nvar assign = require('../../lib/assign').assign;\nvar browserDetection = require('../../lib/browser-detection');\nvar BaseView = require('../base-view');\nvar btPaypal = require('braintree-web/paypal-checkout');\nvar DropinError = require('../../lib/dropin-error');\nvar constants = require('../../constants');\nvar assets = require('@braintree/asset-loader');\nvar translations = require('../../translations').fiveCharacterLocales;\nvar Promise = require('../../lib/promise');\n\nvar ASYNC_DEPENDENCY_TIMEOUT = 30000;\nvar READ_ONLY_CONFIGURATION_OPTIONS = ['offerCredit', 'locale'];\nvar DEFAULT_CHECKOUTJS_LOG_LEVEL = 'warn';\n\nvar paypalScriptLoadInProgressPromise;\n\nfunction BasePayPalView() {\n  BaseView.apply(this, arguments);\n}\n\nBasePayPalView.prototype = Object.create(BaseView.prototype);\n\nBasePayPalView.prototype.initialize = function () {\n  var asyncDependencyTimeoutHandler;\n  var isCredit = Boolean(this._isPayPalCredit);\n  var setupComplete = false;\n  var self = this;\n  var paypalType = isCredit ? 'paypalCredit' : 'paypal';\n  var paypalConfiguration = this.model.merchantConfiguration[paypalType];\n\n  this.paypalConfiguration = assign({}, paypalConfiguration);\n\n  this.model.asyncDependencyStarting();\n  asyncDependencyTimeoutHandler = setTimeout(function () {\n    self.model.asyncDependencyFailed({\n      view: self.ID,\n      error: new DropinError('There was an error connecting to PayPal.')\n    });\n  }, ASYNC_DEPENDENCY_TIMEOUT);\n\n  return btPaypal.create({client: this.client}).then(function (paypalInstance) {\n    var checkoutJSConfiguration;\n    var buttonSelector = '[data-braintree-id=\"paypal-button\"]';\n    var environment = self.client.getConfiguration().gatewayConfiguration.environment === 'production' ? 'production' : 'sandbox';\n    var locale = self.model.merchantConfiguration.locale;\n\n    self.paypalInstance = paypalInstance;\n\n    self.paypalConfiguration.offerCredit = Boolean(isCredit);\n    checkoutJSConfiguration = {\n      env: environment,\n      style: self.paypalConfiguration.buttonStyle || {},\n      commit: self.paypalConfiguration.commit,\n      payment: function () {\n        return paypalInstance.createPayment(self.paypalConfiguration).catch(reportError);\n      },\n      onAuthorize: function (data) {\n        return paypalInstance.tokenizePayment(data).then(function (tokenizePayload) {\n          if (self.paypalConfiguration.flow === 'vault' && !self.model.isGuestCheckout) {\n            tokenizePayload.vaulted = true;\n          }\n          self.model.addPaymentMethod(tokenizePayload);\n        }).catch(reportError);\n      },\n      onError: reportError\n    };\n\n    if (locale && locale in translations) {\n      self.paypalConfiguration.locale = locale;\n      checkoutJSConfiguration.locale = locale;\n    }\n\n    if (isCredit) {\n      buttonSelector = '[data-braintree-id=\"paypal-credit-button\"]';\n      checkoutJSConfiguration.style.label = 'credit';\n    } else {\n      checkoutJSConfiguration.funding = {\n        disallowed: [global.paypal.FUNDING.CREDIT]\n      };\n    }\n\n    return global.paypal.Button.render(checkoutJSConfiguration, buttonSelector).then(function () {\n      self.model.asyncDependencyReady();\n      setupComplete = true;\n      clearTimeout(asyncDependencyTimeoutHandler);\n    });\n  }).catch(reportError);\n\n  function reportError(err) {\n    if (setupComplete) {\n      self.model.reportError(err);\n    } else {\n      self.model.asyncDependencyFailed({\n        view: self.ID,\n        error: err\n      });\n      clearTimeout(asyncDependencyTimeoutHandler);\n    }\n  }\n};\n\nBasePayPalView.prototype.requestPaymentMethod = function () {\n  this.model.reportError('paypalButtonMustBeUsed');\n};\n\nBasePayPalView.prototype.updateConfiguration = function (key, value) {\n  if (READ_ONLY_CONFIGURATION_OPTIONS.indexOf(key) === -1) {\n    this.paypalConfiguration[key] = value;\n  }\n};\n\nBasePayPalView.isEnabled = function (options) {\n  var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;\n\n  if (!gatewayConfiguration.paypalEnabled) {\n    return Promise.resolve(false);\n  }\n\n  if (browserDetection.isIe9() || browserDetection.isIe10()) {\n    analytics.sendEvent(options.client, options.viewID + '.checkout.js-browser-not-supported');\n\n    return Promise.resolve(false);\n  }\n\n  if (global.paypal && global.paypal.Button) {\n    return Promise.resolve(true);\n  }\n\n  if (paypalScriptLoadInProgressPromise) {\n    return paypalScriptLoadInProgressPromise;\n  }\n\n  paypalScriptLoadInProgressPromise = assets.loadScript({\n    src: constants.CHECKOUT_JS_SOURCE,\n    id: constants.PAYPAL_CHECKOUT_SCRIPT_ID,\n    dataAttributes: {\n      'log-level': options.merchantConfiguration.paypal.logLevel || DEFAULT_CHECKOUTJS_LOG_LEVEL\n    }\n  }).then(function () {\n    return Promise.resolve(true);\n  }).catch(function () {\n    return Promise.resolve(false);\n  }).then(function (result) {\n    paypalScriptLoadInProgressPromise = null;\n\n    return Promise.resolve(result);\n  });\n\n  return paypalScriptLoadInProgressPromise;\n};\n\nmodule.exports = BasePayPalView;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../constants\":125,\"../../lib/analytics\":130,\"../../lib/assign\":131,\"../../lib/browser-detection\":132,\"../../lib/dropin-error\":135,\"../../lib/promise\":143,\"../../translations\":158,\"../base-view\":173,\"@braintree/asset-loader\":1,\"braintree-web/paypal-checkout\":101}],181:[function(require,module,exports){\n'use strict';\n\nvar assign = require('../../lib/assign').assign;\n\nvar BaseView = require('../base-view');\nvar classList = require('@braintree/class-list');\nvar constants = require('../../constants');\nvar DropinError = require('../../lib/dropin-error');\nvar hostedFields = require('braintree-web/hosted-fields');\nvar isUtf8 = require('../../lib/is-utf-8');\nvar transitionHelper = require('../../lib/transition-helper');\nvar Promise = require('../../lib/promise');\n\nvar cardIconHTML = \"<div data-braintree-id=\\\"visa-card-icon\\\" class=\\\"braintree-sheet__card-icon\\\">\\n    <svg width=\\\"40\\\" height=\\\"24\\\">\\n        <use xlink:href=\\\"#icon-visa\\\"></use>\\n    </svg>\\n</div>\\n<div data-braintree-id=\\\"master-card-card-icon\\\" class=\\\"braintree-sheet__card-icon\\\">\\n    <svg width=\\\"40\\\" height=\\\"24\\\">\\n        <use xlink:href=\\\"#icon-master-card\\\"></use>\\n    </svg>\\n</div>\\n<div data-braintree-id=\\\"unionpay-card-icon\\\" class=\\\"braintree-sheet__card-icon braintree-hidden\\\">\\n    <svg width=\\\"40\\\" height=\\\"24\\\">\\n        <use xlink:href=\\\"#icon-unionpay\\\"></use>\\n    </svg>\\n</div>\\n<div data-braintree-id=\\\"american-express-card-icon\\\" class=\\\"braintree-sheet__card-icon\\\">\\n    <svg width=\\\"40\\\" height=\\\"24\\\">\\n        <use xlink:href=\\\"#icon-american-express\\\"></use>\\n    </svg>\\n</div>\\n<div data-braintree-id=\\\"jcb-card-icon\\\" class=\\\"braintree-sheet__card-icon\\\">\\n    <svg width=\\\"40\\\" height=\\\"24\\\">\\n        <use xlink:href=\\\"#icon-jcb\\\"></use>\\n    </svg>\\n</div>\\n<!-- Remove braintree-hidden class when supportedCardType accurately indicates Diners Club support -->\\n<div data-braintree-id=\\\"diners-club-card-icon\\\" class=\\\"braintree-sheet__card-icon braintree-hidden\\\">\\n    <svg width=\\\"40\\\" height=\\\"24\\\">\\n        <use xlink:href=\\\"#icon-diners-club\\\"></use>\\n    </svg>\\n</div>\\n<div data-braintree-id=\\\"discover-card-icon\\\" class=\\\"braintree-sheet__card-icon\\\">\\n    <svg width=\\\"40\\\" height=\\\"24\\\">\\n        <use xlink:href=\\\"#icon-discover\\\"></use>\\n    </svg>\\n</div>\\n<div data-braintree-id=\\\"maestro-card-icon\\\" class=\\\"braintree-sheet__card-icon\\\">\\n    <svg width=\\\"40\\\" height=\\\"24\\\">\\n        <use xlink:href=\\\"#icon-maestro\\\"></use>\\n    </svg>\\n</div>\\n\";\n\nfunction CardView() {\n  BaseView.apply(this, arguments);\n}\n\nCardView.prototype = Object.create(BaseView.prototype);\nCardView.prototype.constructor = CardView;\nCardView.ID = CardView.prototype.ID = constants.paymentOptionIDs.card;\n\nCardView.prototype.initialize = function () {\n  var cvvFieldGroup, postalCodeFieldGroup;\n  var cardholderNameField = this.getElementById('cardholder-name-field-group');\n  var cardIcons = this.getElementById('card-view-icons');\n  var hfOptions = this._generateHostedFieldsOptions();\n\n  cardIcons.innerHTML = cardIconHTML;\n  this._hideUnsupportedCardIcons();\n\n  this.hasCVV = hfOptions.fields.cvv;\n  this.hasCardholderName = Boolean(this.model.merchantConfiguration.card && this.model.merchantConfiguration.card.cardholderName);\n  this.cardholderNameInput = cardholderNameField.querySelector('input');\n  this.cardNumberIcon = this.getElementById('card-number-icon');\n  this.cardNumberIconSvg = this.getElementById('card-number-icon-svg');\n  this.cvvIcon = this.getElementById('cvv-icon');\n  this.cvvIconSvg = this.getElementById('cvv-icon-svg');\n  this.cvvLabelDescriptor = this.getElementById('cvv-label-descriptor');\n  this.fieldErrors = {};\n  this.extraInputs = [\n    {\n      fieldName: 'cardholderName',\n      enabled: this.hasCardholderName,\n      required: this.hasCardholderName && this.model.merchantConfiguration.card.cardholderName.required,\n      requiredError: this.strings.fieldEmptyForCardholderName,\n      validations: [\n        {\n          isValid: function (value) {\n            return value.length < 256;\n          },\n          error: this.strings.fieldTooLongForCardholderName\n        }\n      ]\n    }\n  ];\n\n  if (!this.hasCVV) {\n    cvvFieldGroup = this.getElementById('cvv-field-group');\n    cvvFieldGroup.parentNode.removeChild(cvvFieldGroup);\n  }\n\n  if (!hfOptions.fields.postalCode) {\n    postalCodeFieldGroup = this.getElementById('postal-code-field-group');\n    postalCodeFieldGroup.parentNode.removeChild(postalCodeFieldGroup);\n  }\n\n  this.extraInputs.forEach(function (extraInput) {\n    if (extraInput.enabled) {\n      this._setupExtraInput(extraInput);\n    } else {\n      this._removeExtraInput(extraInput);\n    }\n  }.bind(this));\n\n  this.model.asyncDependencyStarting();\n\n  return hostedFields.create(hfOptions).then(function (hostedFieldsInstance) {\n    this.hostedFieldsInstance = hostedFieldsInstance;\n    this.hostedFieldsInstance.on('blur', this._onBlurEvent.bind(this));\n    this.hostedFieldsInstance.on('cardTypeChange', this._onCardTypeChangeEvent.bind(this));\n    this.hostedFieldsInstance.on('focus', this._onFocusEvent.bind(this));\n    this.hostedFieldsInstance.on('notEmpty', this._onNotEmptyEvent.bind(this));\n    this.hostedFieldsInstance.on('validityChange', this._onValidityChangeEvent.bind(this));\n\n    this.model.asyncDependencyReady();\n  }.bind(this)).catch(function (err) {\n    this.model.asyncDependencyFailed({\n      view: this.ID,\n      error: err\n    });\n  }.bind(this));\n};\n\nCardView.prototype._setupExtraInput = function (extraInput) {\n  var self = this;\n  var fieldNameKebab = camelCaseToKebabCase(extraInput.fieldName);\n  var field = this.getElementById(fieldNameKebab + '-field-group');\n  var input = field.querySelector('input');\n  var nameContainer = field.querySelector('.braintree-form__hosted-field');\n\n  input.addEventListener('keyup', function () {\n    var valid = self._validateExtraInput(extraInput, true);\n\n    classList.toggle(nameContainer, 'braintree-form__field--valid', valid);\n\n    if (valid) {\n      self.hideFieldError(extraInput.fieldName);\n    }\n\n    self._sendRequestableEvent();\n  }, false);\n\n  if (extraInput.required) {\n    input.addEventListener('blur', function () {\n      // the active element inside the blur event is the document.body\n      // by taking it out of the event loop, we can detect the new\n      // active element (hosted field or other card view element)\n      setTimeout(function () {\n        if (isCardViewElement()) {\n          self._validateExtraInput(extraInput, true);\n        }\n      }, 0);\n    }, false);\n  }\n};\n\nCardView.prototype._removeExtraInput = function (extraInput) {\n  var field = this.getElementById(camelCaseToKebabCase(extraInput.fieldName) + '-field-group');\n\n  field.parentNode.removeChild(field);\n};\n\nCardView.prototype._sendRequestableEvent = function () {\n  if (!this._isTokenizing) {\n    this.model.setPaymentMethodRequestable({\n      isRequestable: this._validateForm(),\n      type: constants.paymentMethodTypes.card\n    });\n  }\n};\n\nCardView.prototype._generateHostedFieldsOptions = function () {\n  var challenges = this.client.getConfiguration().gatewayConfiguration.challenges;\n  var hasCVVChallenge = challenges.indexOf('cvv') !== -1;\n  var hasPostalCodeChallenge = challenges.indexOf('postal_code') !== -1;\n  var overrides = this.model.merchantConfiguration.card && this.model.merchantConfiguration.card.overrides;\n  var options = {\n    client: this.client,\n    fields: {\n      number: {\n        selector: this._generateFieldSelector('number'),\n        placeholder: generateCardNumberPlaceholder()\n      },\n      expirationDate: {\n        selector: this._generateFieldSelector('expiration'),\n        placeholder: this.strings.expirationDatePlaceholder\n      },\n      cvv: {\n        selector: this._generateFieldSelector('cvv'),\n        placeholder: addBullets(3)\n      },\n      postalCode: {\n        selector: this._generateFieldSelector('postal-code')\n      }\n    },\n    styles: {\n      input: {\n        'font-size': '16px',\n        'font-family': '-apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\", sans-serif',\n        color: '#000'\n      },\n      ':focus': {\n        color: 'black'\n      },\n      '::-webkit-input-placeholder': {\n        color: '#6a6a6a'\n      },\n      ':-moz-placeholder': {\n        color: '#6a6a6a'\n      },\n      '::-moz-placeholder': {\n        color: '#6a6a6a'\n      },\n      ':-ms-input-placeholder ': {\n        color: '#6a6a6a'\n      },\n      'input::-ms-clear': {\n        color: 'transparent'\n      }\n    }\n  };\n\n  if (!hasCVVChallenge) {\n    delete options.fields.cvv;\n  }\n\n  if (!hasPostalCodeChallenge) {\n    delete options.fields.postalCode;\n  }\n\n  if (!overrides) { return options; }\n\n  if (overrides.fields) {\n    if (overrides.fields.cvv && overrides.fields.cvv.placeholder) {\n      this._hasCustomCVVPlaceholder = true;\n    }\n\n    Object.keys(overrides.fields).forEach(function (field) {\n      if ((field === 'cvv' || field === 'postalCode') && overrides.fields[field] === null) {\n        delete options.fields[field];\n\n        return;\n      }\n\n      if (!options.fields[field]) {\n        return;\n      }\n\n      assign(options.fields[field], overrides.fields[field], {\n        selector: options.fields[field].selector\n      });\n    });\n  }\n\n  if (overrides.styles) {\n    Object.keys(overrides.styles).forEach(function (style) {\n      if (overrides.styles[style] === null) {\n        delete options.styles[style];\n\n        return;\n      }\n\n      normalizeStyles(overrides.styles[style]);\n      options.styles[style] = options.styles[style] || {};\n\n      assign(options.styles[style], overrides.styles[style]);\n    });\n  }\n\n  return options;\n};\n\nCardView.prototype._validateForm = function (showFieldErrors) {\n  var cardType, cardTypeSupported, state;\n  var isValid = true;\n  var supportedCardTypes = this.client.getConfiguration().gatewayConfiguration.creditCards.supportedCardTypes;\n\n  if (!this.hostedFieldsInstance) {\n    return false;\n  }\n\n  state = this.hostedFieldsInstance.getState();\n\n  Object.keys(state.fields).forEach(function (key) {\n    var field = state.fields[key];\n\n    if (!showFieldErrors && !isValid) {\n      // return early if form is already invalid\n      // and we don't need to display all field errors\n      return;\n    }\n\n    if (field.isEmpty) {\n      isValid = false;\n\n      if (showFieldErrors) {\n        this.showFieldError(key, this.strings['fieldEmptyFor' + capitalize(key)]);\n      }\n    } else if (!field.isValid) {\n      isValid = false;\n\n      if (showFieldErrors) {\n        this.showFieldError(key, this.strings['fieldInvalidFor' + capitalize(key)]);\n      }\n    }\n  }.bind(this));\n\n  if (state.fields.number.isValid) {\n    cardType = constants.configurationCardTypes[state.cards[0].type];\n    cardTypeSupported = supportedCardTypes.indexOf(cardType) !== -1;\n\n    if (!cardTypeSupported) {\n      isValid = false;\n\n      if (showFieldErrors) {\n        this.showFieldError('number', this.strings.unsupportedCardTypeError);\n      }\n    }\n  }\n\n  if (this.extraInputs) {\n    this.extraInputs.forEach(function (extraInput) {\n      var fieldIsValid;\n\n      if (!extraInput.enabled) {\n        return;\n      }\n\n      fieldIsValid = this._validateExtraInput(extraInput, showFieldErrors);\n\n      isValid = isValid && fieldIsValid;\n    }.bind(this));\n  }\n\n  return isValid;\n};\n\nCardView.prototype._validateExtraInput = function (extraInput, showFieldError) {\n  var fieldNameKebab = camelCaseToKebabCase(extraInput.fieldName);\n  var field = this.getElementById(fieldNameKebab + '-field-group');\n  var input = field.querySelector('input');\n  var valid = true;\n\n  if (extraInput.required) {\n    valid = input.value.length > 0;\n\n    if (!valid && showFieldError) {\n      this.showFieldError(extraInput.fieldName, extraInput.requiredError);\n    }\n  }\n\n  extraInput.validations.forEach(function (validation) {\n    var validationPassed = validation.isValid(input.value);\n\n    if (!validationPassed && showFieldError) {\n      this.showFieldError(extraInput.fieldName, validation.error);\n    }\n\n    valid = valid && validationPassed;\n  }.bind(this));\n\n  return valid;\n};\n\nCardView.prototype.getPaymentMethod = function () { // eslint-disable-line consistent-return\n  var formIsValid = this._validateForm();\n\n  if (formIsValid) {\n    return {\n      type: constants.paymentMethodTypes.card\n    };\n  }\n};\n\nCardView.prototype.tokenize = function () {\n  var transitionCallback;\n  var self = this;\n  var state = self.hostedFieldsInstance.getState();\n  var tokenizeOptions = {\n    vault: !self.model.isGuestCheckout\n  };\n\n  this.model.clearError();\n\n  if (!this._validateForm(true)) {\n    self.model.reportError('hostedFieldsFieldsInvalidError');\n    self.allowUserAction();\n\n    return Promise.reject(new DropinError(constants.errors.NO_PAYMENT_METHOD_ERROR));\n  }\n\n  if (this.hasCardholderName) {\n    tokenizeOptions.cardholderName = this.cardholderNameInput.value;\n  }\n\n  self._isTokenizing = true;\n\n  return self.hostedFieldsInstance.tokenize(tokenizeOptions).then(function (payload) {\n    var retainCardFields = self.model.merchantConfiguration.card &&\n      self.model.merchantConfiguration.card.clearFieldsAfterTokenization === false;\n\n    if (!retainCardFields) {\n      Object.keys(state.fields).forEach(function (field) {\n        self.hostedFieldsInstance.clear(field);\n      });\n\n      if (self.hasCardholderName) {\n        self.cardholderNameInput.value = '';\n      }\n    }\n\n    if (!self.model.isGuestCheckout) {\n      payload.vaulted = true;\n    }\n\n    return new Promise(function (resolve) {\n      transitionCallback = function () {\n        // Wait for braintree-sheet--tokenized class to be added in IE 9\n        // before attempting to remove it\n        setTimeout(function () {\n          self.model.addPaymentMethod(payload);\n          resolve(payload);\n          classList.remove(self.element, 'braintree-sheet--tokenized');\n        }, 0);\n      };\n\n      transitionHelper.onTransitionEnd(self.element, 'max-height', transitionCallback);\n\n      setTimeout(function () {\n        self.allowUserAction();\n        self._isTokenizing = false;\n      }, constants.CHANGE_ACTIVE_PAYMENT_METHOD_TIMEOUT);\n\n      classList.add(self.element, 'braintree-sheet--tokenized');\n    });\n  }).catch(function (err) {\n    self._isTokenizing = false;\n    // this is a little magical, but if the code property exists\n    // in the translations with the word Error appended to the end,\n    // then reportError will automatically print that translation.\n    // See https://github.com/braintree/braintree-web-drop-in/blob/6ecba73f2f16e8b7ae2119702ac162a1a985908e/src/views/main-view.js#L255-L256\n    self.model.reportError(err);\n    self.allowUserAction();\n\n    return Promise.reject(new DropinError({\n      message: constants.errors.NO_PAYMENT_METHOD_ERROR,\n      braintreeWebError: err\n    }));\n  });\n};\n\nCardView.prototype.showFieldError = function (field, errorMessage) {\n  var fieldError;\n  var fieldGroup = this.getElementById(camelCaseToKebabCase(field) + '-field-group');\n  var input = fieldGroup.querySelector('input');\n\n  if (!this.fieldErrors.hasOwnProperty(field)) {\n    this.fieldErrors[field] = this.getElementById(camelCaseToKebabCase(field) + '-field-error');\n  }\n\n  classList.add(fieldGroup, 'braintree-form__field-group--has-error');\n\n  fieldError = this.fieldErrors[field];\n  fieldError.innerHTML = errorMessage;\n\n  if (input && isNormalFieldElement(input)) {\n    input.setAttribute('aria-invalid', true);\n  } else {\n    this.hostedFieldsInstance.setAttribute({\n      field: field,\n      attribute: 'aria-invalid',\n      value: true\n    });\n    this.hostedFieldsInstance.setMessage({\n      field: field,\n      message: errorMessage\n    });\n  }\n};\n\nCardView.prototype.hideFieldError = function (field) {\n  var fieldGroup = this.getElementById(camelCaseToKebabCase(field) + '-field-group');\n  var input = fieldGroup.querySelector('input');\n\n  if (!this.fieldErrors.hasOwnProperty(field)) {\n    this.fieldErrors[field] = this.getElementById(camelCaseToKebabCase(field) + '-field-error');\n  }\n\n  classList.remove(fieldGroup, 'braintree-form__field-group--has-error');\n\n  if (input && isNormalFieldElement(input)) {\n    input.removeAttribute('aria-invalid');\n  } else {\n    this.hostedFieldsInstance.removeAttribute({\n      field: field,\n      attribute: 'aria-invalid'\n    });\n    this.hostedFieldsInstance.setMessage({\n      field: field,\n      message: ''\n    });\n  }\n};\n\nCardView.prototype.teardown = function () {\n  return this.hostedFieldsInstance.teardown();\n};\n\nCardView.prototype._generateFieldSelector = function (field) {\n  return '#braintree--dropin__' + this.model.componentID + ' .braintree-form-' + field;\n};\n\nCardView.prototype._onBlurEvent = function (event) {\n  var field = event.fields[event.emittedBy];\n  var fieldGroup = this.getElementById(camelCaseToKebabCase(event.emittedBy) + '-field-group');\n\n  classList.remove(fieldGroup, 'braintree-form__field-group--is-focused');\n\n  if (shouldApplyFieldEmptyError(field)) {\n    this.showFieldError(event.emittedBy, this.strings['fieldEmptyFor' + capitalize(event.emittedBy)]);\n  } else if (!field.isEmpty && !field.isValid) {\n    this.showFieldError(event.emittedBy, this.strings['fieldInvalidFor' + capitalize(event.emittedBy)]);\n  } else if (event.emittedBy === 'number' && !this._isCardTypeSupported(event.cards[0].type)) {\n    this.showFieldError('number', this.strings.unsupportedCardTypeError);\n  }\n\n  setTimeout(function () {\n    // when focusing on a field by clicking the label,\n    // we need to wait a bit for the iframe to be\n    // focused properly before applying validations\n    if (shouldApplyFieldEmptyError(field)) {\n      this.showFieldError(event.emittedBy, this.strings['fieldEmptyFor' + capitalize(event.emittedBy)]);\n    }\n  }.bind(this), 150);\n};\n\nCardView.prototype._onCardTypeChangeEvent = function (event) {\n  var cardType;\n  var cardNumberHrefLink = '#iconCardFront';\n  var cvvHrefLink = '#iconCVVBack';\n  var cvvDescriptor = this.strings.cvvThreeDigitLabelSubheading;\n  var cvvPlaceholder = addBullets(3);\n  var numberFieldGroup = this.getElementById('number-field-group');\n\n  if (event.cards.length === 1) {\n    cardType = event.cards[0].type;\n    cardNumberHrefLink = '#icon-' + cardType;\n    if (cardType === 'american-express') {\n      cvvHrefLink = '#iconCVVFront';\n      cvvDescriptor = this.strings.cvvFourDigitLabelSubheading;\n      cvvPlaceholder = addBullets(4);\n    }\n    // Keep icon visible when field is not focused\n    classList.add(numberFieldGroup, 'braintree-form__field-group--card-type-known');\n  } else {\n    classList.remove(numberFieldGroup, 'braintree-form__field-group--card-type-known');\n  }\n\n  this.cardNumberIconSvg.setAttribute('xlink:href', cardNumberHrefLink);\n\n  if (this.hasCVV) {\n    this.cvvIconSvg.setAttribute('xlink:href', cvvHrefLink);\n    this.cvvLabelDescriptor.innerHTML = cvvDescriptor;\n\n    if (!this._hasCustomCVVPlaceholder) {\n      this.hostedFieldsInstance.setAttribute({\n        field: 'cvv',\n        attribute: 'placeholder',\n        value: cvvPlaceholder\n      });\n    }\n  }\n};\n\nCardView.prototype._onFocusEvent = function (event) {\n  var fieldGroup = this.getElementById(camelCaseToKebabCase(event.emittedBy) + '-field-group');\n\n  classList.add(fieldGroup, 'braintree-form__field-group--is-focused');\n};\n\nCardView.prototype._onNotEmptyEvent = function (event) {\n  this.hideFieldError(event.emittedBy);\n};\n\nCardView.prototype._onValidityChangeEvent = function (event) {\n  var isValid;\n  var field = event.fields[event.emittedBy];\n\n  if (event.emittedBy === 'number' && event.cards[0]) {\n    isValid = field.isValid && this._isCardTypeSupported(event.cards[0].type);\n  } else {\n    isValid = field.isValid;\n  }\n\n  classList.toggle(field.container, 'braintree-form__field--valid', isValid);\n\n  if (field.isPotentiallyValid) {\n    this.hideFieldError(event.emittedBy);\n  }\n\n  this._sendRequestableEvent();\n};\n\nCardView.prototype.requestPaymentMethod = function () {\n  this.preventUserAction();\n\n  return this.tokenize();\n};\n\nCardView.prototype.onSelection = function () {\n  if (!this.hostedFieldsInstance) {\n    return;\n  }\n\n  if (this.hasCardholderName) {\n    setTimeout(function () { // wait until input is visible\n      this.cardholderNameInput.focus();\n    }.bind(this), 1);\n  } else {\n    this.hostedFieldsInstance.focus('number');\n  }\n};\n\nCardView.prototype._hideUnsupportedCardIcons = function () {\n  var supportedCardTypes = this.client.getConfiguration().gatewayConfiguration.creditCards.supportedCardTypes;\n\n  Object.keys(constants.configurationCardTypes).forEach(function (paymentMethodCardType) {\n    var cardIcon;\n    var configurationCardType = constants.configurationCardTypes[paymentMethodCardType];\n\n    if (supportedCardTypes.indexOf(configurationCardType) === -1) {\n      cardIcon = this.getElementById(paymentMethodCardType + '-card-icon');\n      classList.add(cardIcon, 'braintree-hidden');\n    }\n  }.bind(this));\n};\n\nCardView.prototype._isCardTypeSupported = function (cardType) {\n  var configurationCardType = constants.configurationCardTypes[cardType];\n  var supportedCardTypes = this.client.getConfiguration().gatewayConfiguration.creditCards.supportedCardTypes;\n\n  return supportedCardTypes.indexOf(configurationCardType) !== -1;\n};\n\nCardView.isEnabled = function (options) {\n  var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;\n\n  return Promise.resolve(gatewayConfiguration.creditCards.supportedCardTypes.length > 0);\n};\n\nfunction isNormalFieldElement(element) {\n  return element.id.indexOf('braintree__card-view-input') !== -1;\n}\n\nfunction shouldApplyFieldEmptyError(field) {\n  return field.isEmpty && isCardViewElement();\n}\n\nfunction isCardViewElement() {\n  var activeId = document.activeElement && document.activeElement.id;\n  var isHostedFieldsElement = document.activeElement instanceof HTMLIFrameElement && activeId.indexOf('braintree-hosted-field') !== -1;\n\n  return isHostedFieldsElement || isNormalFieldElement(document.activeElement);\n}\n\nfunction camelCaseToKebabCase(string) {\n  return string.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}\n\nfunction capitalize(string) {\n  return string[0].toUpperCase() + string.substr(1);\n}\n\nfunction normalizeStyles(styles) {\n  Object.keys(styles).forEach(function (style) {\n    var transformedKeyName = camelCaseToKebabCase(style);\n\n    styles[transformedKeyName] = styles[style];\n  });\n}\n\nfunction addBullets(number) {\n  var bulletCharacter = isUtf8() ? '•' : '*';\n\n  return Array(number + 1).join(bulletCharacter);\n}\n\nfunction generateCardNumberPlaceholder() {\n  var four = addBullets(4);\n\n  return [four, four, four, four].join(' ');\n}\n\nmodule.exports = CardView;\n\n},{\"../../constants\":125,\"../../lib/assign\":131,\"../../lib/dropin-error\":135,\"../../lib/is-utf-8\":140,\"../../lib/promise\":143,\"../../lib/transition-helper\":147,\"../base-view\":173,\"@braintree/class-list\":18,\"braintree-web/hosted-fields\":60}],182:[function(require,module,exports){\n(function (global){\n'use strict';\n\nvar assign = require('../../lib/assign').assign;\nvar BaseView = require('../base-view');\nvar btGooglePay = require('braintree-web/google-payment');\nvar DropinError = require('../../lib/dropin-error');\nvar constants = require('../../constants');\nvar assets = require('@braintree/asset-loader');\nvar Promise = require('../../lib/promise');\nvar analytics = require('../../lib/analytics');\n\nfunction GooglePayView() {\n  BaseView.apply(this, arguments);\n}\n\nGooglePayView.prototype = Object.create(BaseView.prototype);\nGooglePayView.prototype.constructor = GooglePayView;\nGooglePayView.ID = GooglePayView.prototype.ID = constants.paymentOptionIDs.googlePay;\n\nGooglePayView.prototype.initialize = function () {\n  var self = this;\n  var buttonOptions, googlePayVersion, merchantId;\n\n  self.googlePayConfiguration = assign({}, self.model.merchantConfiguration.googlePay);\n  googlePayVersion = self.googlePayConfiguration.googlePayVersion;\n  merchantId = self.googlePayConfiguration.merchantId;\n\n  delete self.googlePayConfiguration.googlePayVersion;\n  delete self.googlePayConfiguration.merchantId;\n\n  buttonOptions = assign({\n    buttonType: 'short'\n  }, self.googlePayConfiguration.button, {\n    onClick: function (event) {\n      event.preventDefault();\n\n      self.preventUserAction();\n\n      self.tokenize().then(function () {\n        self.allowUserAction();\n      });\n    }\n  });\n\n  self.model.asyncDependencyStarting();\n\n  return btGooglePay.create({\n    client: self.client,\n    googlePayVersion: googlePayVersion,\n    googleMerchantId: merchantId\n  }).then(function (googlePayInstance) {\n    self.googlePayInstance = googlePayInstance;\n    self.paymentsClient = createPaymentsClient(self.client);\n  }).then(function () {\n    var buttonContainer = self.getElementById('google-pay-button');\n\n    buttonContainer.appendChild(self.paymentsClient.createButton(buttonOptions));\n\n    self.model.asyncDependencyReady();\n  }).catch(function (err) {\n    self.model.asyncDependencyFailed({\n      view: self.ID,\n      error: new DropinError(err)\n    });\n  });\n};\n\nGooglePayView.prototype.tokenize = function () {\n  var self = this;\n  var paymentDataRequest = self.googlePayInstance.createPaymentDataRequest(self.googlePayConfiguration);\n  var rawPaymentData;\n\n  return self.paymentsClient.loadPaymentData(paymentDataRequest).then(function (paymentData) {\n    rawPaymentData = paymentData;\n\n    return self.googlePayInstance.parseResponse(paymentData);\n  }).then(function (tokenizePayload) {\n    tokenizePayload.rawPaymentData = rawPaymentData;\n    self.model.addPaymentMethod(tokenizePayload);\n  }).catch(function (err) {\n    var reportedError = err;\n\n    if (err.statusCode === 'DEVELOPER_ERROR') {\n      console.error(err); // eslint-disable-line no-console\n      reportedError = 'developerError';\n    } else if (err.statusCode === 'CANCELED') {\n      analytics.sendEvent(self.client, 'googlepay.loadPaymentData.canceled');\n\n      return;\n    } else if (err.statusCode) {\n      analytics.sendEvent(self.client, 'googlepay.loadPaymentData.failed');\n    }\n\n    self.model.reportError(reportedError);\n  });\n};\n\nGooglePayView.prototype.updateConfiguration = function (key, value) {\n  this.googlePayConfiguration[key] = value;\n};\n\nGooglePayView.isEnabled = function (options) {\n  var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;\n\n  if (!(gatewayConfiguration.androidPay && Boolean(options.merchantConfiguration.googlePay))) {\n    return Promise.resolve(false);\n  }\n\n  return Promise.resolve().then(function () {\n    if (!(global.google && global.google.payments && global.google.payments.api && global.google.payments.api.PaymentsClient)) {\n      return assets.loadScript({\n        id: constants.GOOGLE_PAYMENT_SCRIPT_ID,\n        src: constants.GOOGLE_PAYMENT_SOURCE\n      });\n    }\n\n    return Promise.resolve();\n  }).then(function () {\n    var paymentsClient = createPaymentsClient(options.client);\n\n    return paymentsClient.isReadyToPay({\n      allowedPaymentMethods: ['CARD', 'TOKENIZED_CARD']\n    });\n  }).then(function (response) {\n    return Boolean(response.result);\n  });\n};\n\nfunction createPaymentsClient(client) {\n  return new global.google.payments.api.PaymentsClient({\n    environment: client.getConfiguration().gatewayConfiguration.environment === 'production' ? 'PRODUCTION' : 'TEST'\n  });\n}\n\nmodule.exports = GooglePayView;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"../../constants\":125,\"../../lib/analytics\":130,\"../../lib/assign\":131,\"../../lib/dropin-error\":135,\"../../lib/promise\":143,\"../base-view\":173,\"@braintree/asset-loader\":1,\"braintree-web/google-payment\":54}],183:[function(require,module,exports){\n'use strict';\n\nvar paymentOptionIDs = require('../../constants').paymentOptionIDs;\n\nvar result = {};\n\nresult[paymentOptionIDs.applePay] = require('./apple-pay-view');\nresult[paymentOptionIDs.card] = require('./card-view');\nresult[paymentOptionIDs.googlePay] = require('./google-pay-view');\nresult[paymentOptionIDs.paypal] = require('./paypal-view');\nresult[paymentOptionIDs.paypalCredit] = require('./paypal-credit-view');\nresult[paymentOptionIDs.venmo] = require('./venmo-view');\n\nmodule.exports = result;\n\n},{\"../../constants\":125,\"./apple-pay-view\":179,\"./card-view\":181,\"./google-pay-view\":182,\"./paypal-credit-view\":184,\"./paypal-view\":185,\"./venmo-view\":186}],184:[function(require,module,exports){\n'use strict';\n\nvar assign = require('../../lib/assign').assign;\nvar Promise = require('../../lib/promise');\nvar paymentOptionIDs = require('../../constants').paymentOptionIDs;\nvar BasePayPalView = require('./base-paypal-view');\n\nfunction PayPalCreditView() {\n  BasePayPalView.apply(this, arguments);\n\n  this._isPayPalCredit = true;\n}\n\nPayPalCreditView.prototype = Object.create(BasePayPalView.prototype);\nPayPalCreditView.prototype.constructor = PayPalCreditView;\nPayPalCreditView.ID = PayPalCreditView.prototype.ID = paymentOptionIDs.paypalCredit;\n\nPayPalCreditView.isEnabled = function (options) {\n  if (!options.merchantConfiguration.paypalCredit) {\n    return Promise.resolve(false);\n  }\n\n  return BasePayPalView.isEnabled(assign({\n    viewID: PayPalCreditView.ID\n  }, options));\n};\nmodule.exports = PayPalCreditView;\n\n},{\"../../constants\":125,\"../../lib/assign\":131,\"../../lib/promise\":143,\"./base-paypal-view\":180}],185:[function(require,module,exports){\n'use strict';\n\nvar assign = require('../../lib/assign').assign;\nvar Promise = require('../../lib/promise');\nvar paymentOptionIDs = require('../../constants').paymentOptionIDs;\nvar BasePayPalView = require('./base-paypal-view');\n\nfunction PayPalView() {\n  BasePayPalView.apply(this, arguments);\n}\n\nPayPalView.prototype = Object.create(BasePayPalView.prototype);\nPayPalView.prototype.constructor = PayPalView;\nPayPalView.ID = PayPalView.prototype.ID = paymentOptionIDs.paypal;\n\nPayPalView.isEnabled = function (options) {\n  if (!options.merchantConfiguration.paypal) {\n    return Promise.resolve(false);\n  }\n\n  return BasePayPalView.isEnabled(assign({\n    viewID: PayPalView.ID\n  }, options));\n};\n\nmodule.exports = PayPalView;\n\n},{\"../../constants\":125,\"../../lib/assign\":131,\"../../lib/promise\":143,\"./base-paypal-view\":180}],186:[function(require,module,exports){\n'use strict';\n\nvar assign = require('../../lib/assign').assign;\nvar BaseView = require('../base-view');\nvar btVenmo = require('braintree-web/venmo');\nvar DropinError = require('../../lib/dropin-error');\nvar Promise = require('../../lib/promise');\nvar paymentOptionIDs = require('../../constants').paymentOptionIDs;\n\nfunction VenmoView() {\n  BaseView.apply(this, arguments);\n}\n\nVenmoView.prototype = Object.create(BaseView.prototype);\nVenmoView.prototype.constructor = VenmoView;\nVenmoView.ID = VenmoView.prototype.ID = paymentOptionIDs.venmo;\n\nVenmoView.prototype.initialize = function () {\n  var self = this;\n  var venmoConfiguration = assign({}, self.model.merchantConfiguration.venmo, {client: this.client});\n\n  self.model.asyncDependencyStarting();\n\n  return btVenmo.create(venmoConfiguration).then(function (venmoInstance) {\n    self.venmoInstance = venmoInstance;\n\n    if (!self.venmoInstance.hasTokenizationResult()) {\n      return Promise.resolve();\n    }\n\n    return self.venmoInstance.tokenize().then(function (payload) {\n      self.model.reportAppSwitchPayload(payload);\n    }).catch(function (err) {\n      if (self._isIgnorableError(err)) {\n        return;\n      }\n      self.model.reportAppSwitchError(paymentOptionIDs.venmo, err);\n    });\n  }).then(function () {\n    var button = self.getElementById('venmo-button');\n\n    button.addEventListener('click', function (event) {\n      event.preventDefault();\n\n      self.preventUserAction();\n\n      return self.venmoInstance.tokenize().then(function (payload) {\n        self.model.addPaymentMethod(payload);\n      }).catch(function (tokenizeErr) {\n        if (self._isIgnorableError(tokenizeErr)) {\n          return;\n        }\n\n        self.model.reportError(tokenizeErr);\n      }).then(function () {\n        self.allowUserAction();\n      });\n    });\n\n    self.model.asyncDependencyReady();\n  }).catch(function (err) {\n    self.model.asyncDependencyFailed({\n      view: self.ID,\n      error: new DropinError(err)\n    });\n  });\n};\n\nVenmoView.prototype._isIgnorableError = function (error) {\n  // customer cancels the flow in the app\n  // we don't emit an error because the customer\n  // initiated that action\n  return error.code === 'VENMO_APP_CANCELED';\n};\n\nVenmoView.isEnabled = function (options) {\n  var gatewayConfiguration = options.client.getConfiguration().gatewayConfiguration;\n  var venmoEnabled = gatewayConfiguration.payWithVenmo && Boolean(options.merchantConfiguration.venmo);\n\n  if (!venmoEnabled) {\n    return Promise.resolve(false);\n  }\n\n  return Promise.resolve(btVenmo.isBrowserSupported(options.merchantConfiguration.venmo));\n};\n\nmodule.exports = VenmoView;\n\n},{\"../../constants\":125,\"../../lib/assign\":131,\"../../lib/dropin-error\":135,\"../../lib/promise\":143,\"../base-view\":173,\"braintree-web/venmo\":112}]},{},[128])(128)\n});\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/braintree-web-drop-in/dist/browser/dropin.js\n");

/***/ })

}]);