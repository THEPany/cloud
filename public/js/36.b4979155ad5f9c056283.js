(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[36],{

/***/ "./node_modules/laue/dist/laue.js":
/*!****************************************!*\
  !*** ./node_modules/laue/dist/laue.js ***!
  \****************************************/
/*! exports provided: Laue, Cartesian, Polar, Line, Area, Bar, Pie, XAxis, YAxis, XAxisInverse, YAxisInverse, Tooltip, Legend, YMarker, YRegion */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Laue\", function() { return Laue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Cartesian\", function() { return Cartesian; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Polar\", function() { return Polar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Line\", function() { return Line; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Area\", function() { return Area; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bar\", function() { return Bar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pie\", function() { return Pie; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XAxis\", function() { return XAxis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"YAxis\", function() { return YAxis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"XAxisInverse\", function() { return XAxisInverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"YAxisInverse\", function() { return YAxisInverse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tooltip\", function() { return Tooltip; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Legend\", function() { return Legend; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"YMarker\", function() { return YMarker; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"YRegion\", function() { return YRegion; });\n/*!\n * Laue v0.2.1\n * https://laue.js.org\n *\n * Copyright (c) 2018 qingwei-li\n * Licensed under the MIT license\n */\n\nfunction isFn(o) {\n  return typeof o === 'function'\n}\n\nfunction isArr(o) {\n  return Array.isArray(o)\n}\n\nfunction isNil(o) {\n  return o === null || o === undefined\n}\n\nfunction isNum(n) {\n  return !isNaN(n)\n}\n\nfunction extend(to, _from) {\n  // eslint-disable-next-line\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n\n  return to\n}\n\nfunction noNilInArray(arr) {\n  return !arr.some(isNil)\n}\n\nfunction noop() {}\n\nfunction debounce(fn, delay) {\n  if ( delay === void 0 ) delay = 20;\n\n  var id;\n\n  return function () {\n    var i = arguments.length, argsArray = Array(i);\n    while ( i-- ) argsArray[i] = arguments[i];\n\n    clearTimeout(id);\n    id = setTimeout.apply(void 0, [ fn, delay ].concat( argsArray ));\n  }\n}\n\nvar slice = Array.prototype.slice;\n\nfunction constant(x) {\n  return function constant() {\n    return x;\n  };\n}\n\nfunction offsetNone(series, order) {\n  if (!((n = series.length) > 1)) { return; }\n  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {\n    s0 = s1, s1 = series[order[i]];\n    for (j = 0; j < m; ++j) {\n      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];\n    }\n  }\n}\n\nfunction orderNone(series) {\n  var n = series.length, o = new Array(n);\n  while (--n >= 0) { o[n] = n; }\n  return o;\n}\n\nfunction stackValue(d, key) {\n  return d[key];\n}\n\nfunction stack() {\n  var keys = constant([]),\n      order = orderNone,\n      offset = offsetNone,\n      value = stackValue;\n\n  function stack(data) {\n    var kz = keys.apply(this, arguments),\n        i,\n        m = data.length,\n        n = kz.length,\n        sz = new Array(n),\n        oz;\n\n    for (i = 0; i < n; ++i) {\n      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {\n        si[j] = sij = [0, +value(data[j], ki, j, data)];\n        sij.data = data[j];\n      }\n      si.key = ki;\n    }\n\n    for (i = 0, oz = order(sz); i < n; ++i) {\n      sz[oz[i]].index = i;\n    }\n\n    offset(sz, oz);\n    return sz;\n  }\n\n  stack.keys = function(_) {\n    return arguments.length ? (keys = typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : keys;\n  };\n\n  stack.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), stack) : value;\n  };\n\n  stack.order = function(_) {\n    return arguments.length ? (order = _ == null ? orderNone : typeof _ === \"function\" ? _ : constant(slice.call(_)), stack) : order;\n  };\n\n  stack.offset = function(_) {\n    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;\n  };\n\n  return stack;\n}\n\nfunction stackOffsetDiverging(series, order) {\n  if (!((n = series.length) > 1)) { return; }\n  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {\n    for (yp = yn = 0, i = 0; i < n; ++i) {\n      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {\n        d[0] = yp, d[1] = yp += dy;\n      } else if (dy < 0) {\n        d[1] = yn, d[0] = yn += dy;\n      } else {\n        d[0] = yp;\n      }\n    }\n  }\n}\n\nvar plane = {\n  props: {\n    data: {\n      type: Array,\n      default: function () { return []; }\n    },\n\n    height: {\n      type: Number,\n      default: 300\n    },\n\n    width: {\n      type: Number,\n      default: 600\n    },\n\n    autoresize: Boolean,\n\n    padding: {\n      default: 8,\n      type: [Number, Array]\n    },\n\n    stacked: Boolean,\n\n    /**\n     * The default colors is \"walden\" from ECharts\n     * @see http://echarts.baidu.com/theme-builder/\n     */\n    colors: {\n      default: function () { return [\n        '#3fb1e3',\n        '#6be6c1',\n        '#626c91',\n        '#a0a7e6',\n        '#c4ebad',\n        '#96dee8'\n      ]; },\n      type: [Array, Function]\n    },\n\n    textColor: {\n      type: String,\n      default: '#999'\n    }\n  },\n\n  computed: {\n    offset: function offset() {\n      var ref = this;\n      var padding = ref.padding;\n      var space = ref.space;\n      var pad = [];\n\n      for (var i = 0; i < 4; i++) {\n        var p = isArr(padding) ? padding[i] || 0 : padding;\n        var s = space[i];\n        pad[i] = isFn(p) ? p(s) : s + p;\n      }\n\n      return pad\n    },\n\n    viewWidth: function viewWidth() {\n      var ref = this;\n      var parentWidth = ref.parentWidth;\n      var width = ref.width;\n      return isNil(parentWidth) ? width : parentWidth\n    },\n\n    canvas: function canvas() {\n      var ref = this;\n      var viewWidth = ref.viewWidth;\n      var height = ref.height;\n      var offset = ref.offset;\n      var x0 = offset[3];\n      var y0 = offset[0];\n      var y1 = height - offset[2];\n      var x1 = viewWidth - offset[1];\n\n      return {\n        x0: x0,\n        y0: y0,\n        width: x1 - x0,\n        height: y1 - y0,\n        x1: x1,\n        y1: y1\n      }\n    },\n\n    curData: function curData() {\n      return stack()\n        .keys(this.props)\n        .offset(this.stacked ? stackOffsetDiverging : noop)(this.data)\n    }\n  },\n\n  provide: function provide() {\n    return {\n      Plane: this\n    }\n  },\n\n  methods: {\n    genColor: function genColor(index) {\n      var ref = this;\n      var colors = ref.colors;\n\n      if (isArr(colors)) {\n        return colors[index % colors.length]\n      }\n\n      return colors(index)\n    },\n\n    resize: function resize() {\n      var ref = this.$el.getBoundingClientRect();\n      var width = ref.width;\n      this.parentWidth = width;\n    },\n\n    addSpace: function addSpace(space) {\n      var this$1 = this;\n      if ( space === void 0 ) space = [];\n\n      space.forEach(function (val, i) {\n        this$1.space[i] = Math.max(val, this$1.space[i] || 0);\n      });\n    }\n  },\n\n  data: function () { return ({\n    space: [0, 0, 0, 0],\n    parentWidth: null,\n    props: [],\n    store: {}\n  }); },\n\n  mounted: function mounted() {\n    if (this.autoresize) {\n      this.resize();\n      if (typeof window !== 'undefined') {\n        window.addEventListener('resize', debounce(this.resize));\n      }\n    }\n  }\n}\n\nvar e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) { step1 *= 10; }\n  else if (error >= e5) { step1 *= 5; }\n  else if (error >= e2) { step1 *= 2; }\n  return stop < start ? -step1 : step1;\n}\n\nfunction int(str) {\n  return parseInt(str, 10)\n}\n\n/**\n * Returns nick ticks\n */\nfunction genTicks(min, max, count) {\n  var assign;\n\n  if (max < min) {\n    (assign = [max, min], min = assign[0], max = assign[1]);\n  }\n\n  if (min === 0 && max === 0) {\n    return [0]\n  }\n\n  var step = tickStep(min, max, count);\n  var first = Math.floor(min / step) * step;\n  var ticks$$1 = [first];\n  var cur = first;\n\n  while (cur < max) {\n    cur += step;\n    ticks$$1.push(cur);\n  }\n\n  if (Math.abs(min - ticks$$1[1]) < step) {\n    ticks$$1.shift();\n    ticks$$1[0] = min;\n  }\n\n  if (Math.abs(max - ticks$$1[ticks$$1.length - 2]) < step) {\n    ticks$$1.pop();\n    ticks$$1[ticks$$1.length - 1] = max;\n  }\n\n  return ticks$$1\n}\n\nfunction genExactNbTicks(min, max, count) {\n  var diff = max - min;\n  var step = diff / (count - 1);\n  var ticks$$1 = [];\n\n  for (var i = 0; i < count; i++) {\n    ticks$$1.push(i * step);\n  }\n\n  ticks$$1.push(max);\n\n  return ticks$$1\n}\n\nfunction bound(data, type, key) {\n  return Math[type].apply(\n    Math, data.map(function (arr) { return Math[type].apply(Math, arr.map(function (item) { return item[key]; }).filter(isNum)); })\n  )\n}\n\nvar Cartesian = {\n  name: 'LaCartesian',\n\n  mixins: [plane],\n\n  props: {\n    bound: {\n      type: Array,\n      default: function () { return []; }\n    },\n\n    narrow: [Boolean, Number, Function],\n\n    distance: {\n      default: 0,\n      type: Number\n    }\n  },\n\n  computed: {\n    high: function high() {\n      return this.getBound(this.bound[1], 'max')\n    },\n\n    low: function low() {\n      return this.getBound(this.bound[0], 'min')\n    },\n\n    len: function len() {\n      return this.data.length\n    },\n\n    tempXRatio: function tempXRatio() {\n      var ref = this;\n      var len = ref.len;\n      return len <= 1 ? 0 : this.canvas.width / (len - 1)\n    },\n\n    gap: function gap() {\n      var ref = this;\n      var narrow = ref.narrow;\n      var tempXRatio = ref.tempXRatio;\n\n      if (isFn(narrow)) {\n        return narrow(tempXRatio)\n      }\n      if (narrow === true) {\n        return tempXRatio / 2\n      }\n      return Number(narrow)\n    },\n\n    xRatio: function xRatio() {\n      return this.tempXRatio ?\n        this.tempXRatio - 2 * this.gap / (this.len - 1) :\n        0\n    },\n\n    yRatio: function yRatio() {\n      return this.canvas.height / (this.high - this.low || 1)\n    }\n  },\n\n  methods: {\n    getBound: function getBound(val, type) {\n      if (typeof val === 'number') {\n        return val\n      }\n\n      var isMin = type === 'min';\n      var result = bound(this.curData, type, isMin ? 0 : 1);\n\n      if (isMin && result === 0) {\n        result = bound(this.curData, 'min', 1);\n      }\n\n      if (isFn(val)) {\n        return val(result)\n      }\n\n      return result\n    }\n  },\n\n  /**\n   * @todo Need to optimize. The Props changes will call update even if it does not need.\n   * https://github.com/vuejs/vue/issues/5727\n   */\n  render: function render(h) {\n    var this$1 = this;\n\n    var ref = this;\n    var viewWidth = ref.viewWidth;\n    var height = ref.height;\n    var autoresize = ref.autoresize;\n    var slots = this.$slots.default || [];\n\n    /**\n     * Reset snap\n     */\n    this.snap = {};\n\n    var props = [];\n    var cartesians = [];\n    var objects = [];\n    var widgets = [];\n    var others = [];\n\n    slots.forEach(function (slot) {\n      var options = slot.componentOptions;\n      if (!options) {\n        others.push(slot);\n        return\n      }\n      var sealed = options.Ctor.sealedOptions;\n      if (!sealed) {\n        return\n      }\n      var propsData = options.propsData;\n      var prop = propsData.prop;\n\n      switch (sealed.type) {\n        case 'cartesian':\n          if (prop && props.indexOf(prop) < 0) {\n            props.push(prop);\n          }\n          slot.index = cartesians.length;\n          cartesians.push(slot);\n          break\n        case 'object':\n          this$1.addSpace(sealed.space);\n          objects.push(slot);\n          break\n        case 'widget':\n          widgets.push(slot);\n          break\n        default:\n          break\n      }\n      if (sealed.preload) {\n        sealed.preload({data: propsData, parent: this$1, index: slot.index});\n      }\n    });\n\n    this.props = props;\n\n    return h(\n      'div',\n      {\n        style: {\n          position: 'relative',\n          width: autoresize ? '100%' : viewWidth + 'px'\n        }\n      },\n      [\n        h(\n          'svg',\n          {\n            attrs: {\n              width: viewWidth,\n              height: height,\n              viewBox: (\"0 0 \" + viewWidth + \" \" + height)\n            }\n          },\n          [others, cartesians, objects]\n        ),\n        widgets\n      ]\n    )\n  }\n}\n\nvar Polar = {\n  name: 'LaPolar',\n\n  mixins: [plane],\n\n  props: {\n    fillContainer: Boolean\n  },\n\n  computed: {\n    min: function min() {\n      return Math.min(this.viewWidth, this.height)\n    }\n  },\n\n  render: function render(h) {\n    var ref = this;\n    var viewWidth = ref.viewWidth;\n    var height = ref.height;\n    var autoresize = ref.autoresize;\n    var slots = this.$slots.default || [];\n\n    /**\n     * Reset snap\n     */\n    this.snap = {};\n\n    var props = [];\n    var polars = [];\n    var widgets = [];\n    var others = [];\n\n    slots.forEach(function (slot) {\n      var options = slot.componentOptions;\n      if (!options) {\n        others.push(slot);\n        return\n      }\n      var sealed = options.Ctor.sealedOptions;\n      if (!sealed) {\n        return\n      }\n      var propsData = options.propsData;\n      var prop = propsData.prop;\n\n      switch (sealed.type) {\n        case 'polar':\n          if (prop && props.indexOf(prop) < 0) {\n            props.push(prop);\n          }\n          slot.index = polars.length;\n          polars.push(slot);\n          break\n        case 'widget':\n          widgets.push(slot);\n          break\n        default:\n          break\n      }\n    });\n\n    this.props = props;\n\n    return h(\n      'div',\n      {\n        style: {\n          position: 'relative',\n          width: autoresize ? '100%' : viewWidth + 'px'\n        }\n      },\n      [\n        h(\n          'svg',\n          {\n            attrs: {\n              width: this.fillContainer ? '100%' : viewWidth,\n              height: this.fillContainer ? '100%' : height,\n              viewBox: this.fillContainer ? (\"0 0 \" + (this.min) + \" \" + (this.min)) : (\"0 0 \" + viewWidth + \" \" + height),\n              preserveAspectRatio: 'xMinYMin'\n            }\n          },\n          [others, polars]\n        ),\n        widgets\n      ]\n    )\n  }\n}\n\nvar basic = {\n  inject: ['Plane'],\n\n  computed: {\n    store: function store() {\n      return this.Plane.store\n    }\n  }\n}\n\nvar values = {\n  props: {\n    prop: String\n  },\n\n  mixins: [basic],\n\n  computed: {\n    raws: function raws() {\n      var ref = this;\n      var prop = ref.prop;\n      var Plane = ref.Plane;\n\n      return prop ? Plane.data.map(function (o) { return o[prop]; }) : null\n    },\n\n    values: function values() {\n      var ref = this;\n      var prop = ref.prop;\n      var Plane = ref.Plane;\n\n      return Plane.curData.filter(function (arr) { return arr.key === prop; })[0] || []\n    }\n  }\n}\n\nvar animate = {\n  props: {\n    animated: Boolean,\n\n    animationDuration: {\n      default: 1,\n      type: Number\n    },\n\n    animationEffect: {\n      default: 'ease',\n      type: String\n    },\n\n    transition: String\n  },\n\n  computed: {\n    trans: function trans() {\n      return (\n        this.transition ||\n        (this.animated ?\n          (\"all \" + (this.animationDuration) + \"s \" + (this.animationEffect)) :\n          'none')\n      )\n    }\n  }\n}\n\nvar chart = {\n  mixins: [values, animate],\n\n  props: {\n    points: Array,\n\n    color: String,\n\n    label: String,\n\n    showValue: Boolean\n  },\n\n  computed: {\n    id: function id() {\n      return this.$vnode.index\n    },\n\n    curColor: function curColor() {\n      return this.color || this.Plane.genColor(this.id)\n    },\n\n    actived: function actived() {\n      var ref = this.store;\n      var hidden = ref.hidden;\n\n      if (!isArr(hidden)) {\n        return true\n      }\n\n      return hidden.indexOf(this.id) < 0\n    }\n  },\n\n  watch: {\n    'store.activedIndex': function store_activedIndex(index) {\n      var ref = this;\n      var store = ref.store;\n\n      store.activedPoint = [].concat(store.activedPoint);\n\n      this.$set(store.activedPoint, this.id, {\n        color: this.curColor,\n        value: this.raws[index],\n        label: this.label\n      });\n    },\n\n    curColor: {\n      immediate: true,\n      handler: function handler(val) {\n        var ref = this;\n        var store = ref.store;\n\n        store.colors = store.colors || {};\n        this.$set(store.colors, this.id, val);\n      }\n    },\n\n    label: {\n      immediate: true,\n      handler: function handler(val) {\n        var ref = this;\n        var store = ref.store;\n\n        store.labels = store.labels || {};\n        this.$set(store.labels, this.id, val);\n      }\n    },\n\n    props: {\n      immediate: true,\n      handler: function handler(val) {\n        var ref = this;\n        var store = ref.store;\n\n        store.props = store.props || {};\n\n        if (!isNil(this.id)) {\n          this.$set(store.props, this.id, val);\n        }\n      }\n    }\n  }\n}\n\nvar cartesian = {\n  mixins: [chart],\n\n  type: 'cartesian',\n\n  computed: {\n    curPoints: function curPoints() {\n      var this$1 = this;\n\n      if (this.points) {\n        return this.points\n      }\n\n      var ref = this.Plane;\n      var gap = ref.gap;\n      var xRatio = ref.xRatio;\n      var yRatio = ref.yRatio;\n      var low = ref.low;\n      var canvas = ref.canvas;\n      var x0 = canvas.x0;\n      var y1 = canvas.y1;\n\n      return this.values.map(function (value, i) {\n        var assign;\n\n        if (isNil(this$1.raws[i])) {\n          return [null]\n        }\n\n        var start = value[0];\n        var end = value[1];\n\n        if (start < 0) {\n          (assign = value, end = assign[0], start = assign[1]);\n        }\n\n        start = Math.max(low, start);\n\n        var y = isNaN(end) ? null : y1 - (end - low) * yRatio;\n        var y0 = isNaN(start) ? null : y1 - (start - low) * yRatio;\n        var x = x0 + xRatio * i + gap;\n\n        return [x, y, y0]\n      })\n    },\n\n    pointSlot: function pointSlot() {\n      var this$1 = this;\n\n      var scoped = this.$scopedSlots.default;\n      var actived = this.store.activedIndex;\n\n      return (\n        scoped &&\n        this.curPoints.map(function (p, i) { return scoped({\n            x: p[0],\n            y: p[1],\n            value: this$1.raws[i],\n            index: i,\n            actived: actived === i,\n            color: this$1.curColor,\n            style: {\n              transition: this$1.trans\n            }\n          }); }\n        )\n      )\n    }\n  }\n}\n\nvar pi = Math.PI,\n    tau = 2 * pi,\n    epsilon = 1e-6,\n    tauEpsilon = tau - epsilon;\n\nfunction Path() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null; // end of current subpath\n  this._ = \"\";\n}\n\nfunction path() {\n  return new Path;\n}\n\nPath.prototype = path.prototype = {\n  constructor: Path,\n  moveTo: function(x, y) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y);\n  },\n  closePath: function() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  },\n  lineTo: function(x, y) {\n    this._ += \"L\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  quadraticCurveTo: function(x1, y1, x, y) {\n    this._ += \"Q\" + (+x1) + \",\" + (+y1) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  bezierCurveTo: function(x1, y1, x2, y2, x, y) {\n    this._ += \"C\" + (+x1) + \",\" + (+y1) + \",\" + (+x2) + \",\" + (+y2) + \",\" + (this._x1 = +x) + \",\" + (this._y1 = +y);\n  },\n  arcTo: function(x1, y1, x2, y2, r) {\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\n    var x0 = this._x1,\n        y0 = this._y1,\n        x21 = x2 - x1,\n        y21 = y2 - y1,\n        x01 = x0 - x1,\n        y01 = y0 - y1,\n        l01_2 = x01 * x01 + y01 * y01;\n\n    // Is the radius negative? Error.\n    if (r < 0) { throw new Error(\"negative radius: \" + r); }\n\n    // Is this path empty? Move to (x1,y1).\n    if (this._x1 === null) {\n      this._ += \"M\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\n    else if (!(l01_2 > epsilon)) {}\n\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\n    // Or, is the radius zero? Line to (x1,y1).\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\n      this._ += \"L\" + (this._x1 = x1) + \",\" + (this._y1 = y1);\n    }\n\n    // Otherwise, draw an arc!\n    else {\n      var x20 = x2 - x0,\n          y20 = y2 - y0,\n          l21_2 = x21 * x21 + y21 * y21,\n          l20_2 = x20 * x20 + y20 * y20,\n          l21 = Math.sqrt(l21_2),\n          l01 = Math.sqrt(l01_2),\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\n          t01 = l / l01,\n          t21 = l / l21;\n\n      // If the start tangent is not coincident with (x0,y0), line to.\n      if (Math.abs(t01 - 1) > epsilon) {\n        this._ += \"L\" + (x1 + t01 * x01) + \",\" + (y1 + t01 * y01);\n      }\n\n      this._ += \"A\" + r + \",\" + r + \",0,0,\" + (+(y01 * x20 > x01 * y20)) + \",\" + (this._x1 = x1 + t21 * x21) + \",\" + (this._y1 = y1 + t21 * y21);\n    }\n  },\n  arc: function(x, y, r, a0, a1, ccw) {\n    x = +x, y = +y, r = +r;\n    var dx = r * Math.cos(a0),\n        dy = r * Math.sin(a0),\n        x0 = x + dx,\n        y0 = y + dy,\n        cw = 1 ^ ccw,\n        da = ccw ? a0 - a1 : a1 - a0;\n\n    // Is the radius negative? Error.\n    if (r < 0) { throw new Error(\"negative radius: \" + r); }\n\n    // Is this path empty? Move to (x0,y0).\n    if (this._x1 === null) {\n      this._ += \"M\" + x0 + \",\" + y0;\n    }\n\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\n      this._ += \"L\" + x0 + \",\" + y0;\n    }\n\n    // Is this arc empty? We’re done.\n    if (!r) { return; }\n\n    // Does the angle go the wrong way? Flip the direction.\n    if (da < 0) { da = da % tau + tau; }\n\n    // Is this a complete circle? Draw two arcs to complete the circle.\n    if (da > tauEpsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (x - dx) + \",\" + (y - dy) + \"A\" + r + \",\" + r + \",0,1,\" + cw + \",\" + (this._x1 = x0) + \",\" + (this._y1 = y0);\n    }\n\n    // Is this arc non-empty? Draw an arc!\n    else if (da > epsilon) {\n      this._ += \"A\" + r + \",\" + r + \",0,\" + (+(da >= pi)) + \",\" + cw + \",\" + (this._x1 = x + r * Math.cos(a1)) + \",\" + (this._y1 = y + r * Math.sin(a1));\n    }\n  },\n  rect: function(x, y, w, h) {\n    this._ += \"M\" + (this._x0 = this._x1 = +x) + \",\" + (this._y0 = this._y1 = +y) + \"h\" + (+w) + \"v\" + (+h) + \"h\" + (-w) + \"Z\";\n  },\n  toString: function() {\n    return this._;\n  }\n};\n\nfunction Linear(context) {\n  this._context = context;\n}\n\nLinear.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line || (this._line !== 0 && this._point === 1)) { this._context.closePath(); }\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // proceed\n      default: this._context.lineTo(x, y); break;\n    }\n  }\n};\n\nfunction curveLinear(context) {\n  return new Linear(context);\n}\n\nfunction x(p) {\n  return p[0];\n}\n\nfunction y(p) {\n  return p[1];\n}\n\nfunction line() {\n  var x$$1 = x,\n      y$$1 = y,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function line(data) {\n    var i,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer;\n\n    if (context == null) { output = curve(buffer = path()); }\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) { output.lineStart(); }\n        else { output.lineEnd(); }\n      }\n      if (defined0) { output.point(+x$$1(d, i, data), +y$$1(d, i, data)); }\n    }\n\n    if (buffer) { return output = null, buffer + \"\" || null; }\n  }\n\n  line.x = function(_) {\n    return arguments.length ? (x$$1 = typeof _ === \"function\" ? _ : constant(+_), line) : x$$1;\n  };\n\n  line.y = function(_) {\n    return arguments.length ? (y$$1 = typeof _ === \"function\" ? _ : constant(+_), line) : y$$1;\n  };\n\n  line.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), line) : defined;\n  };\n\n  line.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;\n  };\n\n  line.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;\n  };\n\n  return line;\n}\n\nfunction point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._x1 + that._k * (that._x2 - that._x0),\n    that._y1 + that._k * (that._y2 - that._y0),\n    that._x2 + that._k * (that._x1 - x),\n    that._y2 + that._k * (that._y1 - y),\n    that._x2,\n    that._y2\n  );\n}\n\nfunction Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinal.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: point(this, this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) { this._context.closePath(); }\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n      case 2: this._point = 3; // proceed\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\nvar cardinal = (function custom(tension) {\n\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0);\n\nvar Trans = {\n  name: 'ElTrans',\n\n  functional: true,\n\n  props: ['from', 'trans'],\n\n  render: function render(h, ref) {\n    var children = ref.children;\n    var props = ref.props;\n\n    return h(\n      'transition',\n      {\n        props: {\n          appear: true\n        },\n        on: {\n          beforeAppear: function beforeAppear(el) {\n            // eslint-disable-next-line\n            for (var key in props.from) {\n              var val = props.from[key];\n              var to = el.getAttribute(key);\n\n              el.setAttribute((\"data-\" + key), to);\n              el.setAttribute(key, val);\n            }\n          },\n\n          appear: function appear(el) {\n            setTimeout(function () {\n              el.style.transition = props.trans;\n              el.style.WebkitTransition = props.trans;\n              el.style.msTransition = props.trans;\n              el.style.MozTransition = props.trans;\n\n              // eslint-disable-next-line\n              for (var key in props.from) {\n                var to = el.getAttribute((\"data-\" + key));\n\n                el.setAttribute(key, to);\n                el.removeAttribute((\"data-\" + key));\n              }\n            });\n          }\n        }\n      },\n      children\n    )\n  }\n}\n\nvar Spread = {\n  name: 'LaMotionSpread',\n\n  functional: true,\n\n  props: ['axis', 'transition'],\n\n  render: function render(h, ref) {\n    var children = ref.children;\n    var props = ref.props;\n    var parent = ref.parent;\n\n    var id = \"la-spread-\" + (parent._uid);\n    var axis = props.axis;\n    var transition = props.transition;\n\n    return h('g', [\n      h('defs', [\n        h(\n          'clipPath',\n          {\n            attrs: {\n              id: id\n            }\n          },\n          [\n            h(\n              Trans,\n              {\n                props: {\n                  from: {\n                    width: axis === 'x' ? 0 : '100%',\n                    height: axis === 'y' ? 0 : '100%'\n                  },\n                  trans: transition\n                }\n              },\n              [\n                h('rect', {\n                  attrs: {\n                    x: 0,\n                    y: 0,\n                    width: '100%',\n                    height: '100%'\n                  }\n                })\n              ]\n            )\n          ]\n        )\n      ]),\n      h(\n        'g',\n        {\n          attrs: {\n            'clip-path': (\"url(#\" + id + \")\")\n          }\n        },\n        children\n      )\n    ])\n  }\n}\n\nvar dashed = {\n  props: {\n    dashed: [Boolean, String]\n  },\n\n  computed: {\n    curDashed: function curDashed() {\n      var ref = this;\n      var dashed = ref.dashed;\n\n      return dashed === true || dashed === '' ?\n        3 :\n        dashed === false ? 'none' : dashed\n    }\n  }\n}\n\nvar Line = {\n  name: 'LaLine',\n\n  mixins: [cartesian, dashed],\n\n  props: {\n    curve: [Boolean, Function],\n\n    dot: Boolean,\n\n    width: {\n      type: Number,\n      default: 1\n    },\n\n    hideLine: Boolean,\n\n    /**\n     * @summary Like connectNulls\n     */\n    continued: Boolean\n  },\n\n  computed: {\n    draw: function draw() {\n      var ref = this;\n      var curve = ref.curve;\n      var continued = ref.continued;\n      var draw = line().defined(noNilInArray);\n\n      if (curve) {\n        draw.curve(isFn(curve) ? curve : cardinal);\n      }\n\n      return function (p) {\n        p = continued ? p.filter(noNilInArray) : p;\n        return draw(p)\n      }\n    },\n\n    valueSlot: function valueSlot() {\n      var this$1 = this;\n\n      var h = this.$createElement;\n\n      return (\n        this.showValue &&\n        h(\n          'g',\n          {\n            attrs: {\n              fill: this.curColor\n            }\n          },\n          this.curPoints.map(function (point$$1, i) {\n            return h(\n              'text',\n              {\n                attrs: {\n                  x: point$$1[0],\n                  y: point$$1[1],\n                  dy: '-0.31em',\n                  'text-anchor': 'middle'\n                }\n              },\n              this$1.raws[i]\n            )\n          })\n        )\n      )\n    }\n  },\n\n  render: function render(h) {\n    var ref = this;\n    var animated = ref.animated;\n    var width = ref.width;\n    var curPoints = ref.curPoints;\n    var curColor = ref.curColor;\n    var hideLine = ref.hideLine;\n    var trans = ref.trans;\n    var valueSlot = ref.valueSlot;\n    var pointSlot = ref.pointSlot;\n    var store = ref.store;\n    var actived = ref.actived;\n\n    if (!actived) {\n      return null\n    }\n\n    var graphs = [\n      !hideLine &&\n        h('path', {\n          attrs: {\n            stroke: curColor,\n            fill: 'none',\n            'stroke-width': width,\n            d: this.draw(curPoints)\n          },\n          style: {\n            'stroke-dasharray': this.curDashed,\n            transition: trans\n          }\n        }),\n      this.$slots.default,\n      this.dot &&\n        h(\n          'g',\n          {\n            attrs: {\n              stroke: '#fff',\n              fill: curColor\n            }\n          },\n          curPoints.map(\n            function (p, index) { return p[1] &&\n              h('circle', {\n                attrs: {\n                  cx: p[0],\n                  cy: p[1],\n                  r: (index === store.activedIndex ? 2 : 0) + int(width) + 1\n                },\n                style: {\n                  transition: trans\n                }\n              }); }\n          )\n        ),\n      valueSlot,\n      pointSlot\n    ];\n\n    if (animated) {\n      return h(\n        Spread,\n        {\n          props: {\n            axis: 'x',\n            transition: trans\n          }\n        },\n        graphs\n      )\n    }\n\n    return h('g', graphs)\n  }\n}\n\nfunction area() {\n  var x0 = x,\n      x1 = null,\n      y0 = constant(0),\n      y1 = y,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = data.length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n\n    if (context == null) { output = curve(buffer = path()); }\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) { return output = null, buffer + \"\" || null; }\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function(_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function(_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 =\n  area.lineY0 = function() {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function() {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function() {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n\nvar Area = {\n  name: 'LaArea',\n\n  mixins: [Line],\n\n  props: {\n    fillColor: String\n  },\n\n  computed: {\n    draw: function draw() {\n      var ref = this;\n      var curve = ref.curve;\n      var continued = ref.continued;\n      var draw = area()\n        .y0(function (d) { return d[2]; })\n        .defined(noNilInArray);\n\n      if (curve) {\n        draw.curve(isFn(curve) ? curve : cardinal);\n      }\n\n      return function (p) {\n        p = continued ? p.filter(noNilInArray) : p;\n        return draw(p)\n      }\n    },\n\n    areaId: function areaId() {\n      return (\"la-area-\" + (this._uid) + \"-\" + (this.id))\n    },\n\n    curFillColor: function curFillColor() {\n      return this.fillColor || (\"url(#\" + (this.areaId) + \")\")\n    }\n  },\n\n  render: function render(h) {\n    var ref = this;\n    var trans = ref.trans;\n    var curPoints = ref.curPoints;\n    var curColor = ref.curColor;\n    var curFillColor = ref.curFillColor;\n    var actived = ref.actived;\n\n    if (!actived) {\n      return null\n    }\n\n    return h('g', [\n      !this.fillColor &&\n        h('defs', [\n          h(\n            'linearGradient',\n            {\n              // I don't kown why using `attrs` causes the client not to rerender if the server has already rendered.\n              domProps: {\n                id: this.areaId\n              }\n            },\n            [\n              h('stop', {\n                attrs: {\n                  'stop-color': curColor,\n                  'stop-opacity': 0.5\n                }\n              })\n            ]\n          )\n        ]),\n      h(\n        Line,\n        {\n          props: extend(extend({}, this.$props), {\n            color: curColor,\n            points: curPoints,\n            transition: trans\n          }),\n          scopedSlots: this.$scopedSlots\n        },\n        [\n          h('path', {\n            attrs: {\n              d: this.draw(curPoints),\n              fill: curFillColor\n            },\n            style: {\n              transition: trans\n            }\n          }),\n          this.$slots.default\n        ]\n      )\n    ])\n  }\n}\n\nvar DEFAULT_WIDTH = 20;\n\nvar Bar = {\n  name: 'LaBar',\n\n  mixins: [cartesian],\n\n  props: {\n    width: {\n      type: Number,\n      default: DEFAULT_WIDTH\n    }\n  },\n\n  preload: function preload(ref) {\n    var data = ref.data;\n    var parent = ref.parent;\n    var index = ref.index;\n\n    var snap = parent.snap;\n    var distance = parent.distance;\n    var width = data.width || DEFAULT_WIDTH;\n\n    snap.barMap = [].concat(snap.barMap, index);\n    snap.barAllWidth = snap.barAllWidth || 0;\n    snap.barOffset = [].concat(snap.barOffset, snap.barAllWidth);\n    snap.barAllWidth += width + distance;\n  },\n\n  computed: {\n    margin: function margin() {\n      var ref = this;\n      var id = ref.id;\n      var width = ref.width;\n      var ref$1 = this.Plane;\n      var snap = ref$1.snap;\n      var distance = ref$1.distance;\n      var stacked = ref$1.stacked;\n      var index = snap.barMap.indexOf(id);\n\n      return stacked ?\n        -width / 2 :\n        snap.barOffset[index] - (snap.barAllWidth - distance) / 2\n    },\n\n    valueSlot: function valueSlot() {\n      var this$1 = this;\n\n      var h = this.$createElement;\n\n      return (\n        this.showValue &&\n        h(\n          'g',\n          {\n            attrs: {\n              fill: '#fff'\n            }\n          },\n          this.curPoints.map(function (point, i) {\n            return h(\n              'text',\n              {\n                attrs: {\n                  x: point[0] + this$1.margin + this$1.width / 2,\n                  y: point[2] + (point[1] - point[2]) / 2,\n                  dy: '0.31em',\n                  'text-anchor': 'middle'\n                }\n              },\n              this$1.raws[i]\n            )\n          })\n        )\n      )\n    }\n  },\n\n  methods: {\n    getRect: function getRect(point) {\n      var height = point[2] - point[1];\n\n      return this.$createElement('rect', {\n        attrs: {\n          x: point[0] + this.margin,\n          y: height < 0 ? point[2] : point[1],\n          width: this.width,\n          height: Math.abs(height)\n        }\n      })\n    }\n  },\n\n  render: function render(h) {\n    var this$1 = this;\n\n    var ref = this;\n    var curPoints = ref.curPoints;\n    var curColor = ref.curColor;\n    var animated = ref.animated;\n    var trans = ref.trans;\n    var pointSlot = ref.pointSlot;\n    var valueSlot = ref.valueSlot;\n    var actived = ref.actived;\n\n    if (!actived) {\n      return null\n    }\n\n    var rects = [];\n\n    if (animated) {\n      rects = curPoints.map(function (point) {\n        return h(\n          Trans,\n          {\n            props: {\n              from: {\n                height: 0,\n                y: this$1.Plane.canvas.y1\n              },\n              trans: trans\n            }\n          },\n          [this$1.getRect(point)]\n        )\n      });\n    } else {\n      rects = curPoints.map(this.getRect);\n    }\n\n    return h(\n      'g',\n      {\n        attrs: {\n          fill: curColor\n        }\n      },\n      [].concat(rects, valueSlot, pointSlot)\n    )\n  }\n}\n\nvar polar = {\n  type: 'polar',\n\n  mixins: [chart]\n}\n\nfunction descending(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n\nfunction identity(d) {\n  return d;\n}\n\nvar abs = Math.abs;\nvar atan2 = Math.atan2;\nvar cos = Math.cos;\nvar max = Math.max;\nvar min = Math.min;\nvar sin = Math.sin;\nvar sqrt = Math.sqrt;\n\nvar epsilon$1 = 1e-12;\nvar pi$1 = Math.PI;\nvar halfPi = pi$1 / 2;\nvar tau$1 = 2 * pi$1;\n\nfunction acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);\n}\n\nfunction asin(x) {\n  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);\n}\n\nfunction pie() {\n  var value = identity,\n      sortValues = descending,\n      sort = null,\n      startAngle = constant(0),\n      endAngle = constant(tau$1),\n      padAngle = constant(0);\n\n  function pie(data) {\n    var i,\n        n = data.length,\n        j,\n        k,\n        sum = 0,\n        index = new Array(n),\n        arcs = new Array(n),\n        a0 = +startAngle.apply(this, arguments),\n        da = Math.min(tau$1, Math.max(-tau$1, endAngle.apply(this, arguments) - a0)),\n        a1,\n        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),\n        pa = p * (da < 0 ? -1 : 1),\n        v;\n\n    for (i = 0; i < n; ++i) {\n      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {\n        sum += v;\n      }\n    }\n\n    // Optionally sort the arcs by previously-computed values or by data.\n    if (sortValues != null) { index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); }); }\n    else if (sort != null) { index.sort(function(i, j) { return sort(data[i], data[j]); }); }\n\n    // Compute the arcs! They are stored in the original data's order.\n    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {\n      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {\n        data: data[j],\n        index: i,\n        value: v,\n        startAngle: a0,\n        endAngle: a1,\n        padAngle: p\n      };\n    }\n\n    return arcs;\n  }\n\n  pie.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(+_), pie) : value;\n  };\n\n  pie.sortValues = function(_) {\n    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;\n  };\n\n  pie.sort = function(_) {\n    return arguments.length ? (sort = _, sortValues = null, pie) : sort;\n  };\n\n  pie.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : startAngle;\n  };\n\n  pie.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : endAngle;\n  };\n\n  pie.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), pie) : padAngle;\n  };\n\n  return pie;\n}\n\nfunction arcInnerRadius(d) {\n  return d.innerRadius;\n}\n\nfunction arcOuterRadius(d) {\n  return d.outerRadius;\n}\n\nfunction arcStartAngle(d) {\n  return d.startAngle;\n}\n\nfunction arcEndAngle(d) {\n  return d.endAngle;\n}\n\nfunction arcPadAngle(d) {\n  return d && d.padAngle; // Note: optional!\n}\n\nfunction intersect(x0, y0, x1, y1, x2, y2, x3, y3) {\n  var x10 = x1 - x0, y10 = y1 - y0,\n      x32 = x3 - x2, y32 = y3 - y2,\n      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);\n  return [x0 + t * x10, y0 + t * y10];\n}\n\n// Compute perpendicular offset line of length rc.\n// http://mathworld.wolfram.com/Circle-LineIntersection.html\nfunction cornerTangents(x0, y0, x1, y1, r1, rc, cw) {\n  var x01 = x0 - x1,\n      y01 = y0 - y1,\n      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),\n      ox = lo * y01,\n      oy = -lo * x01,\n      x11 = x0 + ox,\n      y11 = y0 + oy,\n      x10 = x1 + ox,\n      y10 = y1 + oy,\n      x00 = (x11 + x10) / 2,\n      y00 = (y11 + y10) / 2,\n      dx = x10 - x11,\n      dy = y10 - y11,\n      d2 = dx * dx + dy * dy,\n      r = r1 - rc,\n      D = x11 * y10 - x10 * y11,\n      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),\n      cx0 = (D * dy - dx * d) / d2,\n      cy0 = (-D * dx - dy * d) / d2,\n      cx1 = (D * dy + dx * d) / d2,\n      cy1 = (-D * dx + dy * d) / d2,\n      dx0 = cx0 - x00,\n      dy0 = cy0 - y00,\n      dx1 = cx1 - x00,\n      dy1 = cy1 - y00;\n\n  // Pick the closer of the two intersection points.\n  // TODO Is there a faster way to determine which intersection to use?\n  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) { cx0 = cx1, cy0 = cy1; }\n\n  return {\n    cx: cx0,\n    cy: cy0,\n    x01: -ox,\n    y01: -oy,\n    x11: cx0 * (r1 / r - 1),\n    y11: cy0 * (r1 / r - 1)\n  };\n}\n\nfunction arc() {\n  var innerRadius = arcInnerRadius,\n      outerRadius = arcOuterRadius,\n      cornerRadius = constant(0),\n      padRadius = null,\n      startAngle = arcStartAngle,\n      endAngle = arcEndAngle,\n      padAngle = arcPadAngle,\n      context = null;\n\n  function arc() {\n    var buffer,\n        r,\n        r0 = +innerRadius.apply(this, arguments),\n        r1 = +outerRadius.apply(this, arguments),\n        a0 = startAngle.apply(this, arguments) - halfPi,\n        a1 = endAngle.apply(this, arguments) - halfPi,\n        da = abs(a1 - a0),\n        cw = a1 > a0;\n\n    if (!context) { context = buffer = path(); }\n\n    // Ensure that the outer radius is always larger than the inner radius.\n    if (r1 < r0) { r = r1, r1 = r0, r0 = r; }\n\n    // Is it a point?\n    if (!(r1 > epsilon$1)) { context.moveTo(0, 0); }\n\n    // Or is it a circle or annulus?\n    else if (da > tau$1 - epsilon$1) {\n      context.moveTo(r1 * cos(a0), r1 * sin(a0));\n      context.arc(0, 0, r1, a0, a1, !cw);\n      if (r0 > epsilon$1) {\n        context.moveTo(r0 * cos(a1), r0 * sin(a1));\n        context.arc(0, 0, r0, a1, a0, cw);\n      }\n    }\n\n    // Or is it a circular or annular sector?\n    else {\n      var a01 = a0,\n          a11 = a1,\n          a00 = a0,\n          a10 = a1,\n          da0 = da,\n          da1 = da,\n          ap = padAngle.apply(this, arguments) / 2,\n          rp = (ap > epsilon$1) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),\n          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),\n          rc0 = rc,\n          rc1 = rc,\n          t0,\n          t1;\n\n      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.\n      if (rp > epsilon$1) {\n        var p0 = asin(rp / r0 * sin(ap)),\n            p1 = asin(rp / r1 * sin(ap));\n        if ((da0 -= p0 * 2) > epsilon$1) { p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0; }\n        else { da0 = 0, a00 = a10 = (a0 + a1) / 2; }\n        if ((da1 -= p1 * 2) > epsilon$1) { p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1; }\n        else { da1 = 0, a01 = a11 = (a0 + a1) / 2; }\n      }\n\n      var x01 = r1 * cos(a01),\n          y01 = r1 * sin(a01),\n          x10 = r0 * cos(a10),\n          y10 = r0 * sin(a10);\n\n      // Apply rounded corners?\n      if (rc > epsilon$1) {\n        var x11 = r1 * cos(a11),\n            y11 = r1 * sin(a11),\n            x00 = r0 * cos(a00),\n            y00 = r0 * sin(a00);\n\n        // Restrict the corner radius according to the sector angle.\n        if (da < pi$1) {\n          var oc = da0 > epsilon$1 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],\n              ax = x01 - oc[0],\n              ay = y01 - oc[1],\n              bx = x11 - oc[0],\n              by = y11 - oc[1],\n              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),\n              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);\n          rc0 = min(rc, (r0 - lc) / (kc - 1));\n          rc1 = min(rc, (r1 - lc) / (kc + 1));\n        }\n      }\n\n      // Is the sector collapsed to a line?\n      if (!(da1 > epsilon$1)) { context.moveTo(x01, y01); }\n\n      // Does the sector’s outer ring have rounded corners?\n      else if (rc1 > epsilon$1) {\n        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);\n        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);\n\n        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc1 < rc) { context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); }\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);\n          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the outer ring just a circular arc?\n      else { context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); }\n\n      // Is there no inner ring, and it’s a circular sector?\n      // Or perhaps it’s an annular sector collapsed due to padding?\n      if (!(r0 > epsilon$1) || !(da0 > epsilon$1)) { context.lineTo(x10, y10); }\n\n      // Does the sector’s inner ring (or point) have rounded corners?\n      else if (rc0 > epsilon$1) {\n        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);\n        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);\n\n        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);\n\n        // Have the corners merged?\n        if (rc0 < rc) { context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw); }\n\n        // Otherwise, draw the two corners and the ring.\n        else {\n          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);\n          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);\n          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);\n        }\n      }\n\n      // Or is the inner ring just a circular arc?\n      else { context.arc(0, 0, r0, a10, a00, cw); }\n    }\n\n    context.closePath();\n\n    if (buffer) { return context = null, buffer + \"\" || null; }\n  }\n\n  arc.centroid = function() {\n    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,\n        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$1 / 2;\n    return [cos(a) * r, sin(a) * r];\n  };\n\n  arc.innerRadius = function(_) {\n    return arguments.length ? (innerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : innerRadius;\n  };\n\n  arc.outerRadius = function(_) {\n    return arguments.length ? (outerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : outerRadius;\n  };\n\n  arc.cornerRadius = function(_) {\n    return arguments.length ? (cornerRadius = typeof _ === \"function\" ? _ : constant(+_), arc) : cornerRadius;\n  };\n\n  arc.padRadius = function(_) {\n    return arguments.length ? (padRadius = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), arc) : padRadius;\n  };\n\n  arc.startAngle = function(_) {\n    return arguments.length ? (startAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : startAngle;\n  };\n\n  arc.endAngle = function(_) {\n    return arguments.length ? (endAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : endAngle;\n  };\n\n  arc.padAngle = function(_) {\n    return arguments.length ? (padAngle = typeof _ === \"function\" ? _ : constant(+_), arc) : padAngle;\n  };\n\n  arc.context = function(_) {\n    return arguments.length ? (context = _ == null ? null : _, arc) : context;\n  };\n\n  return arc;\n}\n\nvar Circle = {\n  name: 'LaMotionCircle',\n\n  functional: true,\n\n  props: ['r', 'transition'],\n\n  render: function render(h, ref) {\n    var children = ref.children;\n    var props = ref.props;\n    var parent = ref.parent;\n\n    var id = \"la-circle-\" + (parent._uid);\n    var transition = props.transition;\n\n    return h('g', [\n      h('defs', [\n        h(\n          'clipPath',\n          {\n            attrs: {\n              id: id\n            }\n          },\n          [\n            h(\n              Trans,\n              {\n                props: {\n                  from: {\n                    r: 0\n                  },\n                  trans: transition\n                }\n              },\n              [\n                h('circle', {\n                  attrs: {\n                    r: props.r * 1.5\n                  }\n                })\n              ]\n            )\n          ]\n        )\n      ]),\n      h(\n        'g',\n        {\n          attrs: {\n            'clip-path': (\"url(#\" + id + \")\")\n          }\n        },\n        children\n      )\n    ])\n  }\n}\n\nvar Pie = {\n  name: 'LaPie',\n\n  mixins: [polar],\n\n  props: {\n    translate: {\n      type: [String, Array],\n      default: function () { return ['50%', '50%']; }\n    },\n\n    radius: {\n      type: [Number, Array],\n      default: function () { return [0, 100]; }\n    },\n\n    angles: {\n      type: [Number, Array],\n      default: function () { return [0, Math.PI * 2]; }\n    },\n\n    showLabel: Boolean,\n\n    labelProp: {\n      type: String,\n      default: 'label'\n    }\n  },\n\n  computed: {\n    arcs: function arcs() {\n      return pie()\n        .startAngle(this.curAngles[0])\n        .endAngle(this.curAngles[1])\n        .sortValues(noop)(this.raws)\n    },\n\n    curRadius: function curRadius() {\n      var innerRadius = isArr(this.radius) ? this.radius[0] : 0;\n      var outerRadius = isArr(this.radius) ? this.radius[1] : 100;\n\n      if (this.min && this.$parent.fillContainer) {\n        outerRadius = this.min / 2;\n\n        if (this.showLabel) {\n          outerRadius -= this.min / 4;\n        }\n      }\n\n      return [innerRadius, outerRadius]\n    },\n\n    curAngles: function curAngles() {\n      var ref = this;\n      var angles = ref.angles;\n\n      return isArr(angles) ? angles : [0, angles]\n    },\n\n    draw: function draw() {\n      return arc()\n        .innerRadius(this.curRadius[0])\n        .outerRadius(this.curRadius[1])\n    },\n\n    drawText: function drawText() {\n      return arc()\n        .innerRadius((this.$parent.fillContainer ? 0 : this.curRadius[1]) * 0.7)\n        .outerRadius((this.$parent.fillContainer ? this.min : this.curRadius[1]) * 0.7)\n    },\n\n    drawTextLabels: function drawTextLabels() {\n      var innerRadius = this.$parent.fillContainer ? (this.radius[0] + this.min / 5) : this.curRadius[1] * 0.7;\n      var outerRadius = this.$parent.fillContainer ? (this.radius[0] + this.min / 5) : this.curRadius[1] * 0.7;\n\n      return arc()\n        .innerRadius(innerRadius)\n        .outerRadius(outerRadius)\n    },\n\n    min: function min() {\n      return this.$parent.min\n    },\n\n    valueSlot: function valueSlot() {\n      var this$1 = this;\n\n      if (!this.showValue) {\n        return\n      }\n      var h = this.$createElement;\n\n      return this.arcs.map(function (arc$$1, i) {\n        var point = this$1.drawText.centroid(arc$$1);\n\n        return h(\n          'text',\n          {\n            attrs: {\n              x: point[0],\n              y: point[1],\n              fill: '#fff',\n              'text-anchor': 'middle'\n            }\n          },\n          this$1.raws[i]\n        )\n      })\n    },\n\n    labels: function labels() {\n      var ref = this;\n      var labelProp = ref.labelProp;\n      var Plane = ref.Plane;\n\n      return labelProp ? Plane.data.map(function (o) { return o[labelProp]; }) : null\n    },\n\n    labelSlot: function labelSlot() {\n      var this$1 = this;\n\n      if (!this.showLabel) {\n        return\n      }\n\n      var h = this.$createElement;\n\n      return this.arcs.map(function (arc$$1, i) {\n        var point = this$1.drawTextLabels.centroid(arc$$1);\n\n        return h(\n          'text',\n          {\n            attrs: {\n              x: (point[0] * 0.95) << 1,\n              y: (point[1] * 0.95) << 1,\n              fill: '#000',\n              'text-anchor': 'middle'\n            }\n          },\n          this$1.labels[i]\n        )\n      })\n    }\n  },\n\n  render: function render(h) {\n    var this$1 = this;\n\n    var ref = this.Plane;\n    var genColor = ref.genColor;\n    var ref$1 = this;\n    var animated = ref$1.animated;\n    var arcs = ref$1.arcs;\n    var draw = ref$1.draw;\n    var paths = arcs.map(draw).map(function (d, i) {\n      return h('path', {\n        attrs: {\n          d: d,\n          fill: genColor(i),\n          stroke: '#fff'\n        }\n      })\n    });\n    var scoped = this.$scopedSlots.default;\n    var pointSlot =\n      scoped &&\n      arcs.map(function (arc$$1, i) {\n        var point = this$1.drawText.centroid(arc$$1);\n        return scoped({\n          arc: arc$$1,\n          index: i,\n          x: point[0],\n          y: point[1],\n          style: {\n            transition: this$1.trans\n          }\n        })\n      });\n    var nodes = [].concat(paths, this.valueSlot, this.labelSlot, pointSlot);\n\n    var data = {\n      style: {\n        transform: (\"translate(\" + (this.translate) + \")\")\n      }\n    };\n\n    if (animated) {\n      return h('g', data, [\n        h(\n          Circle,\n          {\n            props: {\n              transition: this.trans,\n              r: this.curRadius[1]\n            }\n          },\n          nodes\n        )\n      ])\n    }\n\n    return h('g', data, nodes)\n  }\n}\n\nvar object = {\n  mixins: [basic],\n\n  props: {\n    color: String\n  },\n\n  type: 'object',\n\n  computed: {\n    curColor: function curColor() {\n      return this.color || this.Plane.textColor\n    }\n  }\n}\n\nvar CAP_HEIGHT = 0.71;\n\nvar axes = {\n  props: {\n    color: String,\n\n    tickSize: {\n      type: Number,\n      default: 5\n    },\n\n    fontSize: {\n      type: Number,\n      default: 15\n    },\n\n    format: Function,\n\n    gridline: Boolean,\n\n    gridlineInterval: [Function, Number],\n\n    interval: [Function, Number],\n\n    ticks: Array,\n\n    nbTicks: Number\n  },\n\n  mixins: [object, values, dashed],\n\n  computed: {\n    isX: function isX() {\n      return this.$options.axis === 'x'\n    },\n\n    labels: function labels() {\n      var raws = this.raws;\n      var board = this.Plane;\n      var length = board.len;\n\n      if (this.isX) {\n        raws = raws || Array.apply(null, {length: length}).map(function (n, i) { return i + 1; });\n      } else {\n        raws = genTicks(board.low, board.high, length);\n      }\n\n      return raws\n    },\n\n    gap: function gap() {\n      return this.isX ? this.Plane.gap : 0\n    },\n\n    points: function points() {\n      var ref = this;\n      var board = ref.Plane;\n      var isX = ref.isX;\n      var labels = ref.labels;\n      var inverse = ref.inverse;\n      var gap = ref.gap;\n      var ref$1 = board.canvas;\n      var x0 = ref$1.x0;\n      var y0 = ref$1.y0;\n      var y1 = ref$1.y1;\n      var width = ref$1.width;\n      var height = ref$1.height;\n      var points;\n\n      if (isX) {\n        var xRatio = board.xRatio;\n        var offset = inverse ? 0 : height;\n        var y = y0 + offset;\n\n        points = labels.map(function (value, i) {\n          var x = x0 + xRatio * i + gap;\n\n          return [x, y]\n        });\n      } else {\n        var yRatio = board.yRatio;\n        var low = board.low;\n        var offset$1 = inverse ? width : 0;\n        var x = x0 + offset$1;\n\n        points = labels.map(function (value) {\n          var y = y1 - (value - low) * yRatio;\n\n          return [x, y]\n        });\n      }\n\n      return points\n    },\n\n    curColor: function curColor() {\n      return this.color || this.Plane.textColor\n    },\n\n    handleInterval: function handleInterval() {\n      var ref = this;\n      var interval = ref.interval;\n\n      if (typeof interval === 'number') {\n        return function (i) {\n          return i % interval === 0\n        }\n      }\n\n      if (isFn(interval)) {\n        return interval\n      }\n    },\n\n    handleGridlineInterval: function handleGridlineInterval() {\n      var ref = this;\n      var gridlineInterval = ref.gridlineInterval;\n\n      if (typeof gridlineInterval === 'number') {\n        return function (i) {\n          return i % gridlineInterval === 0\n        }\n      }\n\n      if (isFn(gridlineInterval)) {\n        return gridlineInterval\n      }\n    }\n  },\n\n  watch: {\n    'store.activedIndex': function store_activedIndex(index) {\n      if (this.isX) {\n        this.$set(this.store, 'activedLabel', this.labels[index]);\n      }\n    }\n  },\n\n  render: function render(h) {\n    var this$1 = this;\n\n    var ref = this;\n    var ticks = ref.ticks;\n\n    var ref$1 = this;\n    var nbTicks = ref$1.nbTicks;\n    var points = ref$1.points;\n    var labels = ref$1.labels;\n    var tickSize = ref$1.tickSize;\n    var fontSize = ref$1.fontSize;\n    var curColor = ref$1.curColor;\n    var isX = ref$1.isX;\n    var format = ref$1.format;\n    var inverse = ref$1.inverse;\n    var gap = ref$1.gap;\n    var board = ref$1.Plane;\n    var store = ref$1.store;\n    var first = points[0];\n    var end = points[points.length - 1];\n    var tspanSlot = this.$scopedSlots.default;\n\n    var lineSize = (inverse ? -1 : 1) * tickSize;\n    var yLineOffset = (isX ? 1 : 0) * lineSize;\n    var xLineOffset = (isX ? 0 : 1) * lineSize;\n    var textAlign = isX ? 'middle' : inverse ? 'start' : 'end';\n    var spanYOffset = isX ?\n      inverse ? CAP_HEIGHT - 1 : CAP_HEIGHT :\n      CAP_HEIGHT / 2;\n    var textYOffset = (isX ? lineSize : 0) * 1.5;\n    var textXOffset = (isX ? 0 : lineSize) * 1.5;\n\n    if (ticks || nbTicks) {\n      var yBasis = board.height - board.offset[2];\n\n      if (nbTicks) {\n        ticks = genExactNbTicks(board.low, board.high, nbTicks);\n      }\n\n      ticks = ticks.map(function (value) {\n        return h('g', [\n          tickSize &&\n            h('line', {\n              attrs: {\n                x1: 0 - xLineOffset + board.offset[3],\n                x2: 6 - xLineOffset + board.offset[3],\n                y1: yBasis - value * board.yRatio,\n                y2: yBasis - value * board.yRatio - yLineOffset,\n                stroke: curColor\n              }\n            }),\n          h(\n            'text',\n            {\n              attrs: {\n                x: 0 - textXOffset + board.offset[3],\n                y:\n                  board.height -\n                  board.offset[2] -\n                  value * board.yRatio -\n                  textYOffset,\n                dy: spanYOffset + 'em',\n                stroke: 'none'\n              }\n            },\n            tspanSlot ?\n              tspanSlot({value: value}) :\n              isFn(format) ? format(value) : value\n          )\n        ])\n      });\n    } else {\n      ticks = labels\n        .map(function (value, i) {\n          var point = points[i];\n\n          if (this$1.handleInterval && !this$1.handleInterval(i)) {\n            return false\n          }\n\n          return h('g', [\n            tickSize &&\n              h('line', {\n                attrs: {\n                  x1: point[0] - xLineOffset,\n                  x2: point[0],\n                  y1: point[1] + yLineOffset,\n                  y2: point[1],\n                  stroke: curColor\n                }\n              }),\n            h(\n              'text',\n              {\n                attrs: {\n                  x: point[0] - textXOffset,\n                  y: point[1] + textYOffset,\n                  dy: spanYOffset + 'em',\n                  stroke: 'none'\n                }\n              },\n              tspanSlot ?\n                tspanSlot({value: value}) :\n                isFn(format) ? format(value) : value\n            )\n          ])\n        })\n        .filter(Boolean);\n    }\n\n    return h(\n      'g',\n      {\n        attrs: {\n          stroke: curColor\n        }\n      },\n      [\n        h('line', {\n          attrs: {\n            x2: end[0] + gap,\n            y2: end[1],\n            x1: first[0] - gap,\n            y1: first[1]\n          }\n        }),\n        [\n          h(\n            'g',\n            {\n              attrs: {\n                'text-anchor': textAlign,\n                'font-size': fontSize,\n                fill: curColor,\n                stroke: 'none'\n              }\n            },\n            ticks\n          )\n        ].concat(\n          this.gridline &&\n            points.reduce(function (all, p, i) {\n              if (\n                !this$1.handleGridlineInterval ||\n                this$1.handleGridlineInterval(i)\n              ) {\n                all.push(\n                  h('line', {\n                    attrs: {\n                      x1: p[0],\n                      y1: p[1],\n                      x2: isX ? p[0] : board.canvas.x1,\n                      y2: isX ? board.canvas.y0 : p[1]\n                    },\n                    style: {\n                      opacity: isX && store.activedIndex === i ? 1 : 0.3,\n                      'stroke-dasharray': this$1.curDashed\n                    }\n                  })\n                );\n              }\n              return all\n            }, [])\n        )\n      ]\n    )\n  }\n}\n\nvar XAxis = {\n  name: 'LaXAxis',\n\n  axis: 'x',\n\n  space: [0, 20, 24, 20],\n\n  mixins: [axes]\n}\n\nvar YAxis = {\n  name: 'LaYAxis',\n\n  axis: 'y',\n\n  space: [10, 0, 0, 40],\n\n  mixins: [axes]\n}\n\nvar XAxisInverse = {\n  name: 'LaXAxisInverse',\n\n  space: [24, 20, 0, 20],\n\n  beforeCreate: function beforeCreate() {\n    this.inverse = true;\n  },\n\n  mixins: [XAxis]\n}\n\nvar YAxisInverse = {\n  name: 'LaYAxisInverse',\n\n  space: [10, 40, 0, 0],\n\n  beforeCreate: function beforeCreate() {\n    this.inverse = true;\n  },\n\n  mixins: [YAxis]\n}\n\nvar YMarker = {\n  name: 'LaYMarker',\n\n  mixins: [object, dashed],\n\n  props: {\n    label: String,\n\n    value: Number,\n\n    placement: {\n      type: String,\n      default: 'end'\n    }\n  },\n\n  computed: {\n    point: function point() {\n      var ref = this.Plane;\n      var yRatio = ref.yRatio;\n      var low = ref.low;\n      var canvas = ref.canvas;\n      var x0 = canvas.x0;\n      var y1 = canvas.y1;\n      var x1 = canvas.x1;\n      var y = y1 - (this.value - low) * yRatio;\n\n      return {x1: x0, y1: y, y2: y, x2: x1}\n    }\n  },\n\n  render: function render(h) {\n    var ref = this;\n    var point = ref.point;\n    var curColor = ref.curColor;\n    var curDashed = ref.curDashed;\n    var label = ref.label;\n    var placement = ref.placement;\n\n    return h(\n      'g',\n\n      [\n        h('line', {\n          attrs: point,\n          style: {\n            stroke: curColor,\n            'stroke-dasharray': curDashed\n          }\n        }),\n        label &&\n          h(\n            'text',\n            {\n              attrs: {\n                fill: curColor,\n                x:\n                  placement === 'end' ?\n                    point.x2 :\n                    placement === 'start' ?\n                      point.x1 :\n                      (point.x2 - point.x1) / 2 + point.x1,\n                y: point.y1,\n                dy: '-0.31em',\n                'text-anchor': placement\n              }\n            },\n            label\n          )\n      ]\n    )\n  }\n}\n\nvar YRegion = {\n  name: 'LaYRegion',\n\n  mixins: [object, dashed],\n\n  props: {\n    label: String,\n\n    low: {\n      type: Number,\n      required: true\n    },\n\n    high: {\n      type: Number,\n      required: true\n    },\n\n    fillColor: String,\n\n    placement: {\n      type: String,\n      default: 'end'\n    }\n  },\n\n  computed: {\n    point: function point() {\n      var ref = this.Plane;\n      var yRatio = ref.yRatio;\n      var low = ref.low;\n      var canvas = ref.canvas;\n      var x0 = canvas.x0;\n      var y1 = canvas.y1;\n      var width = canvas.width;\n\n      return {\n        x: x0,\n        y: y1 - (this.high - low) * yRatio,\n        height: (this.high - this.low) * yRatio,\n        width: width\n      }\n    },\n\n    fillAttr: function fillAttr() {\n      var ref = this;\n      var fillColor = ref.fillColor;\n\n      return fillColor ?\n        {\n          fill: fillColor,\n          stroke: this.curColor\n        } :\n        {\n          stroke: this.curColor,\n          opacity: 0.3\n        }\n    }\n  },\n\n  render: function render(h) {\n    var ref = this;\n    var label = ref.label;\n    var point = ref.point;\n    var placement = ref.placement;\n    var fillAttr = ref.fillAttr;\n\n    if (this.high < this.low) {\n      return\n    }\n\n    return h(\n      'g',\n      {\n        attrs: {\n          fill: this.curColor\n        }\n      },\n      [\n        h('rect', {\n          attrs: extend(fillAttr, point),\n          style: {\n            'stroke-dasharray': this.curDashed\n          }\n        }),\n        label &&\n          h(\n            'text',\n            {\n              attrs: {\n                x:\n                  placement === 'end' ?\n                    point.x + point.width :\n                    placement === 'start' ?\n                      point.x :\n                      point.width / 2 + point.x,\n                y: point.y,\n                dy: '-0.31em',\n                'text-anchor': placement\n              }\n            },\n            label\n          )\n      ]\n    )\n  }\n}\n\nvar widget = {\n  type: 'widget',\n\n  mixins: [basic]\n}\n\nvar Tooltip = {\n  name: 'LaTooltip',\n\n  mixins: [widget, animate],\n\n  props: {\n    animationDuration: {\n      default: 0.5,\n      type: Number\n    }\n  },\n\n  data: function () { return ({\n    left: 0,\n    top: 0,\n    show: false\n  }); },\n\n  methods: {\n    handleMove: function handleMove(ref) {\n      var x = ref.x;\n      var y = ref.y;\n\n      var board = this.Plane;\n      var boardRect = board.$el.getBoundingClientRect();\n      var rect = this.$el.getBoundingClientRect();\n      var relY = y - boardRect.y;\n      var relX = x - boardRect.x - this.offsetX;\n      var index = Math.round(relX / board.xRatio);\n      var maxLeft = board.canvas.x1 - rect.width;\n      var maxTop = board.canvas.y1 - rect.height;\n      var offset = 10;\n\n      if (relY >= board.canvas.y0 && relY <= board.canvas.y1) {\n        if (index > -1 && index < board.len) {\n          this.left = Math.min(\n            index * board.xRatio + this.offsetX + offset,\n            maxLeft\n          );\n          this.$set(this.store, 'activedIndex', index);\n          this.top = Math.min(relY + offset, maxTop);\n          this.show = true;\n        }\n        return\n      }\n      this.handleLeave();\n    },\n\n    handleLeave: function handleLeave() {\n      this.show = false;\n      this.$set(this.store, 'activedIndex', null);\n    }\n  },\n\n  computed: {\n    offsetX: function offsetX() {\n      var board = this.Plane;\n      return board.canvas.x0 + board.gap\n    }\n  },\n  mounted: function mounted() {\n    var this$1 = this;\n\n    var board = this.Plane;\n    var el = board.$el;\n\n    el.addEventListener('mousemove', debounce(this.handleMove, 10));\n    el.addEventListener('mouseleave', this.handleLeave);\n    el.addEventListener(\n      'touchmove',\n      function (e) {\n        var touch = e.touches[0];\n        this$1.handleMove({x: touch.clientX, y: touch.clientY});\n      },\n      {\n        passive: true\n      }\n    );\n  },\n\n  render: function render(h) {\n    var ref = this.store;\n    var activedLabel = ref.activedLabel;\n    var activedPoint = ref.activedPoint; if ( activedPoint === void 0 ) activedPoint = [];\n    var activedIndex = ref.activedIndex;\n    var slot = this.$scopedSlots.default;\n    var tooltip = slot ?\n      slot({\n        label: activedLabel,\n        actived: activedPoint,\n        index: activedIndex\n      }) :\n      h(\n        'div',\n        {\n          style: {\n            background: '#00000095',\n            padding: '8px',\n            color: '#fff',\n            borderRadius: '4px'\n          }\n        },\n        [\n          h(\n            'div',\n            {\n              style: {\n                marginBottom: '.5em'\n              }\n            },\n            activedLabel\n          ),\n          activedPoint.map(function (active) { return h('div', [\n              h('span', {\n                style: {\n                  backgroundColor: active.color,\n                  height: '10px',\n                  width: '10px',\n                  borderRadius: '50%',\n                  display: 'inline-block',\n                  marginRight: '5px'\n                }\n              }),\n              active.label &&\n                  h(\n                    'span',\n                    {\n                      style: {\n                        marginRight: '5px'\n                      }\n                    },\n                    active.label + ':'\n                  ),\n              h('span', active.value)\n            ]); }\n          )\n        ]\n      );\n\n    return h(\n      'div',\n      {\n        class: 'la-tooltip',\n        style: {\n          position: 'absolute',\n          top: 0,\n          transform: (\"translate(\" + (this.left) + \"px, \" + (this.top) + \"px)\"),\n          transition: this.trans,\n          opacity: Number(this.show)\n        }\n      },\n      [tooltip]\n    )\n  }\n}\n\nvar Legend = {\n  name: 'LaLegend',\n\n  mixins: [widget],\n\n  props: {\n    selectable: Boolean,\n\n    /**\n     * ^(top|bottom|left|right)(-(start|center|end))?$\n     */\n    placement: {\n      type: String,\n      default: 'bottom'\n    },\n\n    color: String\n  },\n\n  preload: function preload(ref) {\n    var data = ref.data;\n    var parent = ref.parent;\n\n    var placement = data.placement; if ( placement === void 0 ) placement = 'bottom';\n    var space = [0, 0, 0, 0];\n\n    switch (placement.match(/^(\\w+)-?/)[1]) {\n      case 'bottom':\n        space[2] = 50;\n        break\n      case 'top':\n        space[0] = 50;\n        break\n      case 'left':\n        space[3] = 100;\n        break\n      case 'right':\n        space[1] = 100;\n        break\n      default:\n        break\n    }\n\n    parent.addSpace(space);\n  },\n\n  computed: {\n    curColor: function curColor() {\n      return this.color || this.Plane.textColor\n    },\n\n    position: function position() {\n      return this.placement.match(/^(\\w+)(-(\\w+))?$/)[1]\n    },\n\n    align: function align() {\n      return this.placement.match(/^(\\w+)(-(\\w+))?$/)[3]\n    },\n\n    pos: function pos() {\n      var ref = this;\n      var position = ref.position;\n      var align = ref.align;\n      var pos = {};\n\n      if (position === 'top' || position === 'bottom') {\n        switch (align) {\n          case 'start':\n            pos.left = 0;\n            break\n          case 'end':\n            pos.right = 0;\n            break\n          default:\n            pos.left = '50%';\n            pos.transform = 'translateX(-50%)';\n            break\n        }\n        if (position === 'top') {\n          pos.top = 0;\n        } else {\n          pos.bottom = 0;\n        }\n      } else {\n        switch (align) {\n          case 'start':\n            pos.top = 0;\n            break\n          case 'end':\n            pos.bottom = 0;\n            break\n          default:\n            pos.top = '50%';\n            pos.transform = 'translateY(-50%)';\n            break\n        }\n        if (position === 'left') {\n          pos.left = 0;\n        } else {\n          pos.right = 0;\n        }\n      }\n\n      return pos\n    }\n  },\n\n  created: function created() {\n    this.$set(this.store, 'hidden', []);\n  },\n\n  render: function render(h) {\n    var ref = this;\n    var curColor = ref.curColor;\n    var pos = ref.pos;\n    var position = ref.position;\n    var selectable = ref.selectable;\n    var store = ref.store;\n    var hidden = store.hidden;\n    var slot = this.$scopedSlots.default;\n\n    return h(\n      'div',\n      {\n        class: 'la-legend',\n        style: extend(\n          {\n            position: 'absolute'\n          },\n          pos\n        )\n      },\n      Object.keys(store.props).map(function (id) { return h(\n          'div',\n          {\n            style: {\n              display:\n                position === 'left' || position === 'right' ?\n                  'block' :\n                  'inline-block',\n              marginRight: '10px',\n              marginLeft: '5px',\n              color: curColor,\n              cursor: selectable ? 'pointer' : 'nromal'\n            },\n            on: {\n              click: function () {\n                if (!selectable) {\n                  return\n                }\n                id = Number(id);\n                var index = hidden.indexOf(id);\n\n                if (index < 0) {\n                  hidden.push(id);\n                } else {\n                  hidden.splice(index, 1);\n                }\n              }\n            }\n          },\n          slot ?\n            slot({\n              color: store.colors[id],\n              label: store.labels[id],\n              prop: store.props[id]\n            }) :\n            [\n              h('span', {\n                style: {\n                  backgroundColor: store.colors[id],\n                  height: '10px',\n                  width: '10px',\n                  borderRadius: '50%',\n                  display: 'inline-block',\n                  marginRight: '5px'\n                }\n              }),\n              h(\n                'span',\n                {\n                  style:\n                      hidden.indexOf(Number(id)) > -1 ?\n                        {\n                          textDecoration: 'line-through'\n                        } :\n                        {}\n                },\n                store.labels[id]\n              )\n            ]\n        ); }\n      )\n    )\n  }\n}\n\nfunction Laue(Vue) {\n  [\n    Cartesian,\n    Polar,\n    Line,\n    Area,\n    Bar,\n    Pie,\n    XAxis,\n    YAxis,\n    XAxisInverse,\n    YAxisInverse,\n    Tooltip,\n    Legend,\n    YMarker,\n    YRegion\n  ].forEach(function (c) {\n    Vue.component(c.name, c);\n  });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/laue/dist/laue.js\n");

/***/ })

}]);